
lab7_app.elf:     file format elf32-littlenios2
lab7_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0c000230

Program Header:
    LOAD off    0x00001000 vaddr 0x0c000000 paddr 0x0c000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x0c000020 paddr 0x0c000020 align 2**12
         filesz 0x0000e528 memsz 0x0000e528 flags r-x
    LOAD off    0x0000f548 vaddr 0x0c00e548 paddr 0x0c010318 align 2**12
         filesz 0x00001dd0 memsz 0x00001dd0 flags rw-
    LOAD off    0x000120e8 vaddr 0x0c0120e8 paddr 0x0c0120e8 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  0c000000  0c000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  0c000020  0c000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000dfc8  0c000230  0c000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000350  0c00e1f8  0c00e1f8  0000f1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001dd0  0c00e548  0c010318  0000f548  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  0c0120e8  0c0120e8  000120e8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00011318  2**0
                  CONTENTS
  7 .sdram        00000000  0c012248  0c012248  00011318  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00011318  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ba0  00000000  00000000  00011340  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000167ba  00000000  00000000  00011ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006412  00000000  00000000  0002869a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008483  00000000  00000000  0002eaac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000188c  00000000  00000000  00036f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000032f2  00000000  00000000  000387bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00015095  00000000  00000000  0003baae  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00050b44  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001408  00000000  00000000  00050b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00054a4e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00054a51  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00054a5d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00054a5e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00054a5f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00054a63  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00054a67  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00054a6b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00054a76  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00054a81  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00054a8c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000000e  00000000  00000000  00054a94  2**0
                  CONTENTS, READONLY
 30 .jdi          00004f44  00000000  00000000  00054aa2  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000910eb  00000000  00000000  000599e6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
0c000000 l    d  .entry	00000000 .entry
0c000020 l    d  .exceptions	00000000 .exceptions
0c000230 l    d  .text	00000000 .text
0c00e1f8 l    d  .rodata	00000000 .rodata
0c00e548 l    d  .rwdata	00000000 .rwdata
0c0120e8 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0c012248 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab7_app_bsp//obj/HAL/src/crt0.o
0c000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 palette_test.c
0c0102d4 l     O .rwdata	00000004 vga_ctrl
0c00e548 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 text_mode_vga_color.c
0c0102d8 l     O .rwdata	00000004 vga_ctrl
0c00e6b8 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0c00e28e l     O .rodata	00000010 zeroes.4389
0c00e29e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 dtoa.c
0c003044 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 impure.c
0c00e828 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0c00ec6c l     O .rwdata	00000020 lc_ctype_charset
0c00ec4c l     O .rwdata	00000020 lc_message_charset
0c00ec8c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
0c00e2d0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0c00e3f4 l     O .rodata	00000010 zeroes.4333
0c00e404 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
0c00be3c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0c0102f0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0c00c0cc l     F .text	00000034 alt_dev_reg
0c00f0cc l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0c00c3c0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0c00c5cc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0c00cc04 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0c00cf7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0c00d0b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0c00d0dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0c00d53c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0c00d69c l     F .text	0000003c alt_get_errno
0c00d6d8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0c01211c g     O .bss	00000004 alt_instruction_exception_handler
0c006348 g     F .text	00000074 _mprec_log10
0c006434 g     F .text	0000008c __any_on
0c00e2dc g     O .rodata	00000028 __mprec_tinytens
0c00bf28 g     F .text	0000007c alt_main
0c012148 g     O .bss	00000100 alt_irq
0c010318 g       *ABS*	00000000 __flash_rwdata_start
0c00a814 g     F .text	00000088 .hidden __eqdf2
0c012248 g       *ABS*	00000000 __alt_heap_start
0c0048f4 g     F .text	0000007c _setlocale_r
0c00bfc8 g     F .text	00000024 __malloc_unlock
0c000768 g     F .text	0000026c textVGAColorScreenSaver
0c0080e4 g     F .text	0000015c memmove
0c005408 g     F .text	000000a8 _Balloc
0c00a89c g     F .text	000000dc .hidden __gtdf2
0c00db48 g     F .text	00000024 altera_nios2_gen2_irq_init
0c000000 g     F .entry	0000000c __reset
0c000020 g       *ABS*	00000000 __flash_exceptions_start
0c012100 g     O .bss	00000004 errno
0c006834 g     F .text	000013a0 ___svfiprintf_internal_r
0c012108 g     O .bss	00000004 alt_argv
0c0182d4 g       *ABS*	00000000 _gp
0c00c09c g     F .text	00000030 usleep
0c00043c g     F .text	0000008c textVGAColorClr
0c010154 g     O .rwdata	00000180 alt_fd_list
0c00db6c g     F .text	00000090 alt_find_dev
0c0052c0 g     F .text	00000148 memcpy
0c00bc54 g     F .text	000000dc .hidden __floatsidf
0c00d620 g     F .text	0000007c alt_io_redirect
0c00a978 g     F .text	000000f4 .hidden __ltdf2
0c00e1f8 g       *ABS*	00000000 __DTOR_END__
0c00ddc8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0c0064c0 g     F .text	00000074 __fpclassifyd
0c0062a4 g     F .text	000000a4 __ratio
0c00c7c4 g     F .text	0000021c altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0c000acc g     F .text	00000064 .hidden __udivsi3
0c00e32c g     O .rodata	000000c8 __mprec_tens
0c004970 g     F .text	0000000c __locale_charset
0c0120fc g     O .bss	00000004 __malloc_top_pad
0c0102e4 g     O .rwdata	00000004 __mb_cur_max
0c0049a0 g     F .text	0000000c _localeconv_r
0c00583c g     F .text	0000003c __i2b
0c006534 g     F .text	00000054 _sbrk_r
0c010304 g     O .rwdata	00000004 alt_max_fd
0c0120f8 g     O .bss	00000004 __malloc_max_sbrked_mem
0c009598 g     F .text	000008ac .hidden __adddf3
0c00604c g     F .text	0000010c __b2d
0c008fd4 g     F .text	000005c4 .hidden __umoddi3
0c0102dc g     O .rwdata	00000004 _global_impure_ptr
0c008368 g     F .text	00000564 _realloc_r
0c012248 g       *ABS*	00000000 __bss_end
0c00d44c g     F .text	000000f0 alt_iic_isr_register
0c00da40 g     F .text	00000108 alt_tick
0c0089d8 g     F .text	000005fc .hidden __udivdi3
0c00e304 g     O .rodata	00000028 __mprec_bigtens
0c005620 g     F .text	00000104 __s2b
0c00bd30 g     F .text	000000a8 .hidden __floatunsidf
0c005d8c g     F .text	00000060 __mcmp
0c00d400 g     F .text	0000004c alt_ic_irq_enabled
0c00d9a4 g     F .text	0000009c alt_alarm_stop
0c012110 g     O .bss	00000004 alt_irq_active
0c0000fc g     F .exceptions	000000d4 alt_irq_handler
0c01012c g     O .rwdata	00000028 alt_dev_null
0c00d090 g     F .text	00000020 alt_dcache_flush_all
0c005724 g     F .text	00000068 __hi0bits
0c00bbd4 g     F .text	00000080 .hidden __fixdfsi
0c010318 g       *ABS*	00000000 __ram_rwdata_end
0c0102fc g     O .rwdata	00000008 alt_dev_list
0c00e548 g       *ABS*	00000000 __ram_rodata_end
0c00a978 g     F .text	000000f4 .hidden __ledf2
0c005b04 g     F .text	00000140 __pow5mult
0c0120f0 g     O .bss	00000004 __nlocale_changed
0c000b30 g     F .text	00000058 .hidden __umodsi3
0c012248 g       *ABS*	00000000 end
0c00c300 g     F .text	000000c0 altera_avalon_jtag_uart_init
0c0001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0c00e1f8 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0c00cc7c g     F .text	0000007c alt_avalon_timer_sc_init
0c00bdd8 g     F .text	00000064 .hidden __clzsi2
0c00c9e0 g     F .text	00000224 altera_avalon_jtag_uart_write
0c0051dc g     F .text	000000e4 memchr
0c000c2c g     F .text	00000058 _sprintf_r
0c007dd4 g     F .text	00000310 _free_r
0c00497c g     F .text	00000010 __locale_mb_cur_max
0c00e044 g     F .text	00000180 __call_exitprocs
0c0120ec g     O .bss	00000004 __mlocale_changed
0c0102e8 g     O .rwdata	00000004 __malloc_sbrk_base
0c000230 g     F .text	0000003c _start
0c012114 g     O .bss	00000004 _alt_tick_rate
0c000bc8 g     F .text	00000064 rand
0c005c44 g     F .text	00000148 __lshift
0c012118 g     O .bss	00000004 _alt_nticks
0c00c138 g     F .text	00000064 alt_sys_init
0c006664 g     F .text	000001d0 __ssprint_r
0c00df2c g     F .text	00000118 __register_exitproc
0c005878 g     F .text	0000028c __multiply
0c00c66c g     F .text	00000068 altera_avalon_jtag_uart_close
0c000b88 g     F .text	00000028 .hidden __mulsi3
0c00e548 g       *ABS*	00000000 __ram_rwdata_start
0c00e1f8 g       *ABS*	00000000 __ram_rodata_start
0c012120 g     O .bss	00000028 __malloc_current_mallinfo
0c006158 g     F .text	0000014c __d2b
0c00c19c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0c00dd04 g     F .text	000000c4 alt_get_fd
0c00ce24 g     F .text	00000158 alt_busy_sleep
0c00deb0 g     F .text	0000007c memcmp
0c00c25c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0c012248 g       *ABS*	00000000 __alt_stack_base
0c00c2ac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0c009e44 g     F .text	000009d0 .hidden __divdf3
0c0063bc g     F .text	00000078 __copybits
0c00ecc4 g     O .rwdata	00000408 __malloc_av_
0c00aa6c g     F .text	0000086c .hidden __muldf3
0c00dbfc g     F .text	00000108 alt_find_file
0c00d118 g     F .text	000000a4 alt_dev_llist_insert
0c00bfa4 g     F .text	00000024 __malloc_lock
0c00bfec g     F .text	000000b0 sbrk
0c000d88 g     F .text	000022bc ___svfprintf_internal_r
0c007bd4 g     F .text	000000dc _calloc_r
0c0120e8 g       *ABS*	00000000 __bss_start
0c008240 g     F .text	00000128 memset
0c00026c g     F .text	0000001c main
0c01210c g     O .bss	00000004 alt_envp
0c0120f4 g     O .bss	00000004 __malloc_max_total_mem
0c00c1fc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0c000bb0 g     F .text	00000018 srand
10000000 g       *ABS*	00000000 __alt_heap_limit
0c00326c g     F .text	00001688 _dtoa_r
0c0049d0 g     F .text	0000080c _malloc_r
0c010308 g     O .rwdata	00000004 alt_errno
0c0009d4 g     F .text	00000084 .hidden __divsi3
0c0005d8 g     F .text	00000190 setColorPalette
0c007cb0 g     F .text	00000124 _malloc_trim_r
0c00e1f8 g       *ABS*	00000000 __CTOR_END__
0c006588 g     F .text	000000dc strcmp
0c00e1f8 g       *ABS*	00000000 __flash_rodata_start
0c00e1f8 g       *ABS*	00000000 __DTOR_LIST__
0c00a814 g     F .text	00000088 .hidden __nedf2
0c00c100 g     F .text	00000038 alt_irq_init
0c00d920 g     F .text	00000084 alt_release_fd
0c000c84 g     F .text	0000006c sprintf
0c00e414 g     O .rodata	00000100 .hidden __clz_tab
0c0120e8 g     O .bss	00000004 _PathLocale
0c00de64 g     F .text	00000014 atexit
0c0049ac g     F .text	00000018 setlocale
0c0102e0 g     O .rwdata	00000004 _impure_ptr
0c012104 g     O .bss	00000004 alt_argc
0c00d21c g     F .text	00000060 _do_dtors
0c004998 g     F .text	00000008 __locale_cjk_lang
0c000020 g       .exceptions	00000000 alt_irq_entry
0c005fe8 g     F .text	00000064 __ulp
0c0102f4 g     O .rwdata	00000008 alt_fs_list
0c000020 g       *ABS*	00000000 __ram_exceptions_start
0c0049c4 g     F .text	0000000c localeconv
0c00d29c g     F .text	00000050 alt_ic_isr_register
0c010318 g       *ABS*	00000000 _edata
0c012248 g       *ABS*	00000000 _end
0c000230 g       *ABS*	00000000 __ram_exceptions_end
0c00c6d4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0c0004c8 g     F .text	00000110 textVGADrawColorText
0c00d374 g     F .text	0000008c alt_ic_irq_disable
0c0102ec g     O .rwdata	00000004 __malloc_trim_threshold
0c00498c g     F .text	0000000c __locale_msgcharset
0c00de78 g     F .text	00000038 exit
0c005dec g     F .text	000001fc __mdiff
0c000a58 g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
0c000020 g     F .exceptions	00000000 alt_exception
0c000000 g       *ABS*	00000000 __alt_mem_sdram
0c00e1c4 g     F .text	00000034 _exit
0c00ccf8 g     F .text	0000012c alt_alarm_start
0c0088cc g     F .text	0000010c .hidden __muldi3
0c000cf0 g     F .text	00000098 strlen
0c00d7c4 g     F .text	0000015c open
0c00a89c g     F .text	000000dc .hidden __gedf2
0c00d27c g     F .text	00000020 alt_icache_flush_all
0c01030c g     O .rwdata	00000004 alt_priority_mask
0c00d2ec g     F .text	00000088 alt_ic_irq_enable
0c00b2d8 g     F .text	000008fc .hidden __subdf3
0c00578c g     F .text	000000b0 __lo0bits
0c010310 g     O .rwdata	00000008 alt_alarm_list
0c00d1bc g     F .text	00000060 _do_ctors
0c00cfb8 g     F .text	000000d8 close
0c000288 g     F .text	000001b4 paletteTest
0c00bea4 g     F .text	00000084 alt_load
0c0054d8 g     F .text	00000148 __multadd
0c0054b0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

0c000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 c000000:	00430034 	movhi	at,3072
    ori r1, r1, %lo(_start)
 c000004:	08408c14 	ori	at,at,560
    jmp r1
 c000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

0c000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 c000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 c000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 c000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 c00002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 c000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 c000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 c000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 c00003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 c000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 c000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 c000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 c00004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 c000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 c000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 c000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 c00005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 c000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 c000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 c000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 c00006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 c000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 c000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 c000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 c00007c:	10000326 	beq	r2,zero,c00008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 c000080:	20000226 	beq	r4,zero,c00008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 c000084:	c0000fc0 	call	c0000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 c000088:	00000706 	br	c0000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 c00008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 c000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 c000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 c000098:	c0001d00 	call	c0001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 c00009c:	1000021e 	bne	r2,zero,c0000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 c0000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 c0000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 c0000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 c0000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 c0000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 c0000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 c0000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 c0000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 c0000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 c0000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 c0000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 c0000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 c0000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 c0000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 c0000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 c0000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 c0000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 c0000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 c0000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 c0000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 c0000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 c0000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 c0000f8:	ef80083a 	eret

0c0000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 c0000fc:	defff904 	addi	sp,sp,-28
 c000100:	dfc00615 	stw	ra,24(sp)
 c000104:	df000515 	stw	fp,20(sp)
 c000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 c00010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c000110:	0005313a 	rdctl	r2,ipending
 c000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 c000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 c00011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 c000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 c000124:	00800044 	movi	r2,1
 c000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 c00012c:	e0fffb17 	ldw	r3,-20(fp)
 c000130:	e0bffc17 	ldw	r2,-16(fp)
 c000134:	1884703a 	and	r2,r3,r2
 c000138:	10001426 	beq	r2,zero,c00018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 c00013c:	00830074 	movhi	r2,3073
 c000140:	10885204 	addi	r2,r2,8520
 c000144:	e0fffd17 	ldw	r3,-12(fp)
 c000148:	180690fa 	slli	r3,r3,3
 c00014c:	10c5883a 	add	r2,r2,r3
 c000150:	10c00017 	ldw	r3,0(r2)
 c000154:	00830074 	movhi	r2,3073
 c000158:	10885204 	addi	r2,r2,8520
 c00015c:	e13ffd17 	ldw	r4,-12(fp)
 c000160:	200890fa 	slli	r4,r4,3
 c000164:	1105883a 	add	r2,r2,r4
 c000168:	10800104 	addi	r2,r2,4
 c00016c:	10800017 	ldw	r2,0(r2)
 c000170:	1009883a 	mov	r4,r2
 c000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 c000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c00017c:	0005313a 	rdctl	r2,ipending
 c000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 c000184:	e0bfff17 	ldw	r2,-4(fp)
 c000188:	00000706 	br	c0001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 c00018c:	e0bffc17 	ldw	r2,-16(fp)
 c000190:	1085883a 	add	r2,r2,r2
 c000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 c000198:	e0bffd17 	ldw	r2,-12(fp)
 c00019c:	10800044 	addi	r2,r2,1
 c0001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 c0001a4:	003fe106 	br	c00012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 c0001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 c0001ac:	e0bffb17 	ldw	r2,-20(fp)
 c0001b0:	103fdb1e 	bne	r2,zero,c000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 c0001b4:	0001883a 	nop
}
 c0001b8:	0001883a 	nop
 c0001bc:	e037883a 	mov	sp,fp
 c0001c0:	dfc00117 	ldw	ra,4(sp)
 c0001c4:	df000017 	ldw	fp,0(sp)
 c0001c8:	dec00204 	addi	sp,sp,8
 c0001cc:	f800283a 	ret

0c0001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 c0001d0:	defffb04 	addi	sp,sp,-20
 c0001d4:	dfc00415 	stw	ra,16(sp)
 c0001d8:	df000315 	stw	fp,12(sp)
 c0001dc:	df000304 	addi	fp,sp,12
 c0001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 c0001e4:	00bfffc4 	movi	r2,-1
 c0001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 c0001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 c0001f0:	d0a79217 	ldw	r2,-25016(gp)
 c0001f4:	10000726 	beq	r2,zero,c000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 c0001f8:	d0a79217 	ldw	r2,-25016(gp)
 c0001fc:	e0fffd17 	ldw	r3,-12(fp)
 c000200:	e1bffe17 	ldw	r6,-8(fp)
 c000204:	e17fff17 	ldw	r5,-4(fp)
 c000208:	1809883a 	mov	r4,r3
 c00020c:	103ee83a 	callr	r2
 c000210:	00000206 	br	c00021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 c000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 c000218:	0005883a 	mov	r2,zero
}
 c00021c:	e037883a 	mov	sp,fp
 c000220:	dfc00117 	ldw	ra,4(sp)
 c000224:	df000017 	ldw	fp,0(sp)
 c000228:	dec00204 	addi	sp,sp,8
 c00022c:	f800283a 	ret

Disassembly of section .text:

0c000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 c000230:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 c000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 c000238:	06830074 	movhi	gp,3073
    ori gp, gp, %lo(_gp)
 c00023c:	d6a0b514 	ori	gp,gp,33492
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 c000240:	00830074 	movhi	r2,3073
    ori r2, r2, %lo(__bss_start)
 c000244:	10883a14 	ori	r2,r2,8424

    movhi r3, %hi(__bss_end)
 c000248:	00c30074 	movhi	r3,3073
    ori r3, r3, %lo(__bss_end)
 c00024c:	18c89214 	ori	r3,r3,8776

    beq r2, r3, 1f
 c000250:	10c00326 	beq	r2,r3,c000260 <_start+0x30>

0:
    stw zero, (r2)
 c000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 c000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 c00025c:	10fffd36 	bltu	r2,r3,c000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 c000260:	c00bea40 	call	c00bea4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 c000264:	c00bf280 	call	c00bf28 <alt_main>

0c000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 c000268:	003fff06 	br	c000268 <__alt_data_end+0xfc000268>

0c00026c <main>:
int main() {
 c00026c:	defffe04 	addi	sp,sp,-8
 c000270:	dfc00115 	stw	ra,4(sp)
 c000274:	df000015 	stw	fp,0(sp)
 c000278:	d839883a 	mov	fp,sp
	while (1) {
		paletteTest();
 c00027c:	c0002880 	call	c000288 <paletteTest>
		textVGAColorScreenSaver();
 c000280:	c0007680 	call	c000768 <textVGAColorScreenSaver>
	}
 c000284:	003ffd06 	br	c00027c <__alt_data_end+0xfc00027c>

0c000288 <paletteTest>:

#include "text_mode_vga_color.h"


void paletteTest()
{
 c000288:	defffa04 	addi	sp,sp,-24
 c00028c:	dfc00515 	stw	ra,20(sp)
 c000290:	df000415 	stw	fp,16(sp)
 c000294:	dc400315 	stw	r17,12(sp)
 c000298:	dc000215 	stw	r16,8(sp)
 c00029c:	df000404 	addi	fp,sp,16
	textVGAColorClr();
 c0002a0:	c00043c0 	call	c00043c <textVGAColorClr>
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);
 c0002a4:	00800044 	movi	r2,1
 c0002a8:	d8800015 	stw	r2,0(sp)
 c0002ac:	000f883a 	mov	r7,zero
 c0002b0:	000d883a 	mov	r6,zero
 c0002b4:	000b883a 	mov	r5,zero
 c0002b8:	01030074 	movhi	r4,3073
 c0002bc:	21387e04 	addi	r4,r4,-7688
 c0002c0:	c0004c80 	call	c0004c8 <textVGADrawColorText>

	for (int i = 0; i < 100; i ++)
 c0002c4:	e03ffd15 	stw	zero,-12(fp)
 c0002c8:	00005106 	br	c000410 <paletteTest+0x188>
	{
		usleep (20000);
 c0002cc:	01138804 	movi	r4,20000
 c0002d0:	c00c09c0 	call	c00c09c <usleep>
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
 c0002d4:	c000bc80 	call	c000bc8 <rand>
 c0002d8:	1007883a 	mov	r3,r2
 c0002dc:	00a00034 	movhi	r2,32768
 c0002e0:	108003c4 	addi	r2,r2,15
 c0002e4:	1884703a 	and	r2,r3,r2
 c0002e8:	1000040e 	bge	r2,zero,c0002fc <paletteTest+0x74>
 c0002ec:	10bfffc4 	addi	r2,r2,-1
 c0002f0:	00fffc04 	movi	r3,-16
 c0002f4:	10c4b03a 	or	r2,r2,r3
 c0002f8:	10800044 	addi	r2,r2,1
 c0002fc:	14003fcc 	andi	r16,r2,255
 c000300:	c000bc80 	call	c000bc8 <rand>
 c000304:	1007883a 	mov	r3,r2
 c000308:	00a00034 	movhi	r2,32768
 c00030c:	108003c4 	addi	r2,r2,15
 c000310:	1884703a 	and	r2,r3,r2
 c000314:	1000040e 	bge	r2,zero,c000328 <paletteTest+0xa0>
 c000318:	10bfffc4 	addi	r2,r2,-1
 c00031c:	00fffc04 	movi	r3,-16
 c000320:	10c4b03a 	or	r2,r2,r3
 c000324:	10800044 	addi	r2,r2,1
 c000328:	14403fcc 	andi	r17,r2,255
 c00032c:	c000bc80 	call	c000bc8 <rand>
 c000330:	1007883a 	mov	r3,r2
 c000334:	00a00034 	movhi	r2,32768
 c000338:	108003c4 	addi	r2,r2,15
 c00033c:	1884703a 	and	r2,r3,r2
 c000340:	1000040e 	bge	r2,zero,c000354 <paletteTest+0xcc>
 c000344:	10bfffc4 	addi	r2,r2,-1
 c000348:	00fffc04 	movi	r3,-16
 c00034c:	10c4b03a 	or	r2,r2,r3
 c000350:	10800044 	addi	r2,r2,1
 c000354:	10803fcc 	andi	r2,r2,255
 c000358:	100f883a 	mov	r7,r2
 c00035c:	880d883a 	mov	r6,r17
 c000360:	800b883a 	mov	r5,r16
 c000364:	0009883a 	mov	r4,zero
 c000368:	c0005d80 	call	c0005d8 <setColorPalette>
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
 c00036c:	c000bc80 	call	c000bc8 <rand>
 c000370:	1007883a 	mov	r3,r2
 c000374:	00a00034 	movhi	r2,32768
 c000378:	108003c4 	addi	r2,r2,15
 c00037c:	1884703a 	and	r2,r3,r2
 c000380:	1000040e 	bge	r2,zero,c000394 <paletteTest+0x10c>
 c000384:	10bfffc4 	addi	r2,r2,-1
 c000388:	00fffc04 	movi	r3,-16
 c00038c:	10c4b03a 	or	r2,r2,r3
 c000390:	10800044 	addi	r2,r2,1
 c000394:	14003fcc 	andi	r16,r2,255
 c000398:	c000bc80 	call	c000bc8 <rand>
 c00039c:	1007883a 	mov	r3,r2
 c0003a0:	00a00034 	movhi	r2,32768
 c0003a4:	108003c4 	addi	r2,r2,15
 c0003a8:	1884703a 	and	r2,r3,r2
 c0003ac:	1000040e 	bge	r2,zero,c0003c0 <paletteTest+0x138>
 c0003b0:	10bfffc4 	addi	r2,r2,-1
 c0003b4:	00fffc04 	movi	r3,-16
 c0003b8:	10c4b03a 	or	r2,r2,r3
 c0003bc:	10800044 	addi	r2,r2,1
 c0003c0:	14403fcc 	andi	r17,r2,255
 c0003c4:	c000bc80 	call	c000bc8 <rand>
 c0003c8:	1007883a 	mov	r3,r2
 c0003cc:	00a00034 	movhi	r2,32768
 c0003d0:	108003c4 	addi	r2,r2,15
 c0003d4:	1884703a 	and	r2,r3,r2
 c0003d8:	1000040e 	bge	r2,zero,c0003ec <paletteTest+0x164>
 c0003dc:	10bfffc4 	addi	r2,r2,-1
 c0003e0:	00fffc04 	movi	r3,-16
 c0003e4:	10c4b03a 	or	r2,r2,r3
 c0003e8:	10800044 	addi	r2,r2,1
 c0003ec:	10803fcc 	andi	r2,r2,255
 c0003f0:	100f883a 	mov	r7,r2
 c0003f4:	880d883a 	mov	r6,r17
 c0003f8:	800b883a 	mov	r5,r16
 c0003fc:	01000044 	movi	r4,1
 c000400:	c0005d80 	call	c0005d8 <setColorPalette>
void paletteTest()
{
	textVGAColorClr();
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);

	for (int i = 0; i < 100; i ++)
 c000404:	e0bffd17 	ldw	r2,-12(fp)
 c000408:	10800044 	addi	r2,r2,1
 c00040c:	e0bffd15 	stw	r2,-12(fp)
 c000410:	e0bffd17 	ldw	r2,-12(fp)
 c000414:	10801910 	cmplti	r2,r2,100
 c000418:	103fac1e 	bne	r2,zero,c0002cc <__alt_data_end+0xfc0002cc>
		usleep (20000);
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
	}

}
 c00041c:	0001883a 	nop
 c000420:	e6fffe04 	addi	sp,fp,-8
 c000424:	dfc00317 	ldw	ra,12(sp)
 c000428:	df000217 	ldw	fp,8(sp)
 c00042c:	dc400117 	ldw	r17,4(sp)
 c000430:	dc000017 	ldw	r16,0(sp)
 c000434:	dec00404 	addi	sp,sp,16
 c000438:	f800283a 	ret

0c00043c <textVGAColorClr>:
#include <alt_types.h>
#include "text_mode_vga_color.h"


void textVGAColorClr()
{
 c00043c:	defffd04 	addi	sp,sp,-12
 c000440:	df000215 	stw	fp,8(sp)
 c000444:	df000204 	addi	fp,sp,8
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 c000448:	e03ffe15 	stw	zero,-8(fp)
 c00044c:	00000706 	br	c00046c <textVGAColorClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
 c000450:	d0e00117 	ldw	r3,-32764(gp)
 c000454:	e0bffe17 	ldw	r2,-8(fp)
 c000458:	1885883a 	add	r2,r3,r2
 c00045c:	10000005 	stb	zero,0(r2)
#include "text_mode_vga_color.h"


void textVGAColorClr()
{
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 c000460:	e0bffe17 	ldw	r2,-8(fp)
 c000464:	10800044 	addi	r2,r2,1
 c000468:	e0bffe15 	stw	r2,-8(fp)
 c00046c:	e0bffe17 	ldw	r2,-8(fp)
 c000470:	1084b010 	cmplti	r2,r2,4800
 c000474:	103ff61e 	bne	r2,zero,c000450 <__alt_data_end+0xfc000450>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
	for(int i = 0; i < 8; i++){
 c000478:	e03fff15 	stw	zero,-4(fp)
 c00047c:	00000a06 	br	c0004a8 <textVGAColorClr+0x6c>
		vga_ctrl->PALETTE[i] = 0x0000;
 c000480:	d0e00117 	ldw	r3,-32764(gp)
 c000484:	e0bfff17 	ldw	r2,-4(fp)
 c000488:	1081ff84 	addi	r2,r2,2046
 c00048c:	1085883a 	add	r2,r2,r2
 c000490:	1085883a 	add	r2,r2,r2
 c000494:	1885883a 	add	r2,r3,r2
 c000498:	10000015 	stw	zero,0(r2)
{
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
	for(int i = 0; i < 8; i++){
 c00049c:	e0bfff17 	ldw	r2,-4(fp)
 c0004a0:	10800044 	addi	r2,r2,1
 c0004a4:	e0bfff15 	stw	r2,-4(fp)
 c0004a8:	e0bfff17 	ldw	r2,-4(fp)
 c0004ac:	10800210 	cmplti	r2,r2,8
 c0004b0:	103ff31e 	bne	r2,zero,c000480 <__alt_data_end+0xfc000480>
		vga_ctrl->PALETTE[i] = 0x0000;
	}
}
 c0004b4:	0001883a 	nop
 c0004b8:	e037883a 	mov	sp,fp
 c0004bc:	df000017 	ldw	fp,0(sp)
 c0004c0:	dec00104 	addi	sp,sp,4
 c0004c4:	f800283a 	ret

0c0004c8 <textVGADrawColorText>:

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
 c0004c8:	defff704 	addi	sp,sp,-36
 c0004cc:	dfc00815 	stw	ra,32(sp)
 c0004d0:	df000715 	stw	fp,28(sp)
 c0004d4:	dc000615 	stw	r16,24(sp)
 c0004d8:	df000704 	addi	fp,sp,28
 c0004dc:	e13ffa15 	stw	r4,-24(fp)
 c0004e0:	e17ffb15 	stw	r5,-20(fp)
 c0004e4:	e1bffc15 	stw	r6,-16(fp)
 c0004e8:	3807883a 	mov	r3,r7
 c0004ec:	e0800217 	ldw	r2,8(fp)
 c0004f0:	e0fffd05 	stb	r3,-12(fp)
 c0004f4:	e0bffe05 	stb	r2,-8(fp)
	int i = 0;
 c0004f8:	e03ff915 	stw	zero,-28(fp)
	while (str[i]!=0)
 c0004fc:	00002706 	br	c00059c <textVGADrawColorText+0xd4>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
 c000500:	d4200117 	ldw	r16,-32764(gp)
 c000504:	01401404 	movi	r5,80
 c000508:	e13ffc17 	ldw	r4,-16(fp)
 c00050c:	c000b880 	call	c000b88 <__mulsi3>
 c000510:	1007883a 	mov	r3,r2
 c000514:	e0bffb17 	ldw	r2,-20(fp)
 c000518:	1887883a 	add	r3,r3,r2
 c00051c:	e0bff917 	ldw	r2,-28(fp)
 c000520:	1885883a 	add	r2,r3,r2
 c000524:	1085883a 	add	r2,r2,r2
 c000528:	1009883a 	mov	r4,r2
 c00052c:	e0bffe03 	ldbu	r2,-8(fp)
 c000530:	1004913a 	slli	r2,r2,4
 c000534:	1007883a 	mov	r3,r2
 c000538:	e0bffd03 	ldbu	r2,-12(fp)
 c00053c:	1884b03a 	or	r2,r3,r2
 c000540:	1007883a 	mov	r3,r2
 c000544:	8105883a 	add	r2,r16,r4
 c000548:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
 c00054c:	d4200117 	ldw	r16,-32764(gp)
 c000550:	01401404 	movi	r5,80
 c000554:	e13ffc17 	ldw	r4,-16(fp)
 c000558:	c000b880 	call	c000b88 <__mulsi3>
 c00055c:	1007883a 	mov	r3,r2
 c000560:	e0bffb17 	ldw	r2,-20(fp)
 c000564:	1887883a 	add	r3,r3,r2
 c000568:	e0bff917 	ldw	r2,-28(fp)
 c00056c:	1885883a 	add	r2,r3,r2
 c000570:	1085883a 	add	r2,r2,r2
 c000574:	10800044 	addi	r2,r2,1
 c000578:	e0fff917 	ldw	r3,-28(fp)
 c00057c:	e13ffa17 	ldw	r4,-24(fp)
 c000580:	20c7883a 	add	r3,r4,r3
 c000584:	18c00003 	ldbu	r3,0(r3)
 c000588:	8085883a 	add	r2,r16,r2
 c00058c:	10c00005 	stb	r3,0(r2)
		i++;
 c000590:	e0bff917 	ldw	r2,-28(fp)
 c000594:	10800044 	addi	r2,r2,1
 c000598:	e0bff915 	stw	r2,-28(fp)
}

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
	int i = 0;
	while (str[i]!=0)
 c00059c:	e0bff917 	ldw	r2,-28(fp)
 c0005a0:	e0fffa17 	ldw	r3,-24(fp)
 c0005a4:	1885883a 	add	r2,r3,r2
 c0005a8:	10800003 	ldbu	r2,0(r2)
 c0005ac:	10803fcc 	andi	r2,r2,255
 c0005b0:	1080201c 	xori	r2,r2,128
 c0005b4:	10bfe004 	addi	r2,r2,-128
 c0005b8:	103fd11e 	bne	r2,zero,c000500 <__alt_data_end+0xfc000500>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
		i++;
	}
}
 c0005bc:	0001883a 	nop
 c0005c0:	e6ffff04 	addi	sp,fp,-4
 c0005c4:	dfc00217 	ldw	ra,8(sp)
 c0005c8:	df000117 	ldw	fp,4(sp)
 c0005cc:	dc000017 	ldw	r16,0(sp)
 c0005d0:	dec00304 	addi	sp,sp,12
 c0005d4:	f800283a 	ret

0c0005d8 <setColorPalette>:

void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
 c0005d8:	defff604 	addi	sp,sp,-40
 c0005dc:	df000915 	stw	fp,36(sp)
 c0005e0:	df000904 	addi	fp,sp,36
 c0005e4:	2011883a 	mov	r8,r4
 c0005e8:	2809883a 	mov	r4,r5
 c0005ec:	3007883a 	mov	r3,r6
 c0005f0:	3805883a 	mov	r2,r7
 c0005f4:	e23ffc05 	stb	r8,-16(fp)
 c0005f8:	e13ffd05 	stb	r4,-12(fp)
 c0005fc:	e0fffe05 	stb	r3,-8(fp)
 c000600:	e0bfff05 	stb	r2,-4(fp)
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)
	alt_u32 currData = vga_ctrl->PALETTE[color/2];
 c000604:	d0e00117 	ldw	r3,-32764(gp)
 c000608:	e0bffc03 	ldbu	r2,-16(fp)
 c00060c:	1004d07a 	srli	r2,r2,1
 c000610:	10803fcc 	andi	r2,r2,255
 c000614:	1081ff84 	addi	r2,r2,2046
 c000618:	1085883a 	add	r2,r2,r2
 c00061c:	1085883a 	add	r2,r2,r2
 c000620:	1885883a 	add	r2,r3,r2
 c000624:	10800017 	ldw	r2,0(r2)
 c000628:	e0bff715 	stw	r2,-36(fp)
	alt_u8 mask = 0x0f;	// to keep ls 4bits of rgb, clears ms 4bits of rgb
 c00062c:	008003c4 	movi	r2,15
 c000630:	e0bff805 	stb	r2,-32(fp)
	alt_u8 newRed = mask & red;
 c000634:	e0fff803 	ldbu	r3,-32(fp)
 c000638:	e0bffd03 	ldbu	r2,-12(fp)
 c00063c:	1884703a 	and	r2,r3,r2
 c000640:	e0bff845 	stb	r2,-31(fp)
	alt_u8 newGreen = (mask & green) << 4;// green 0000
 c000644:	e0fff803 	ldbu	r3,-32(fp)
 c000648:	e0bffe03 	ldbu	r2,-8(fp)
 c00064c:	1884703a 	and	r2,r3,r2
 c000650:	1004913a 	slli	r2,r2,4
 c000654:	e0bff885 	stb	r2,-30(fp)
	alt_u8 newBlue = mask & blue;
 c000658:	e0fff803 	ldbu	r3,-32(fp)
 c00065c:	e0bfff03 	ldbu	r2,-4(fp)
 c000660:	1884703a 	and	r2,r3,r2
 c000664:	e0bff8c5 	stb	r2,-29(fp)
	alt_u16 myCol = newRed << 8; // shift left by 8: 0000 red 0000 0000
 c000668:	e0bff843 	ldbu	r2,-31(fp)
 c00066c:	1004923a 	slli	r2,r2,8
 c000670:	e0bff90d 	sth	r2,-28(fp)
	myCol = myCol | newGreen | newBlue; // combo of rgb is in bottom 12 bits of 16 : 0000 red green blue
 c000674:	e0fff883 	ldbu	r3,-30(fp)
 c000678:	e0bff90b 	ldhu	r2,-28(fp)
 c00067c:	1884b03a 	or	r2,r3,r2
 c000680:	1007883a 	mov	r3,r2
 c000684:	e0bff8c3 	ldbu	r2,-29(fp)
 c000688:	1884b03a 	or	r2,r3,r2
 c00068c:	e0bff90d 	sth	r2,-28(fp)
	
	alt_u32 lowerMask = 0xFFFFE000; //for when writing to lower bits
 c000690:	00b80004 	movi	r2,-8192
 c000694:	e0bffa15 	stw	r2,-24(fp)
	alt_u32 upperMask = 0x00001FFF; //for writing to upper bits
 c000698:	0087ffc4 	movi	r2,8191
 c00069c:	e0bffb15 	stw	r2,-20(fp)
	if(color % 2 == 0) {	//even color
 c0006a0:	e0bffc03 	ldbu	r2,-16(fp)
 c0006a4:	1080004c 	andi	r2,r2,1
 c0006a8:	10803fcc 	andi	r2,r2,255
 c0006ac:	1000151e 	bne	r2,zero,c000704 <setColorPalette+0x12c>
		currData = currData & lowerMask;
 c0006b0:	e0fff717 	ldw	r3,-36(fp)
 c0006b4:	e0bffa17 	ldw	r2,-24(fp)
 c0006b8:	1884703a 	and	r2,r3,r2
 c0006bc:	e0bff715 	stw	r2,-36(fp)
		currData = currData | (myCol << 1); 
 c0006c0:	e0bff90b 	ldhu	r2,-28(fp)
 c0006c4:	1085883a 	add	r2,r2,r2
 c0006c8:	1007883a 	mov	r3,r2
 c0006cc:	e0bff717 	ldw	r2,-36(fp)
 c0006d0:	10c4b03a 	or	r2,r2,r3
 c0006d4:	e0bff715 	stw	r2,-36(fp)
		vga_ctrl -> PALETTE[color/2] = currData; 
 c0006d8:	d0e00117 	ldw	r3,-32764(gp)
 c0006dc:	e0bffc03 	ldbu	r2,-16(fp)
 c0006e0:	1004d07a 	srli	r2,r2,1
 c0006e4:	10803fcc 	andi	r2,r2,255
 c0006e8:	1081ff84 	addi	r2,r2,2046
 c0006ec:	1085883a 	add	r2,r2,r2
 c0006f0:	1085883a 	add	r2,r2,r2
 c0006f4:	1885883a 	add	r2,r3,r2
 c0006f8:	e0fff717 	ldw	r3,-36(fp)
 c0006fc:	10c00015 	stw	r3,0(r2)
		currData = currData & upperMask;
		currData = currData | (myCol << 13); 
		vga_ctrl -> PALETTE[color/2] = currData;
	}
	
}
 c000700:	00001406 	br	c000754 <setColorPalette+0x17c>
		currData = currData & lowerMask;
		currData = currData | (myCol << 1); 
		vga_ctrl -> PALETTE[color/2] = currData; 
	}
	else {				//odd color
		currData = currData & upperMask;
 c000704:	e0fff717 	ldw	r3,-36(fp)
 c000708:	e0bffb17 	ldw	r2,-20(fp)
 c00070c:	1884703a 	and	r2,r3,r2
 c000710:	e0bff715 	stw	r2,-36(fp)
		currData = currData | (myCol << 13); 
 c000714:	e0bff90b 	ldhu	r2,-28(fp)
 c000718:	1004937a 	slli	r2,r2,13
 c00071c:	1007883a 	mov	r3,r2
 c000720:	e0bff717 	ldw	r2,-36(fp)
 c000724:	10c4b03a 	or	r2,r2,r3
 c000728:	e0bff715 	stw	r2,-36(fp)
		vga_ctrl -> PALETTE[color/2] = currData;
 c00072c:	d0e00117 	ldw	r3,-32764(gp)
 c000730:	e0bffc03 	ldbu	r2,-16(fp)
 c000734:	1004d07a 	srli	r2,r2,1
 c000738:	10803fcc 	andi	r2,r2,255
 c00073c:	1081ff84 	addi	r2,r2,2046
 c000740:	1085883a 	add	r2,r2,r2
 c000744:	1085883a 	add	r2,r2,r2
 c000748:	1885883a 	add	r2,r3,r2
 c00074c:	e0fff717 	ldw	r3,-36(fp)
 c000750:	10c00015 	stw	r3,0(r2)
	}
	
}
 c000754:	0001883a 	nop
 c000758:	e037883a 	mov	sp,fp
 c00075c:	df000017 	ldw	fp,0(sp)
 c000760:	dec00104 	addi	sp,sp,4
 c000764:	f800283a 	ret

0c000768 <textVGAColorScreenSaver>:


void textVGAColorScreenSaver()
{
 c000768:	deffe004 	addi	sp,sp,-128
 c00076c:	dfc01f15 	stw	ra,124(sp)
 c000770:	df001e15 	stw	fp,120(sp)
 c000774:	dcc01d15 	stw	r19,116(sp)
 c000778:	dc801c15 	stw	r18,112(sp)
 c00077c:	dc401b15 	stw	r17,108(sp)
 c000780:	dc001a15 	stw	r16,104(sp)
 c000784:	df001e04 	addi	fp,sp,120
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
 c000788:	c00043c0 	call	c00043c <textVGAColorClr>
	//initialize palette
	for (int i = 0; i < 16; i++)
 c00078c:	e03fe515 	stw	zero,-108(fp)
 c000790:	00002806 	br	c000834 <textVGAColorScreenSaver+0xcc>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
 c000794:	e0bfe517 	ldw	r2,-108(fp)
 c000798:	14403fcc 	andi	r17,r2,255
 c00079c:	04030074 	movhi	r16,3073
 c0007a0:	8439ae04 	addi	r16,r16,-6472
 c0007a4:	e0bfe517 	ldw	r2,-108(fp)
 c0007a8:	014005c4 	movi	r5,23
 c0007ac:	1009883a 	mov	r4,r2
 c0007b0:	c000b880 	call	c000b88 <__mulsi3>
 c0007b4:	8085883a 	add	r2,r16,r2
 c0007b8:	10800504 	addi	r2,r2,20
 c0007bc:	10800003 	ldbu	r2,0(r2)
 c0007c0:	14803fcc 	andi	r18,r2,255
 c0007c4:	04030074 	movhi	r16,3073
 c0007c8:	8439ae04 	addi	r16,r16,-6472
 c0007cc:	e0bfe517 	ldw	r2,-108(fp)
 c0007d0:	014005c4 	movi	r5,23
 c0007d4:	1009883a 	mov	r4,r2
 c0007d8:	c000b880 	call	c000b88 <__mulsi3>
 c0007dc:	8085883a 	add	r2,r16,r2
 c0007e0:	10800544 	addi	r2,r2,21
 c0007e4:	10800003 	ldbu	r2,0(r2)
 c0007e8:	14c03fcc 	andi	r19,r2,255
 c0007ec:	04030074 	movhi	r16,3073
 c0007f0:	8439ae04 	addi	r16,r16,-6472
 c0007f4:	e0bfe517 	ldw	r2,-108(fp)
 c0007f8:	014005c4 	movi	r5,23
 c0007fc:	1009883a 	mov	r4,r2
 c000800:	c000b880 	call	c000b88 <__mulsi3>
 c000804:	8085883a 	add	r2,r16,r2
 c000808:	10800584 	addi	r2,r2,22
 c00080c:	10800003 	ldbu	r2,0(r2)
 c000810:	10803fcc 	andi	r2,r2,255
 c000814:	100f883a 	mov	r7,r2
 c000818:	980d883a 	mov	r6,r19
 c00081c:	900b883a 	mov	r5,r18
 c000820:	8809883a 	mov	r4,r17
 c000824:	c0005d80 	call	c0005d8 <setColorPalette>
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
 c000828:	e0bfe517 	ldw	r2,-108(fp)
 c00082c:	10800044 	addi	r2,r2,1
 c000830:	e0bfe515 	stw	r2,-108(fp)
 c000834:	e0bfe517 	ldw	r2,-108(fp)
 c000838:	10800410 	cmplti	r2,r2,16
 c00083c:	103fd51e 	bne	r2,zero,c000794 <__alt_data_end+0xfc000794>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	while (1)
	{
		fg = rand() % 16;
 c000840:	c000bc80 	call	c000bc8 <rand>
 c000844:	1007883a 	mov	r3,r2
 c000848:	00a00034 	movhi	r2,32768
 c00084c:	108003c4 	addi	r2,r2,15
 c000850:	1884703a 	and	r2,r3,r2
 c000854:	1000040e 	bge	r2,zero,c000868 <textVGAColorScreenSaver+0x100>
 c000858:	10bfffc4 	addi	r2,r2,-1
 c00085c:	00fffc04 	movi	r3,-16
 c000860:	10c4b03a 	or	r2,r2,r3
 c000864:	10800044 	addi	r2,r2,1
 c000868:	e0bfe315 	stw	r2,-116(fp)
		bg = rand() % 16;
 c00086c:	c000bc80 	call	c000bc8 <rand>
 c000870:	1007883a 	mov	r3,r2
 c000874:	00a00034 	movhi	r2,32768
 c000878:	108003c4 	addi	r2,r2,15
 c00087c:	1884703a 	and	r2,r3,r2
 c000880:	1000040e 	bge	r2,zero,c000894 <textVGAColorScreenSaver+0x12c>
 c000884:	10bfffc4 	addi	r2,r2,-1
 c000888:	00fffc04 	movi	r3,-16
 c00088c:	10c4b03a 	or	r2,r2,r3
 c000890:	10800044 	addi	r2,r2,1
 c000894:	e0bfe415 	stw	r2,-112(fp)
		while (fg == bg)
 c000898:	00001606 	br	c0008f4 <textVGAColorScreenSaver+0x18c>
		{
			fg = rand() % 16;
 c00089c:	c000bc80 	call	c000bc8 <rand>
 c0008a0:	1007883a 	mov	r3,r2
 c0008a4:	00a00034 	movhi	r2,32768
 c0008a8:	108003c4 	addi	r2,r2,15
 c0008ac:	1884703a 	and	r2,r3,r2
 c0008b0:	1000040e 	bge	r2,zero,c0008c4 <textVGAColorScreenSaver+0x15c>
 c0008b4:	10bfffc4 	addi	r2,r2,-1
 c0008b8:	00fffc04 	movi	r3,-16
 c0008bc:	10c4b03a 	or	r2,r2,r3
 c0008c0:	10800044 	addi	r2,r2,1
 c0008c4:	e0bfe315 	stw	r2,-116(fp)
			bg = rand() % 16;
 c0008c8:	c000bc80 	call	c000bc8 <rand>
 c0008cc:	1007883a 	mov	r3,r2
 c0008d0:	00a00034 	movhi	r2,32768
 c0008d4:	108003c4 	addi	r2,r2,15
 c0008d8:	1884703a 	and	r2,r3,r2
 c0008dc:	1000040e 	bge	r2,zero,c0008f0 <textVGAColorScreenSaver+0x188>
 c0008e0:	10bfffc4 	addi	r2,r2,-1
 c0008e4:	00fffc04 	movi	r3,-16
 c0008e8:	10c4b03a 	or	r2,r2,r3
 c0008ec:	10800044 	addi	r2,r2,1
 c0008f0:	e0bfe415 	stw	r2,-112(fp)
	}
	while (1)
	{
		fg = rand() % 16;
		bg = rand() % 16;
		while (fg == bg)
 c0008f4:	e0ffe317 	ldw	r3,-116(fp)
 c0008f8:	e0bfe417 	ldw	r2,-112(fp)
 c0008fc:	18bfe726 	beq	r3,r2,c00089c <__alt_data_end+0xfc00089c>
		{
			fg = rand() % 16;
			bg = rand() % 16;
		}
		sprintf(color_string, "Drawing %s text with %s background", colors[fg].name, colors[bg].name);
 c000900:	014005c4 	movi	r5,23
 c000904:	e13fe317 	ldw	r4,-116(fp)
 c000908:	c000b880 	call	c000b88 <__mulsi3>
 c00090c:	1007883a 	mov	r3,r2
 c000910:	00830074 	movhi	r2,3073
 c000914:	10b9ae04 	addi	r2,r2,-6472
 c000918:	18a1883a 	add	r16,r3,r2
 c00091c:	014005c4 	movi	r5,23
 c000920:	e13fe417 	ldw	r4,-112(fp)
 c000924:	c000b880 	call	c000b88 <__mulsi3>
 c000928:	1007883a 	mov	r3,r2
 c00092c:	00830074 	movhi	r2,3073
 c000930:	10b9ae04 	addi	r2,r2,-6472
 c000934:	1887883a 	add	r3,r3,r2
 c000938:	e0bfe804 	addi	r2,fp,-96
 c00093c:	180f883a 	mov	r7,r3
 c000940:	800d883a 	mov	r6,r16
 c000944:	01430074 	movhi	r5,3073
 c000948:	29788a04 	addi	r5,r5,-7640
 c00094c:	1009883a 	mov	r4,r2
 c000950:	c000c840 	call	c000c84 <sprintf>
		x = rand() % (80-strlen(color_string));
 c000954:	c000bc80 	call	c000bc8 <rand>
 c000958:	1021883a 	mov	r16,r2
 c00095c:	e0bfe804 	addi	r2,fp,-96
 c000960:	1009883a 	mov	r4,r2
 c000964:	c000cf00 	call	c000cf0 <strlen>
 c000968:	1007883a 	mov	r3,r2
 c00096c:	00801404 	movi	r2,80
 c000970:	10c5c83a 	sub	r2,r2,r3
 c000974:	100b883a 	mov	r5,r2
 c000978:	8009883a 	mov	r4,r16
 c00097c:	c000b300 	call	c000b30 <__umodsi3>
 c000980:	e0bfe615 	stw	r2,-104(fp)
		y = rand() % 30;
 c000984:	c000bc80 	call	c000bc8 <rand>
 c000988:	01400784 	movi	r5,30
 c00098c:	1009883a 	mov	r4,r2
 c000990:	c000a580 	call	c000a58 <__modsi3>
 c000994:	e0bfe715 	stw	r2,-100(fp)
		textVGADrawColorText (color_string, x, y, bg, fg);
 c000998:	e0bfe417 	ldw	r2,-112(fp)
 c00099c:	11003fcc 	andi	r4,r2,255
 c0009a0:	e0bfe317 	ldw	r2,-116(fp)
 c0009a4:	10803fcc 	andi	r2,r2,255
 c0009a8:	e0ffe804 	addi	r3,fp,-96
 c0009ac:	d8800015 	stw	r2,0(sp)
 c0009b0:	200f883a 	mov	r7,r4
 c0009b4:	e1bfe717 	ldw	r6,-100(fp)
 c0009b8:	e17fe617 	ldw	r5,-104(fp)
 c0009bc:	1809883a 	mov	r4,r3
 c0009c0:	c0004c80 	call	c0004c8 <textVGADrawColorText>
		usleep (100000);
 c0009c4:	010000b4 	movhi	r4,2
 c0009c8:	2121a804 	addi	r4,r4,-31072
 c0009cc:	c00c09c0 	call	c00c09c <usleep>
	}
 c0009d0:	003f9b06 	br	c000840 <__alt_data_end+0xfc000840>

0c0009d4 <__divsi3>:
 c0009d4:	20001b16 	blt	r4,zero,c000a44 <__divsi3+0x70>
 c0009d8:	000f883a 	mov	r7,zero
 c0009dc:	28001616 	blt	r5,zero,c000a38 <__divsi3+0x64>
 c0009e0:	200d883a 	mov	r6,r4
 c0009e4:	29001a2e 	bgeu	r5,r4,c000a50 <__divsi3+0x7c>
 c0009e8:	00800804 	movi	r2,32
 c0009ec:	00c00044 	movi	r3,1
 c0009f0:	00000106 	br	c0009f8 <__divsi3+0x24>
 c0009f4:	10000d26 	beq	r2,zero,c000a2c <__divsi3+0x58>
 c0009f8:	294b883a 	add	r5,r5,r5
 c0009fc:	10bfffc4 	addi	r2,r2,-1
 c000a00:	18c7883a 	add	r3,r3,r3
 c000a04:	293ffb36 	bltu	r5,r4,c0009f4 <__alt_data_end+0xfc0009f4>
 c000a08:	0005883a 	mov	r2,zero
 c000a0c:	18000726 	beq	r3,zero,c000a2c <__divsi3+0x58>
 c000a10:	0005883a 	mov	r2,zero
 c000a14:	31400236 	bltu	r6,r5,c000a20 <__divsi3+0x4c>
 c000a18:	314dc83a 	sub	r6,r6,r5
 c000a1c:	10c4b03a 	or	r2,r2,r3
 c000a20:	1806d07a 	srli	r3,r3,1
 c000a24:	280ad07a 	srli	r5,r5,1
 c000a28:	183ffa1e 	bne	r3,zero,c000a14 <__alt_data_end+0xfc000a14>
 c000a2c:	38000126 	beq	r7,zero,c000a34 <__divsi3+0x60>
 c000a30:	0085c83a 	sub	r2,zero,r2
 c000a34:	f800283a 	ret
 c000a38:	014bc83a 	sub	r5,zero,r5
 c000a3c:	39c0005c 	xori	r7,r7,1
 c000a40:	003fe706 	br	c0009e0 <__alt_data_end+0xfc0009e0>
 c000a44:	0109c83a 	sub	r4,zero,r4
 c000a48:	01c00044 	movi	r7,1
 c000a4c:	003fe306 	br	c0009dc <__alt_data_end+0xfc0009dc>
 c000a50:	00c00044 	movi	r3,1
 c000a54:	003fee06 	br	c000a10 <__alt_data_end+0xfc000a10>

0c000a58 <__modsi3>:
 c000a58:	20001716 	blt	r4,zero,c000ab8 <__modsi3+0x60>
 c000a5c:	000f883a 	mov	r7,zero
 c000a60:	2005883a 	mov	r2,r4
 c000a64:	28001216 	blt	r5,zero,c000ab0 <__modsi3+0x58>
 c000a68:	2900162e 	bgeu	r5,r4,c000ac4 <__modsi3+0x6c>
 c000a6c:	01800804 	movi	r6,32
 c000a70:	00c00044 	movi	r3,1
 c000a74:	00000106 	br	c000a7c <__modsi3+0x24>
 c000a78:	30000a26 	beq	r6,zero,c000aa4 <__modsi3+0x4c>
 c000a7c:	294b883a 	add	r5,r5,r5
 c000a80:	31bfffc4 	addi	r6,r6,-1
 c000a84:	18c7883a 	add	r3,r3,r3
 c000a88:	293ffb36 	bltu	r5,r4,c000a78 <__alt_data_end+0xfc000a78>
 c000a8c:	18000526 	beq	r3,zero,c000aa4 <__modsi3+0x4c>
 c000a90:	1806d07a 	srli	r3,r3,1
 c000a94:	11400136 	bltu	r2,r5,c000a9c <__modsi3+0x44>
 c000a98:	1145c83a 	sub	r2,r2,r5
 c000a9c:	280ad07a 	srli	r5,r5,1
 c000aa0:	183ffb1e 	bne	r3,zero,c000a90 <__alt_data_end+0xfc000a90>
 c000aa4:	38000126 	beq	r7,zero,c000aac <__modsi3+0x54>
 c000aa8:	0085c83a 	sub	r2,zero,r2
 c000aac:	f800283a 	ret
 c000ab0:	014bc83a 	sub	r5,zero,r5
 c000ab4:	003fec06 	br	c000a68 <__alt_data_end+0xfc000a68>
 c000ab8:	0109c83a 	sub	r4,zero,r4
 c000abc:	01c00044 	movi	r7,1
 c000ac0:	003fe706 	br	c000a60 <__alt_data_end+0xfc000a60>
 c000ac4:	00c00044 	movi	r3,1
 c000ac8:	003ff106 	br	c000a90 <__alt_data_end+0xfc000a90>

0c000acc <__udivsi3>:
 c000acc:	200d883a 	mov	r6,r4
 c000ad0:	2900152e 	bgeu	r5,r4,c000b28 <__udivsi3+0x5c>
 c000ad4:	28001416 	blt	r5,zero,c000b28 <__udivsi3+0x5c>
 c000ad8:	00800804 	movi	r2,32
 c000adc:	00c00044 	movi	r3,1
 c000ae0:	00000206 	br	c000aec <__udivsi3+0x20>
 c000ae4:	10000e26 	beq	r2,zero,c000b20 <__udivsi3+0x54>
 c000ae8:	28000516 	blt	r5,zero,c000b00 <__udivsi3+0x34>
 c000aec:	294b883a 	add	r5,r5,r5
 c000af0:	10bfffc4 	addi	r2,r2,-1
 c000af4:	18c7883a 	add	r3,r3,r3
 c000af8:	293ffa36 	bltu	r5,r4,c000ae4 <__alt_data_end+0xfc000ae4>
 c000afc:	18000826 	beq	r3,zero,c000b20 <__udivsi3+0x54>
 c000b00:	0005883a 	mov	r2,zero
 c000b04:	31400236 	bltu	r6,r5,c000b10 <__udivsi3+0x44>
 c000b08:	314dc83a 	sub	r6,r6,r5
 c000b0c:	10c4b03a 	or	r2,r2,r3
 c000b10:	1806d07a 	srli	r3,r3,1
 c000b14:	280ad07a 	srli	r5,r5,1
 c000b18:	183ffa1e 	bne	r3,zero,c000b04 <__alt_data_end+0xfc000b04>
 c000b1c:	f800283a 	ret
 c000b20:	0005883a 	mov	r2,zero
 c000b24:	f800283a 	ret
 c000b28:	00c00044 	movi	r3,1
 c000b2c:	003ff406 	br	c000b00 <__alt_data_end+0xfc000b00>

0c000b30 <__umodsi3>:
 c000b30:	2005883a 	mov	r2,r4
 c000b34:	2900122e 	bgeu	r5,r4,c000b80 <__umodsi3+0x50>
 c000b38:	28001116 	blt	r5,zero,c000b80 <__umodsi3+0x50>
 c000b3c:	01800804 	movi	r6,32
 c000b40:	00c00044 	movi	r3,1
 c000b44:	00000206 	br	c000b50 <__umodsi3+0x20>
 c000b48:	30000c26 	beq	r6,zero,c000b7c <__umodsi3+0x4c>
 c000b4c:	28000516 	blt	r5,zero,c000b64 <__umodsi3+0x34>
 c000b50:	294b883a 	add	r5,r5,r5
 c000b54:	31bfffc4 	addi	r6,r6,-1
 c000b58:	18c7883a 	add	r3,r3,r3
 c000b5c:	293ffa36 	bltu	r5,r4,c000b48 <__alt_data_end+0xfc000b48>
 c000b60:	18000626 	beq	r3,zero,c000b7c <__umodsi3+0x4c>
 c000b64:	1806d07a 	srli	r3,r3,1
 c000b68:	11400136 	bltu	r2,r5,c000b70 <__umodsi3+0x40>
 c000b6c:	1145c83a 	sub	r2,r2,r5
 c000b70:	280ad07a 	srli	r5,r5,1
 c000b74:	183ffb1e 	bne	r3,zero,c000b64 <__alt_data_end+0xfc000b64>
 c000b78:	f800283a 	ret
 c000b7c:	f800283a 	ret
 c000b80:	00c00044 	movi	r3,1
 c000b84:	003ff706 	br	c000b64 <__alt_data_end+0xfc000b64>

0c000b88 <__mulsi3>:
 c000b88:	0005883a 	mov	r2,zero
 c000b8c:	20000726 	beq	r4,zero,c000bac <__mulsi3+0x24>
 c000b90:	20c0004c 	andi	r3,r4,1
 c000b94:	2008d07a 	srli	r4,r4,1
 c000b98:	18000126 	beq	r3,zero,c000ba0 <__mulsi3+0x18>
 c000b9c:	1145883a 	add	r2,r2,r5
 c000ba0:	294b883a 	add	r5,r5,r5
 c000ba4:	203ffa1e 	bne	r4,zero,c000b90 <__alt_data_end+0xfc000b90>
 c000ba8:	f800283a 	ret
 c000bac:	f800283a 	ret

0c000bb0 <srand>:
 c000bb0:	00830074 	movhi	r2,3073
 c000bb4:	1080b804 	addi	r2,r2,736
 c000bb8:	10800017 	ldw	r2,0(r2)
 c000bbc:	11002915 	stw	r4,164(r2)
 c000bc0:	10002a15 	stw	zero,168(r2)
 c000bc4:	f800283a 	ret

0c000bc8 <rand>:
 c000bc8:	00830074 	movhi	r2,3073
 c000bcc:	defffe04 	addi	sp,sp,-8
 c000bd0:	1080b804 	addi	r2,r2,736
 c000bd4:	dc000015 	stw	r16,0(sp)
 c000bd8:	14000017 	ldw	r16,0(r2)
 c000bdc:	dfc00115 	stw	ra,4(sp)
 c000be0:	01932574 	movhi	r6,19605
 c000be4:	81002917 	ldw	r4,164(r16)
 c000be8:	81402a17 	ldw	r5,168(r16)
 c000bec:	01d614b4 	movhi	r7,22610
 c000bf0:	319fcb44 	addi	r6,r6,32557
 c000bf4:	39fd0b44 	addi	r7,r7,-3027
 c000bf8:	c0088cc0 	call	c0088cc <__muldi3>
 c000bfc:	11000044 	addi	r4,r2,1
 c000c00:	2085803a 	cmpltu	r2,r4,r2
 c000c04:	10c7883a 	add	r3,r2,r3
 c000c08:	00a00034 	movhi	r2,32768
 c000c0c:	10bfffc4 	addi	r2,r2,-1
 c000c10:	1884703a 	and	r2,r3,r2
 c000c14:	81002915 	stw	r4,164(r16)
 c000c18:	80c02a15 	stw	r3,168(r16)
 c000c1c:	dfc00117 	ldw	ra,4(sp)
 c000c20:	dc000017 	ldw	r16,0(sp)
 c000c24:	dec00204 	addi	sp,sp,8
 c000c28:	f800283a 	ret

0c000c2c <_sprintf_r>:
 c000c2c:	deffe404 	addi	sp,sp,-112
 c000c30:	2807883a 	mov	r3,r5
 c000c34:	dfc01a15 	stw	ra,104(sp)
 c000c38:	d9c01b15 	stw	r7,108(sp)
 c000c3c:	00a00034 	movhi	r2,32768
 c000c40:	10bfffc4 	addi	r2,r2,-1
 c000c44:	02008204 	movi	r8,520
 c000c48:	d8800215 	stw	r2,8(sp)
 c000c4c:	d8800515 	stw	r2,20(sp)
 c000c50:	d9c01b04 	addi	r7,sp,108
 c000c54:	d80b883a 	mov	r5,sp
 c000c58:	00bfffc4 	movi	r2,-1
 c000c5c:	d8c00015 	stw	r3,0(sp)
 c000c60:	d8c00415 	stw	r3,16(sp)
 c000c64:	da00030d 	sth	r8,12(sp)
 c000c68:	d880038d 	sth	r2,14(sp)
 c000c6c:	c000d880 	call	c000d88 <___svfprintf_internal_r>
 c000c70:	d8c00017 	ldw	r3,0(sp)
 c000c74:	18000005 	stb	zero,0(r3)
 c000c78:	dfc01a17 	ldw	ra,104(sp)
 c000c7c:	dec01c04 	addi	sp,sp,112
 c000c80:	f800283a 	ret

0c000c84 <sprintf>:
 c000c84:	deffe304 	addi	sp,sp,-116
 c000c88:	2007883a 	mov	r3,r4
 c000c8c:	dfc01a15 	stw	ra,104(sp)
 c000c90:	d9801b15 	stw	r6,108(sp)
 c000c94:	d9c01c15 	stw	r7,112(sp)
 c000c98:	01030074 	movhi	r4,3073
 c000c9c:	2100b804 	addi	r4,r4,736
 c000ca0:	21000017 	ldw	r4,0(r4)
 c000ca4:	00a00034 	movhi	r2,32768
 c000ca8:	10bfffc4 	addi	r2,r2,-1
 c000cac:	280d883a 	mov	r6,r5
 c000cb0:	02008204 	movi	r8,520
 c000cb4:	d8800215 	stw	r2,8(sp)
 c000cb8:	d8800515 	stw	r2,20(sp)
 c000cbc:	d9c01b04 	addi	r7,sp,108
 c000cc0:	d80b883a 	mov	r5,sp
 c000cc4:	00bfffc4 	movi	r2,-1
 c000cc8:	d8c00015 	stw	r3,0(sp)
 c000ccc:	d8c00415 	stw	r3,16(sp)
 c000cd0:	da00030d 	sth	r8,12(sp)
 c000cd4:	d880038d 	sth	r2,14(sp)
 c000cd8:	c000d880 	call	c000d88 <___svfprintf_internal_r>
 c000cdc:	d8c00017 	ldw	r3,0(sp)
 c000ce0:	18000005 	stb	zero,0(r3)
 c000ce4:	dfc01a17 	ldw	ra,104(sp)
 c000ce8:	dec01d04 	addi	sp,sp,116
 c000cec:	f800283a 	ret

0c000cf0 <strlen>:
 c000cf0:	208000cc 	andi	r2,r4,3
 c000cf4:	10002026 	beq	r2,zero,c000d78 <strlen+0x88>
 c000cf8:	20800007 	ldb	r2,0(r4)
 c000cfc:	10002026 	beq	r2,zero,c000d80 <strlen+0x90>
 c000d00:	2005883a 	mov	r2,r4
 c000d04:	00000206 	br	c000d10 <strlen+0x20>
 c000d08:	10c00007 	ldb	r3,0(r2)
 c000d0c:	18001826 	beq	r3,zero,c000d70 <strlen+0x80>
 c000d10:	10800044 	addi	r2,r2,1
 c000d14:	10c000cc 	andi	r3,r2,3
 c000d18:	183ffb1e 	bne	r3,zero,c000d08 <__alt_data_end+0xfc000d08>
 c000d1c:	10c00017 	ldw	r3,0(r2)
 c000d20:	01ffbff4 	movhi	r7,65279
 c000d24:	39ffbfc4 	addi	r7,r7,-257
 c000d28:	00ca303a 	nor	r5,zero,r3
 c000d2c:	01a02074 	movhi	r6,32897
 c000d30:	19c7883a 	add	r3,r3,r7
 c000d34:	31a02004 	addi	r6,r6,-32640
 c000d38:	1946703a 	and	r3,r3,r5
 c000d3c:	1986703a 	and	r3,r3,r6
 c000d40:	1800091e 	bne	r3,zero,c000d68 <strlen+0x78>
 c000d44:	10800104 	addi	r2,r2,4
 c000d48:	10c00017 	ldw	r3,0(r2)
 c000d4c:	19cb883a 	add	r5,r3,r7
 c000d50:	00c6303a 	nor	r3,zero,r3
 c000d54:	28c6703a 	and	r3,r5,r3
 c000d58:	1986703a 	and	r3,r3,r6
 c000d5c:	183ff926 	beq	r3,zero,c000d44 <__alt_data_end+0xfc000d44>
 c000d60:	00000106 	br	c000d68 <strlen+0x78>
 c000d64:	10800044 	addi	r2,r2,1
 c000d68:	10c00007 	ldb	r3,0(r2)
 c000d6c:	183ffd1e 	bne	r3,zero,c000d64 <__alt_data_end+0xfc000d64>
 c000d70:	1105c83a 	sub	r2,r2,r4
 c000d74:	f800283a 	ret
 c000d78:	2005883a 	mov	r2,r4
 c000d7c:	003fe706 	br	c000d1c <__alt_data_end+0xfc000d1c>
 c000d80:	0005883a 	mov	r2,zero
 c000d84:	f800283a 	ret

0c000d88 <___svfprintf_internal_r>:
 c000d88:	deffb704 	addi	sp,sp,-292
 c000d8c:	dfc04815 	stw	ra,288(sp)
 c000d90:	ddc04615 	stw	r23,280(sp)
 c000d94:	d9402d15 	stw	r5,180(sp)
 c000d98:	d9003915 	stw	r4,228(sp)
 c000d9c:	302f883a 	mov	r23,r6
 c000da0:	d9c02e15 	stw	r7,184(sp)
 c000da4:	df004715 	stw	fp,284(sp)
 c000da8:	dd804515 	stw	r22,276(sp)
 c000dac:	dd404415 	stw	r21,272(sp)
 c000db0:	dd004315 	stw	r20,268(sp)
 c000db4:	dcc04215 	stw	r19,264(sp)
 c000db8:	dc804115 	stw	r18,260(sp)
 c000dbc:	dc404015 	stw	r17,256(sp)
 c000dc0:	dc003f15 	stw	r16,252(sp)
 c000dc4:	c0049a00 	call	c0049a0 <_localeconv_r>
 c000dc8:	10800017 	ldw	r2,0(r2)
 c000dcc:	1009883a 	mov	r4,r2
 c000dd0:	d8803415 	stw	r2,208(sp)
 c000dd4:	c000cf00 	call	c000cf0 <strlen>
 c000dd8:	d8c02d17 	ldw	r3,180(sp)
 c000ddc:	d8803815 	stw	r2,224(sp)
 c000de0:	1880030b 	ldhu	r2,12(r3)
 c000de4:	1080200c 	andi	r2,r2,128
 c000de8:	10000226 	beq	r2,zero,c000df4 <___svfprintf_internal_r+0x6c>
 c000dec:	18800417 	ldw	r2,16(r3)
 c000df0:	1006b126 	beq	r2,zero,c0028b8 <___svfprintf_internal_r+0x1b30>
 c000df4:	dcc03917 	ldw	r19,228(sp)
 c000df8:	d8c00404 	addi	r3,sp,16
 c000dfc:	05430074 	movhi	r21,3073
 c000e00:	d9001e04 	addi	r4,sp,120
 c000e04:	ad78a384 	addi	r21,r21,-7538
 c000e08:	d8c01e15 	stw	r3,120(sp)
 c000e0c:	d8002015 	stw	zero,128(sp)
 c000e10:	d8001f15 	stw	zero,124(sp)
 c000e14:	d8003315 	stw	zero,204(sp)
 c000e18:	d8003615 	stw	zero,216(sp)
 c000e1c:	d8003715 	stw	zero,220(sp)
 c000e20:	1811883a 	mov	r8,r3
 c000e24:	d8003a15 	stw	zero,232(sp)
 c000e28:	d8003b15 	stw	zero,236(sp)
 c000e2c:	d8002f15 	stw	zero,188(sp)
 c000e30:	d9002815 	stw	r4,160(sp)
 c000e34:	b8800007 	ldb	r2,0(r23)
 c000e38:	10027726 	beq	r2,zero,c001818 <___svfprintf_internal_r+0xa90>
 c000e3c:	00c00944 	movi	r3,37
 c000e40:	b823883a 	mov	r17,r23
 c000e44:	10c0021e 	bne	r2,r3,c000e50 <___svfprintf_internal_r+0xc8>
 c000e48:	00001406 	br	c000e9c <___svfprintf_internal_r+0x114>
 c000e4c:	10c00326 	beq	r2,r3,c000e5c <___svfprintf_internal_r+0xd4>
 c000e50:	8c400044 	addi	r17,r17,1
 c000e54:	88800007 	ldb	r2,0(r17)
 c000e58:	103ffc1e 	bne	r2,zero,c000e4c <__alt_data_end+0xfc000e4c>
 c000e5c:	8de1c83a 	sub	r16,r17,r23
 c000e60:	80000e26 	beq	r16,zero,c000e9c <___svfprintf_internal_r+0x114>
 c000e64:	d8c02017 	ldw	r3,128(sp)
 c000e68:	d8801f17 	ldw	r2,124(sp)
 c000e6c:	45c00015 	stw	r23,0(r8)
 c000e70:	1c07883a 	add	r3,r3,r16
 c000e74:	10800044 	addi	r2,r2,1
 c000e78:	d8c02015 	stw	r3,128(sp)
 c000e7c:	44000115 	stw	r16,4(r8)
 c000e80:	d8801f15 	stw	r2,124(sp)
 c000e84:	00c001c4 	movi	r3,7
 c000e88:	18809916 	blt	r3,r2,c0010f0 <___svfprintf_internal_r+0x368>
 c000e8c:	42000204 	addi	r8,r8,8
 c000e90:	d9402f17 	ldw	r5,188(sp)
 c000e94:	2c0b883a 	add	r5,r5,r16
 c000e98:	d9402f15 	stw	r5,188(sp)
 c000e9c:	88800007 	ldb	r2,0(r17)
 c000ea0:	10009a26 	beq	r2,zero,c00110c <___svfprintf_internal_r+0x384>
 c000ea4:	8dc00044 	addi	r23,r17,1
 c000ea8:	8c400047 	ldb	r17,1(r17)
 c000eac:	0021883a 	mov	r16,zero
 c000eb0:	00bfffc4 	movi	r2,-1
 c000eb4:	0025883a 	mov	r18,zero
 c000eb8:	dc002905 	stb	r16,164(sp)
 c000ebc:	d8002785 	stb	zero,158(sp)
 c000ec0:	d8002b05 	stb	zero,172(sp)
 c000ec4:	d8802a15 	stw	r2,168(sp)
 c000ec8:	d8003115 	stw	zero,196(sp)
 c000ecc:	05001604 	movi	r20,88
 c000ed0:	05800244 	movi	r22,9
 c000ed4:	4039883a 	mov	fp,r8
 c000ed8:	9021883a 	mov	r16,r18
 c000edc:	bdc00044 	addi	r23,r23,1
 c000ee0:	88bff804 	addi	r2,r17,-32
 c000ee4:	a0831e36 	bltu	r20,r2,c001b60 <___svfprintf_internal_r+0xdd8>
 c000ee8:	100490ba 	slli	r2,r2,2
 c000eec:	00c30034 	movhi	r3,3072
 c000ef0:	18c3c004 	addi	r3,r3,3840
 c000ef4:	10c5883a 	add	r2,r2,r3
 c000ef8:	10800017 	ldw	r2,0(r2)
 c000efc:	1000683a 	jmp	r2
 c000f00:	0c001aa8 	cmpgeui	r16,at,106
 c000f04:	0c001b60 	cmpeqi	r16,at,109
 c000f08:	0c001b60 	cmpeqi	r16,at,109
 c000f0c:	0c001a9c 	xori	r16,at,106
 c000f10:	0c001b60 	cmpeqi	r16,at,109
 c000f14:	0c001b60 	cmpeqi	r16,at,109
 c000f18:	0c001b60 	cmpeqi	r16,at,109
 c000f1c:	0c001b60 	cmpeqi	r16,at,109
 c000f20:	0c001b60 	cmpeqi	r16,at,109
 c000f24:	0c001b60 	cmpeqi	r16,at,109
 c000f28:	0c001168 	cmpgeui	r16,at,69
 c000f2c:	0c0019ac 	andhi	r16,at,102
 c000f30:	0c001b60 	cmpeqi	r16,at,109
 c000f34:	0c001074 	orhi	r16,at,65
 c000f38:	0c00118c 	andi	r16,at,70
 c000f3c:	0c001b60 	cmpeqi	r16,at,109
 c000f40:	0c001218 	cmpnei	r16,at,72
 c000f44:	0c0011dc 	xori	r16,at,71
 c000f48:	0c0011dc 	xori	r16,at,71
 c000f4c:	0c0011dc 	xori	r16,at,71
 c000f50:	0c0011dc 	xori	r16,at,71
 c000f54:	0c0011dc 	xori	r16,at,71
 c000f58:	0c0011dc 	xori	r16,at,71
 c000f5c:	0c0011dc 	xori	r16,at,71
 c000f60:	0c0011dc 	xori	r16,at,71
 c000f64:	0c0011dc 	xori	r16,at,71
 c000f68:	0c001b60 	cmpeqi	r16,at,109
 c000f6c:	0c001b60 	cmpeqi	r16,at,109
 c000f70:	0c001b60 	cmpeqi	r16,at,109
 c000f74:	0c001b60 	cmpeqi	r16,at,109
 c000f78:	0c001b60 	cmpeqi	r16,at,109
 c000f7c:	0c001b60 	cmpeqi	r16,at,109
 c000f80:	0c001b60 	cmpeqi	r16,at,109
 c000f84:	0c001b60 	cmpeqi	r16,at,109
 c000f88:	0c001b60 	cmpeqi	r16,at,109
 c000f8c:	0c001b60 	cmpeqi	r16,at,109
 c000f90:	0c0012dc 	xori	r16,at,75
 c000f94:	0c001224 	muli	r16,at,72
 c000f98:	0c001b60 	cmpeqi	r16,at,109
 c000f9c:	0c001224 	muli	r16,at,72
 c000fa0:	0c001b60 	cmpeqi	r16,at,109
 c000fa4:	0c001b60 	cmpeqi	r16,at,109
 c000fa8:	0c001b60 	cmpeqi	r16,at,109
 c000fac:	0c001b60 	cmpeqi	r16,at,109
 c000fb0:	0c0012d0 	cmplti	r16,at,75
 c000fb4:	0c001b60 	cmpeqi	r16,at,109
 c000fb8:	0c001b60 	cmpeqi	r16,at,109
 c000fbc:	0c0013a4 	muli	r16,at,78
 c000fc0:	0c001b60 	cmpeqi	r16,at,109
 c000fc4:	0c001b60 	cmpeqi	r16,at,109
 c000fc8:	0c001b60 	cmpeqi	r16,at,109
 c000fcc:	0c001b60 	cmpeqi	r16,at,109
 c000fd0:	0c001b60 	cmpeqi	r16,at,109
 c000fd4:	0c001820 	cmpeqi	r16,at,96
 c000fd8:	0c001b60 	cmpeqi	r16,at,109
 c000fdc:	0c001b60 	cmpeqi	r16,at,109
 c000fe0:	0c00188c 	andi	r16,at,98
 c000fe4:	0c001b60 	cmpeqi	r16,at,109
 c000fe8:	0c001b60 	cmpeqi	r16,at,109
 c000fec:	0c001b60 	cmpeqi	r16,at,109
 c000ff0:	0c001b60 	cmpeqi	r16,at,109
 c000ff4:	0c001b60 	cmpeqi	r16,at,109
 c000ff8:	0c001b60 	cmpeqi	r16,at,109
 c000ffc:	0c001b60 	cmpeqi	r16,at,109
 c001000:	0c001b60 	cmpeqi	r16,at,109
 c001004:	0c001b60 	cmpeqi	r16,at,109
 c001008:	0c001b60 	cmpeqi	r16,at,109
 c00100c:	0c001948 	cmpgei	r16,at,101
 c001010:	0c001ac8 	cmpgei	r16,at,107
 c001014:	0c001224 	muli	r16,at,72
 c001018:	0c001224 	muli	r16,at,72
 c00101c:	0c001224 	muli	r16,at,72
 c001020:	0c001b3c 	xorhi	r16,at,108
 c001024:	0c001ac8 	cmpgei	r16,at,107
 c001028:	0c001b60 	cmpeqi	r16,at,109
 c00102c:	0c001b60 	cmpeqi	r16,at,109
 c001030:	0c001ae8 	cmpgeui	r16,at,107
 c001034:	0c001b60 	cmpeqi	r16,at,109
 c001038:	0c001afc 	xorhi	r16,at,107
 c00103c:	0c00198c 	andi	r16,at,102
 c001040:	0c001080 	call	c00108 <__alt_mem_onchip_memory2_0+0xc00108>
 c001044:	0c0019c4 	addi	r16,at,103
 c001048:	0c001b60 	cmpeqi	r16,at,109
 c00104c:	0c0019d0 	cmplti	r16,at,103
 c001050:	0c001b60 	cmpeqi	r16,at,109
 c001054:	0c001a34 	orhi	r16,at,104
 c001058:	0c001b60 	cmpeqi	r16,at,109
 c00105c:	0c001b60 	cmpeqi	r16,at,109
 c001060:	0c001a54 	ori	r16,at,105
 c001064:	d8c03117 	ldw	r3,196(sp)
 c001068:	d8802e15 	stw	r2,184(sp)
 c00106c:	00c7c83a 	sub	r3,zero,r3
 c001070:	d8c03115 	stw	r3,196(sp)
 c001074:	84000114 	ori	r16,r16,4
 c001078:	bc400007 	ldb	r17,0(r23)
 c00107c:	003f9706 	br	c000edc <__alt_data_end+0xfc000edc>
 c001080:	00800c04 	movi	r2,48
 c001084:	d8802705 	stb	r2,156(sp)
 c001088:	00801e04 	movi	r2,120
 c00108c:	d8802745 	stb	r2,157(sp)
 c001090:	d9002a17 	ldw	r4,168(sp)
 c001094:	d8802e17 	ldw	r2,184(sp)
 c001098:	d8002785 	stb	zero,158(sp)
 c00109c:	e011883a 	mov	r8,fp
 c0010a0:	10c00104 	addi	r3,r2,4
 c0010a4:	15000017 	ldw	r20,0(r2)
 c0010a8:	002d883a 	mov	r22,zero
 c0010ac:	80800094 	ori	r2,r16,2
 c0010b0:	2002b616 	blt	r4,zero,c001b8c <___svfprintf_internal_r+0xe04>
 c0010b4:	00bfdfc4 	movi	r2,-129
 c0010b8:	80a4703a 	and	r18,r16,r2
 c0010bc:	d8c02e15 	stw	r3,184(sp)
 c0010c0:	94800094 	ori	r18,r18,2
 c0010c4:	a002a01e 	bne	r20,zero,c001b48 <___svfprintf_internal_r+0xdc0>
 c0010c8:	01430074 	movhi	r5,3073
 c0010cc:	29789c04 	addi	r5,r5,-7568
 c0010d0:	d9403a15 	stw	r5,232(sp)
 c0010d4:	04401e04 	movi	r17,120
 c0010d8:	d8c02a17 	ldw	r3,168(sp)
 c0010dc:	0039883a 	mov	fp,zero
 c0010e0:	1801e626 	beq	r3,zero,c00187c <___svfprintf_internal_r+0xaf4>
 c0010e4:	0029883a 	mov	r20,zero
 c0010e8:	002d883a 	mov	r22,zero
 c0010ec:	00020506 	br	c001904 <___svfprintf_internal_r+0xb7c>
 c0010f0:	d9402d17 	ldw	r5,180(sp)
 c0010f4:	d9801e04 	addi	r6,sp,120
 c0010f8:	9809883a 	mov	r4,r19
 c0010fc:	c0066640 	call	c006664 <__ssprint_r>
 c001100:	1000081e 	bne	r2,zero,c001124 <___svfprintf_internal_r+0x39c>
 c001104:	da000404 	addi	r8,sp,16
 c001108:	003f6106 	br	c000e90 <__alt_data_end+0xfc000e90>
 c00110c:	d8802017 	ldw	r2,128(sp)
 c001110:	10000426 	beq	r2,zero,c001124 <___svfprintf_internal_r+0x39c>
 c001114:	d9402d17 	ldw	r5,180(sp)
 c001118:	d9003917 	ldw	r4,228(sp)
 c00111c:	d9801e04 	addi	r6,sp,120
 c001120:	c0066640 	call	c006664 <__ssprint_r>
 c001124:	d8802d17 	ldw	r2,180(sp)
 c001128:	10c0030b 	ldhu	r3,12(r2)
 c00112c:	d8802f17 	ldw	r2,188(sp)
 c001130:	18c0100c 	andi	r3,r3,64
 c001134:	1806251e 	bne	r3,zero,c0029cc <___svfprintf_internal_r+0x1c44>
 c001138:	dfc04817 	ldw	ra,288(sp)
 c00113c:	df004717 	ldw	fp,284(sp)
 c001140:	ddc04617 	ldw	r23,280(sp)
 c001144:	dd804517 	ldw	r22,276(sp)
 c001148:	dd404417 	ldw	r21,272(sp)
 c00114c:	dd004317 	ldw	r20,268(sp)
 c001150:	dcc04217 	ldw	r19,264(sp)
 c001154:	dc804117 	ldw	r18,260(sp)
 c001158:	dc404017 	ldw	r17,256(sp)
 c00115c:	dc003f17 	ldw	r16,252(sp)
 c001160:	dec04904 	addi	sp,sp,292
 c001164:	f800283a 	ret
 c001168:	d9002e17 	ldw	r4,184(sp)
 c00116c:	d9402e17 	ldw	r5,184(sp)
 c001170:	21000017 	ldw	r4,0(r4)
 c001174:	28800104 	addi	r2,r5,4
 c001178:	d9003115 	stw	r4,196(sp)
 c00117c:	203fb916 	blt	r4,zero,c001064 <__alt_data_end+0xfc001064>
 c001180:	d8802e15 	stw	r2,184(sp)
 c001184:	bc400007 	ldb	r17,0(r23)
 c001188:	003f5406 	br	c000edc <__alt_data_end+0xfc000edc>
 c00118c:	bc400007 	ldb	r17,0(r23)
 c001190:	01000a84 	movi	r4,42
 c001194:	b8c00044 	addi	r3,r23,1
 c001198:	89076926 	beq	r17,r4,c002f40 <___svfprintf_internal_r+0x21b8>
 c00119c:	8cbff404 	addi	r18,r17,-48
 c0011a0:	b486b936 	bltu	r22,r18,c002c88 <___svfprintf_internal_r+0x1f00>
 c0011a4:	0009883a 	mov	r4,zero
 c0011a8:	1823883a 	mov	r17,r3
 c0011ac:	01400284 	movi	r5,10
 c0011b0:	c000b880 	call	c000b88 <__mulsi3>
 c0011b4:	88c00007 	ldb	r3,0(r17)
 c0011b8:	1489883a 	add	r4,r2,r18
 c0011bc:	8dc00044 	addi	r23,r17,1
 c0011c0:	1cbff404 	addi	r18,r3,-48
 c0011c4:	b823883a 	mov	r17,r23
 c0011c8:	b4bff82e 	bgeu	r22,r18,c0011ac <__alt_data_end+0xfc0011ac>
 c0011cc:	1823883a 	mov	r17,r3
 c0011d0:	20060416 	blt	r4,zero,c0029e4 <___svfprintf_internal_r+0x1c5c>
 c0011d4:	d9002a15 	stw	r4,168(sp)
 c0011d8:	003f4106 	br	c000ee0 <__alt_data_end+0xfc000ee0>
 c0011dc:	8cbff404 	addi	r18,r17,-48
 c0011e0:	d8003115 	stw	zero,196(sp)
 c0011e4:	0009883a 	mov	r4,zero
 c0011e8:	b823883a 	mov	r17,r23
 c0011ec:	01400284 	movi	r5,10
 c0011f0:	c000b880 	call	c000b88 <__mulsi3>
 c0011f4:	88c00007 	ldb	r3,0(r17)
 c0011f8:	9089883a 	add	r4,r18,r2
 c0011fc:	bdc00044 	addi	r23,r23,1
 c001200:	1cbff404 	addi	r18,r3,-48
 c001204:	b823883a 	mov	r17,r23
 c001208:	b4bff82e 	bgeu	r22,r18,c0011ec <__alt_data_end+0xfc0011ec>
 c00120c:	1823883a 	mov	r17,r3
 c001210:	d9003115 	stw	r4,196(sp)
 c001214:	003f3206 	br	c000ee0 <__alt_data_end+0xfc000ee0>
 c001218:	84002014 	ori	r16,r16,128
 c00121c:	bc400007 	ldb	r17,0(r23)
 c001220:	003f2e06 	br	c000edc <__alt_data_end+0xfc000edc>
 c001224:	8025883a 	mov	r18,r16
 c001228:	dc002903 	ldbu	r16,164(sp)
 c00122c:	e011883a 	mov	r8,fp
 c001230:	84003fcc 	andi	r16,r16,255
 c001234:	8007721e 	bne	r16,zero,c003000 <___svfprintf_internal_r+0x2278>
 c001238:	9080020c 	andi	r2,r18,8
 c00123c:	1004a526 	beq	r2,zero,c0024d4 <___svfprintf_internal_r+0x174c>
 c001240:	d9002e17 	ldw	r4,184(sp)
 c001244:	d9402e17 	ldw	r5,184(sp)
 c001248:	d8802e17 	ldw	r2,184(sp)
 c00124c:	21000017 	ldw	r4,0(r4)
 c001250:	29400117 	ldw	r5,4(r5)
 c001254:	10800204 	addi	r2,r2,8
 c001258:	d9003615 	stw	r4,216(sp)
 c00125c:	d9403715 	stw	r5,220(sp)
 c001260:	d8802e15 	stw	r2,184(sp)
 c001264:	d9003617 	ldw	r4,216(sp)
 c001268:	d9403717 	ldw	r5,220(sp)
 c00126c:	da003e15 	stw	r8,248(sp)
 c001270:	04000044 	movi	r16,1
 c001274:	c0064c00 	call	c0064c0 <__fpclassifyd>
 c001278:	da003e17 	ldw	r8,248(sp)
 c00127c:	1404731e 	bne	r2,r16,c00244c <___svfprintf_internal_r+0x16c4>
 c001280:	d9003617 	ldw	r4,216(sp)
 c001284:	d9403717 	ldw	r5,220(sp)
 c001288:	000d883a 	mov	r6,zero
 c00128c:	000f883a 	mov	r7,zero
 c001290:	c00a9780 	call	c00a978 <__ledf2>
 c001294:	da003e17 	ldw	r8,248(sp)
 c001298:	10061b16 	blt	r2,zero,c002b08 <___svfprintf_internal_r+0x1d80>
 c00129c:	df002783 	ldbu	fp,158(sp)
 c0012a0:	008011c4 	movi	r2,71
 c0012a4:	1445810e 	bge	r2,r17,c0028ac <___svfprintf_internal_r+0x1b24>
 c0012a8:	04030074 	movhi	r16,3073
 c0012ac:	84389404 	addi	r16,r16,-7600
 c0012b0:	00c000c4 	movi	r3,3
 c0012b4:	00bfdfc4 	movi	r2,-129
 c0012b8:	d8c02915 	stw	r3,164(sp)
 c0012bc:	90a4703a 	and	r18,r18,r2
 c0012c0:	d8c02b15 	stw	r3,172(sp)
 c0012c4:	d8002a15 	stw	zero,168(sp)
 c0012c8:	d8003215 	stw	zero,200(sp)
 c0012cc:	00006c06 	br	c001480 <___svfprintf_internal_r+0x6f8>
 c0012d0:	84000214 	ori	r16,r16,8
 c0012d4:	bc400007 	ldb	r17,0(r23)
 c0012d8:	003f0006 	br	c000edc <__alt_data_end+0xfc000edc>
 c0012dc:	8025883a 	mov	r18,r16
 c0012e0:	dc002903 	ldbu	r16,164(sp)
 c0012e4:	e011883a 	mov	r8,fp
 c0012e8:	84003fcc 	andi	r16,r16,255
 c0012ec:	80073f1e 	bne	r16,zero,c002fec <___svfprintf_internal_r+0x2264>
 c0012f0:	94800414 	ori	r18,r18,16
 c0012f4:	9080080c 	andi	r2,r18,32
 c0012f8:	1003bb26 	beq	r2,zero,c0021e8 <___svfprintf_internal_r+0x1460>
 c0012fc:	d9002e17 	ldw	r4,184(sp)
 c001300:	20800117 	ldw	r2,4(r4)
 c001304:	25000017 	ldw	r20,0(r4)
 c001308:	21000204 	addi	r4,r4,8
 c00130c:	d9002e15 	stw	r4,184(sp)
 c001310:	102d883a 	mov	r22,r2
 c001314:	1003bd16 	blt	r2,zero,c00220c <___svfprintf_internal_r+0x1484>
 c001318:	d9002a17 	ldw	r4,168(sp)
 c00131c:	df002783 	ldbu	fp,158(sp)
 c001320:	2003d016 	blt	r4,zero,c002264 <___svfprintf_internal_r+0x14dc>
 c001324:	00ffdfc4 	movi	r3,-129
 c001328:	a584b03a 	or	r2,r20,r22
 c00132c:	90e4703a 	and	r18,r18,r3
 c001330:	10015026 	beq	r2,zero,c001874 <___svfprintf_internal_r+0xaec>
 c001334:	b0037026 	beq	r22,zero,c0020f8 <___svfprintf_internal_r+0x1370>
 c001338:	dc402915 	stw	r17,164(sp)
 c00133c:	dc001e04 	addi	r16,sp,120
 c001340:	b023883a 	mov	r17,r22
 c001344:	402d883a 	mov	r22,r8
 c001348:	a009883a 	mov	r4,r20
 c00134c:	880b883a 	mov	r5,r17
 c001350:	01800284 	movi	r6,10
 c001354:	000f883a 	mov	r7,zero
 c001358:	c008fd40 	call	c008fd4 <__umoddi3>
 c00135c:	10800c04 	addi	r2,r2,48
 c001360:	843fffc4 	addi	r16,r16,-1
 c001364:	a009883a 	mov	r4,r20
 c001368:	880b883a 	mov	r5,r17
 c00136c:	80800005 	stb	r2,0(r16)
 c001370:	01800284 	movi	r6,10
 c001374:	000f883a 	mov	r7,zero
 c001378:	c0089d80 	call	c0089d8 <__udivdi3>
 c00137c:	1029883a 	mov	r20,r2
 c001380:	10c4b03a 	or	r2,r2,r3
 c001384:	1823883a 	mov	r17,r3
 c001388:	103fef1e 	bne	r2,zero,c001348 <__alt_data_end+0xfc001348>
 c00138c:	d8c02817 	ldw	r3,160(sp)
 c001390:	dc402917 	ldw	r17,164(sp)
 c001394:	b011883a 	mov	r8,r22
 c001398:	1c07c83a 	sub	r3,r3,r16
 c00139c:	d8c02b15 	stw	r3,172(sp)
 c0013a0:	00003106 	br	c001468 <___svfprintf_internal_r+0x6e0>
 c0013a4:	8025883a 	mov	r18,r16
 c0013a8:	dc002903 	ldbu	r16,164(sp)
 c0013ac:	e011883a 	mov	r8,fp
 c0013b0:	84003fcc 	andi	r16,r16,255
 c0013b4:	80070a1e 	bne	r16,zero,c002fe0 <___svfprintf_internal_r+0x2258>
 c0013b8:	94800414 	ori	r18,r18,16
 c0013bc:	9080080c 	andi	r2,r18,32
 c0013c0:	1002f626 	beq	r2,zero,c001f9c <___svfprintf_internal_r+0x1214>
 c0013c4:	d9002e17 	ldw	r4,184(sp)
 c0013c8:	d9402a17 	ldw	r5,168(sp)
 c0013cc:	d8002785 	stb	zero,158(sp)
 c0013d0:	20800204 	addi	r2,r4,8
 c0013d4:	25000017 	ldw	r20,0(r4)
 c0013d8:	25800117 	ldw	r22,4(r4)
 c0013dc:	28043716 	blt	r5,zero,c0024bc <___svfprintf_internal_r+0x1734>
 c0013e0:	013fdfc4 	movi	r4,-129
 c0013e4:	a586b03a 	or	r3,r20,r22
 c0013e8:	d8802e15 	stw	r2,184(sp)
 c0013ec:	9124703a 	and	r18,r18,r4
 c0013f0:	1802f71e 	bne	r3,zero,c001fd0 <___svfprintf_internal_r+0x1248>
 c0013f4:	d9402a17 	ldw	r5,168(sp)
 c0013f8:	0039883a 	mov	fp,zero
 c0013fc:	2806df26 	beq	r5,zero,c002f7c <___svfprintf_internal_r+0x21f4>
 c001400:	0029883a 	mov	r20,zero
 c001404:	002d883a 	mov	r22,zero
 c001408:	dc001e04 	addi	r16,sp,120
 c00140c:	a006d0fa 	srli	r3,r20,3
 c001410:	b008977a 	slli	r4,r22,29
 c001414:	b02cd0fa 	srli	r22,r22,3
 c001418:	a50001cc 	andi	r20,r20,7
 c00141c:	a0800c04 	addi	r2,r20,48
 c001420:	843fffc4 	addi	r16,r16,-1
 c001424:	20e8b03a 	or	r20,r4,r3
 c001428:	80800005 	stb	r2,0(r16)
 c00142c:	a586b03a 	or	r3,r20,r22
 c001430:	183ff61e 	bne	r3,zero,c00140c <__alt_data_end+0xfc00140c>
 c001434:	90c0004c 	andi	r3,r18,1
 c001438:	18013f26 	beq	r3,zero,c001938 <___svfprintf_internal_r+0xbb0>
 c00143c:	10803fcc 	andi	r2,r2,255
 c001440:	1080201c 	xori	r2,r2,128
 c001444:	10bfe004 	addi	r2,r2,-128
 c001448:	00c00c04 	movi	r3,48
 c00144c:	10c13a26 	beq	r2,r3,c001938 <___svfprintf_internal_r+0xbb0>
 c001450:	80ffffc5 	stb	r3,-1(r16)
 c001454:	d8c02817 	ldw	r3,160(sp)
 c001458:	80bfffc4 	addi	r2,r16,-1
 c00145c:	1021883a 	mov	r16,r2
 c001460:	1887c83a 	sub	r3,r3,r2
 c001464:	d8c02b15 	stw	r3,172(sp)
 c001468:	d8802b17 	ldw	r2,172(sp)
 c00146c:	d9002a17 	ldw	r4,168(sp)
 c001470:	1100010e 	bge	r2,r4,c001478 <___svfprintf_internal_r+0x6f0>
 c001474:	2005883a 	mov	r2,r4
 c001478:	d8802915 	stw	r2,164(sp)
 c00147c:	d8003215 	stw	zero,200(sp)
 c001480:	e7003fcc 	andi	fp,fp,255
 c001484:	e700201c 	xori	fp,fp,128
 c001488:	e73fe004 	addi	fp,fp,-128
 c00148c:	e0000326 	beq	fp,zero,c00149c <___svfprintf_internal_r+0x714>
 c001490:	d8c02917 	ldw	r3,164(sp)
 c001494:	18c00044 	addi	r3,r3,1
 c001498:	d8c02915 	stw	r3,164(sp)
 c00149c:	90c0008c 	andi	r3,r18,2
 c0014a0:	d8c02c15 	stw	r3,176(sp)
 c0014a4:	18000326 	beq	r3,zero,c0014b4 <___svfprintf_internal_r+0x72c>
 c0014a8:	d8c02917 	ldw	r3,164(sp)
 c0014ac:	18c00084 	addi	r3,r3,2
 c0014b0:	d8c02915 	stw	r3,164(sp)
 c0014b4:	90c0210c 	andi	r3,r18,132
 c0014b8:	d8c03015 	stw	r3,192(sp)
 c0014bc:	1801c31e 	bne	r3,zero,c001bcc <___svfprintf_internal_r+0xe44>
 c0014c0:	d9003117 	ldw	r4,196(sp)
 c0014c4:	d8c02917 	ldw	r3,164(sp)
 c0014c8:	20e9c83a 	sub	r20,r4,r3
 c0014cc:	0501bf0e 	bge	zero,r20,c001bcc <___svfprintf_internal_r+0xe44>
 c0014d0:	02400404 	movi	r9,16
 c0014d4:	d8c02017 	ldw	r3,128(sp)
 c0014d8:	d8801f17 	ldw	r2,124(sp)
 c0014dc:	4d053d0e 	bge	r9,r20,c0029d4 <___svfprintf_internal_r+0x1c4c>
 c0014e0:	01430074 	movhi	r5,3073
 c0014e4:	2978a784 	addi	r5,r5,-7522
 c0014e8:	dc403c15 	stw	r17,240(sp)
 c0014ec:	d9403515 	stw	r5,212(sp)
 c0014f0:	a023883a 	mov	r17,r20
 c0014f4:	482d883a 	mov	r22,r9
 c0014f8:	9029883a 	mov	r20,r18
 c0014fc:	070001c4 	movi	fp,7
 c001500:	8025883a 	mov	r18,r16
 c001504:	dc002d17 	ldw	r16,180(sp)
 c001508:	00000306 	br	c001518 <___svfprintf_internal_r+0x790>
 c00150c:	8c7ffc04 	addi	r17,r17,-16
 c001510:	42000204 	addi	r8,r8,8
 c001514:	b440130e 	bge	r22,r17,c001564 <___svfprintf_internal_r+0x7dc>
 c001518:	01030074 	movhi	r4,3073
 c00151c:	18c00404 	addi	r3,r3,16
 c001520:	10800044 	addi	r2,r2,1
 c001524:	2138a784 	addi	r4,r4,-7522
 c001528:	41000015 	stw	r4,0(r8)
 c00152c:	45800115 	stw	r22,4(r8)
 c001530:	d8c02015 	stw	r3,128(sp)
 c001534:	d8801f15 	stw	r2,124(sp)
 c001538:	e0bff40e 	bge	fp,r2,c00150c <__alt_data_end+0xfc00150c>
 c00153c:	d9801e04 	addi	r6,sp,120
 c001540:	800b883a 	mov	r5,r16
 c001544:	9809883a 	mov	r4,r19
 c001548:	c0066640 	call	c006664 <__ssprint_r>
 c00154c:	103ef51e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c001550:	8c7ffc04 	addi	r17,r17,-16
 c001554:	d8c02017 	ldw	r3,128(sp)
 c001558:	d8801f17 	ldw	r2,124(sp)
 c00155c:	da000404 	addi	r8,sp,16
 c001560:	b47fed16 	blt	r22,r17,c001518 <__alt_data_end+0xfc001518>
 c001564:	9021883a 	mov	r16,r18
 c001568:	a025883a 	mov	r18,r20
 c00156c:	8829883a 	mov	r20,r17
 c001570:	dc403c17 	ldw	r17,240(sp)
 c001574:	d9403517 	ldw	r5,212(sp)
 c001578:	a0c7883a 	add	r3,r20,r3
 c00157c:	10800044 	addi	r2,r2,1
 c001580:	41400015 	stw	r5,0(r8)
 c001584:	45000115 	stw	r20,4(r8)
 c001588:	d8c02015 	stw	r3,128(sp)
 c00158c:	d8801f15 	stw	r2,124(sp)
 c001590:	010001c4 	movi	r4,7
 c001594:	2082c116 	blt	r4,r2,c00209c <___svfprintf_internal_r+0x1314>
 c001598:	df002787 	ldb	fp,158(sp)
 c00159c:	42000204 	addi	r8,r8,8
 c0015a0:	e0000c26 	beq	fp,zero,c0015d4 <___svfprintf_internal_r+0x84c>
 c0015a4:	d8801f17 	ldw	r2,124(sp)
 c0015a8:	d9002784 	addi	r4,sp,158
 c0015ac:	18c00044 	addi	r3,r3,1
 c0015b0:	10800044 	addi	r2,r2,1
 c0015b4:	41000015 	stw	r4,0(r8)
 c0015b8:	01000044 	movi	r4,1
 c0015bc:	41000115 	stw	r4,4(r8)
 c0015c0:	d8c02015 	stw	r3,128(sp)
 c0015c4:	d8801f15 	stw	r2,124(sp)
 c0015c8:	010001c4 	movi	r4,7
 c0015cc:	20825a16 	blt	r4,r2,c001f38 <___svfprintf_internal_r+0x11b0>
 c0015d0:	42000204 	addi	r8,r8,8
 c0015d4:	d8802c17 	ldw	r2,176(sp)
 c0015d8:	10000c26 	beq	r2,zero,c00160c <___svfprintf_internal_r+0x884>
 c0015dc:	d8801f17 	ldw	r2,124(sp)
 c0015e0:	d9002704 	addi	r4,sp,156
 c0015e4:	18c00084 	addi	r3,r3,2
 c0015e8:	10800044 	addi	r2,r2,1
 c0015ec:	41000015 	stw	r4,0(r8)
 c0015f0:	01000084 	movi	r4,2
 c0015f4:	41000115 	stw	r4,4(r8)
 c0015f8:	d8c02015 	stw	r3,128(sp)
 c0015fc:	d8801f15 	stw	r2,124(sp)
 c001600:	010001c4 	movi	r4,7
 c001604:	20825416 	blt	r4,r2,c001f58 <___svfprintf_internal_r+0x11d0>
 c001608:	42000204 	addi	r8,r8,8
 c00160c:	d9003017 	ldw	r4,192(sp)
 c001610:	00802004 	movi	r2,128
 c001614:	2081b926 	beq	r4,r2,c001cfc <___svfprintf_internal_r+0xf74>
 c001618:	d9402a17 	ldw	r5,168(sp)
 c00161c:	d8802b17 	ldw	r2,172(sp)
 c001620:	28adc83a 	sub	r22,r5,r2
 c001624:	05802f0e 	bge	zero,r22,c0016e4 <___svfprintf_internal_r+0x95c>
 c001628:	07000404 	movi	fp,16
 c00162c:	d8801f17 	ldw	r2,124(sp)
 c001630:	e583e20e 	bge	fp,r22,c0025bc <___svfprintf_internal_r+0x1834>
 c001634:	01430074 	movhi	r5,3073
 c001638:	2978a384 	addi	r5,r5,-7538
 c00163c:	dc402a15 	stw	r17,168(sp)
 c001640:	d9402c15 	stw	r5,176(sp)
 c001644:	b023883a 	mov	r17,r22
 c001648:	050001c4 	movi	r20,7
 c00164c:	902d883a 	mov	r22,r18
 c001650:	8025883a 	mov	r18,r16
 c001654:	dc002d17 	ldw	r16,180(sp)
 c001658:	00000306 	br	c001668 <___svfprintf_internal_r+0x8e0>
 c00165c:	8c7ffc04 	addi	r17,r17,-16
 c001660:	42000204 	addi	r8,r8,8
 c001664:	e440110e 	bge	fp,r17,c0016ac <___svfprintf_internal_r+0x924>
 c001668:	18c00404 	addi	r3,r3,16
 c00166c:	10800044 	addi	r2,r2,1
 c001670:	45400015 	stw	r21,0(r8)
 c001674:	47000115 	stw	fp,4(r8)
 c001678:	d8c02015 	stw	r3,128(sp)
 c00167c:	d8801f15 	stw	r2,124(sp)
 c001680:	a0bff60e 	bge	r20,r2,c00165c <__alt_data_end+0xfc00165c>
 c001684:	d9801e04 	addi	r6,sp,120
 c001688:	800b883a 	mov	r5,r16
 c00168c:	9809883a 	mov	r4,r19
 c001690:	c0066640 	call	c006664 <__ssprint_r>
 c001694:	103ea31e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c001698:	8c7ffc04 	addi	r17,r17,-16
 c00169c:	d8c02017 	ldw	r3,128(sp)
 c0016a0:	d8801f17 	ldw	r2,124(sp)
 c0016a4:	da000404 	addi	r8,sp,16
 c0016a8:	e47fef16 	blt	fp,r17,c001668 <__alt_data_end+0xfc001668>
 c0016ac:	9021883a 	mov	r16,r18
 c0016b0:	b025883a 	mov	r18,r22
 c0016b4:	882d883a 	mov	r22,r17
 c0016b8:	dc402a17 	ldw	r17,168(sp)
 c0016bc:	d9002c17 	ldw	r4,176(sp)
 c0016c0:	1d87883a 	add	r3,r3,r22
 c0016c4:	10800044 	addi	r2,r2,1
 c0016c8:	41000015 	stw	r4,0(r8)
 c0016cc:	45800115 	stw	r22,4(r8)
 c0016d0:	d8c02015 	stw	r3,128(sp)
 c0016d4:	d8801f15 	stw	r2,124(sp)
 c0016d8:	010001c4 	movi	r4,7
 c0016dc:	20820e16 	blt	r4,r2,c001f18 <___svfprintf_internal_r+0x1190>
 c0016e0:	42000204 	addi	r8,r8,8
 c0016e4:	9080400c 	andi	r2,r18,256
 c0016e8:	10013a1e 	bne	r2,zero,c001bd4 <___svfprintf_internal_r+0xe4c>
 c0016ec:	d9402b17 	ldw	r5,172(sp)
 c0016f0:	d8801f17 	ldw	r2,124(sp)
 c0016f4:	44000015 	stw	r16,0(r8)
 c0016f8:	1947883a 	add	r3,r3,r5
 c0016fc:	10800044 	addi	r2,r2,1
 c001700:	41400115 	stw	r5,4(r8)
 c001704:	d8c02015 	stw	r3,128(sp)
 c001708:	d8801f15 	stw	r2,124(sp)
 c00170c:	010001c4 	movi	r4,7
 c001710:	2081f316 	blt	r4,r2,c001ee0 <___svfprintf_internal_r+0x1158>
 c001714:	42000204 	addi	r8,r8,8
 c001718:	9480010c 	andi	r18,r18,4
 c00171c:	90003226 	beq	r18,zero,c0017e8 <___svfprintf_internal_r+0xa60>
 c001720:	d9403117 	ldw	r5,196(sp)
 c001724:	d8802917 	ldw	r2,164(sp)
 c001728:	28a1c83a 	sub	r16,r5,r2
 c00172c:	04002e0e 	bge	zero,r16,c0017e8 <___svfprintf_internal_r+0xa60>
 c001730:	04400404 	movi	r17,16
 c001734:	d8801f17 	ldw	r2,124(sp)
 c001738:	8c04db0e 	bge	r17,r16,c002aa8 <___svfprintf_internal_r+0x1d20>
 c00173c:	01430074 	movhi	r5,3073
 c001740:	2978a784 	addi	r5,r5,-7522
 c001744:	d9403515 	stw	r5,212(sp)
 c001748:	048001c4 	movi	r18,7
 c00174c:	dd002d17 	ldw	r20,180(sp)
 c001750:	00000306 	br	c001760 <___svfprintf_internal_r+0x9d8>
 c001754:	843ffc04 	addi	r16,r16,-16
 c001758:	42000204 	addi	r8,r8,8
 c00175c:	8c00130e 	bge	r17,r16,c0017ac <___svfprintf_internal_r+0xa24>
 c001760:	01030074 	movhi	r4,3073
 c001764:	18c00404 	addi	r3,r3,16
 c001768:	10800044 	addi	r2,r2,1
 c00176c:	2138a784 	addi	r4,r4,-7522
 c001770:	41000015 	stw	r4,0(r8)
 c001774:	44400115 	stw	r17,4(r8)
 c001778:	d8c02015 	stw	r3,128(sp)
 c00177c:	d8801f15 	stw	r2,124(sp)
 c001780:	90bff40e 	bge	r18,r2,c001754 <__alt_data_end+0xfc001754>
 c001784:	d9801e04 	addi	r6,sp,120
 c001788:	a00b883a 	mov	r5,r20
 c00178c:	9809883a 	mov	r4,r19
 c001790:	c0066640 	call	c006664 <__ssprint_r>
 c001794:	103e631e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c001798:	843ffc04 	addi	r16,r16,-16
 c00179c:	d8c02017 	ldw	r3,128(sp)
 c0017a0:	d8801f17 	ldw	r2,124(sp)
 c0017a4:	da000404 	addi	r8,sp,16
 c0017a8:	8c3fed16 	blt	r17,r16,c001760 <__alt_data_end+0xfc001760>
 c0017ac:	d9403517 	ldw	r5,212(sp)
 c0017b0:	1c07883a 	add	r3,r3,r16
 c0017b4:	10800044 	addi	r2,r2,1
 c0017b8:	41400015 	stw	r5,0(r8)
 c0017bc:	44000115 	stw	r16,4(r8)
 c0017c0:	d8c02015 	stw	r3,128(sp)
 c0017c4:	d8801f15 	stw	r2,124(sp)
 c0017c8:	010001c4 	movi	r4,7
 c0017cc:	2080060e 	bge	r4,r2,c0017e8 <___svfprintf_internal_r+0xa60>
 c0017d0:	d9402d17 	ldw	r5,180(sp)
 c0017d4:	d9801e04 	addi	r6,sp,120
 c0017d8:	9809883a 	mov	r4,r19
 c0017dc:	c0066640 	call	c006664 <__ssprint_r>
 c0017e0:	103e501e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c0017e4:	d8c02017 	ldw	r3,128(sp)
 c0017e8:	d8803117 	ldw	r2,196(sp)
 c0017ec:	d9002917 	ldw	r4,164(sp)
 c0017f0:	1100010e 	bge	r2,r4,c0017f8 <___svfprintf_internal_r+0xa70>
 c0017f4:	2005883a 	mov	r2,r4
 c0017f8:	d9402f17 	ldw	r5,188(sp)
 c0017fc:	288b883a 	add	r5,r5,r2
 c001800:	d9402f15 	stw	r5,188(sp)
 c001804:	1801be1e 	bne	r3,zero,c001f00 <___svfprintf_internal_r+0x1178>
 c001808:	b8800007 	ldb	r2,0(r23)
 c00180c:	d8001f15 	stw	zero,124(sp)
 c001810:	da000404 	addi	r8,sp,16
 c001814:	103d891e 	bne	r2,zero,c000e3c <__alt_data_end+0xfc000e3c>
 c001818:	b823883a 	mov	r17,r23
 c00181c:	003d9f06 	br	c000e9c <__alt_data_end+0xfc000e9c>
 c001820:	8025883a 	mov	r18,r16
 c001824:	dc002903 	ldbu	r16,164(sp)
 c001828:	e011883a 	mov	r8,fp
 c00182c:	84003fcc 	andi	r16,r16,255
 c001830:	8005e61e 	bne	r16,zero,c002fcc <___svfprintf_internal_r+0x2244>
 c001834:	94800414 	ori	r18,r18,16
 c001838:	9080080c 	andi	r2,r18,32
 c00183c:	10022026 	beq	r2,zero,c0020c0 <___svfprintf_internal_r+0x1338>
 c001840:	d9002e17 	ldw	r4,184(sp)
 c001844:	d9402a17 	ldw	r5,168(sp)
 c001848:	d8002785 	stb	zero,158(sp)
 c00184c:	20c00204 	addi	r3,r4,8
 c001850:	25000017 	ldw	r20,0(r4)
 c001854:	25800117 	ldw	r22,4(r4)
 c001858:	2803ad16 	blt	r5,zero,c002710 <___svfprintf_internal_r+0x1988>
 c00185c:	013fdfc4 	movi	r4,-129
 c001860:	a584b03a 	or	r2,r20,r22
 c001864:	d8c02e15 	stw	r3,184(sp)
 c001868:	9124703a 	and	r18,r18,r4
 c00186c:	0039883a 	mov	fp,zero
 c001870:	103eb01e 	bne	r2,zero,c001334 <__alt_data_end+0xfc001334>
 c001874:	d8802a17 	ldw	r2,168(sp)
 c001878:	1002e71e 	bne	r2,zero,c002418 <___svfprintf_internal_r+0x1690>
 c00187c:	d8002a15 	stw	zero,168(sp)
 c001880:	d8002b15 	stw	zero,172(sp)
 c001884:	dc001e04 	addi	r16,sp,120
 c001888:	003ef706 	br	c001468 <__alt_data_end+0xfc001468>
 c00188c:	8025883a 	mov	r18,r16
 c001890:	dc002903 	ldbu	r16,164(sp)
 c001894:	e011883a 	mov	r8,fp
 c001898:	84003fcc 	andi	r16,r16,255
 c00189c:	8005c81e 	bne	r16,zero,c002fc0 <___svfprintf_internal_r+0x2238>
 c0018a0:	01030074 	movhi	r4,3073
 c0018a4:	21389704 	addi	r4,r4,-7588
 c0018a8:	d9003a15 	stw	r4,232(sp)
 c0018ac:	9080080c 	andi	r2,r18,32
 c0018b0:	10007226 	beq	r2,zero,c001a7c <___svfprintf_internal_r+0xcf4>
 c0018b4:	d9402e17 	ldw	r5,184(sp)
 c0018b8:	2d000017 	ldw	r20,0(r5)
 c0018bc:	2d800117 	ldw	r22,4(r5)
 c0018c0:	29400204 	addi	r5,r5,8
 c0018c4:	d9402e15 	stw	r5,184(sp)
 c0018c8:	9080004c 	andi	r2,r18,1
 c0018cc:	1001aa26 	beq	r2,zero,c001f78 <___svfprintf_internal_r+0x11f0>
 c0018d0:	a584b03a 	or	r2,r20,r22
 c0018d4:	10032526 	beq	r2,zero,c00256c <___svfprintf_internal_r+0x17e4>
 c0018d8:	d8c02a17 	ldw	r3,168(sp)
 c0018dc:	00800c04 	movi	r2,48
 c0018e0:	d8802705 	stb	r2,156(sp)
 c0018e4:	dc402745 	stb	r17,157(sp)
 c0018e8:	d8002785 	stb	zero,158(sp)
 c0018ec:	90800094 	ori	r2,r18,2
 c0018f0:	1804a316 	blt	r3,zero,c002b80 <___svfprintf_internal_r+0x1df8>
 c0018f4:	00bfdfc4 	movi	r2,-129
 c0018f8:	90a4703a 	and	r18,r18,r2
 c0018fc:	94800094 	ori	r18,r18,2
 c001900:	0039883a 	mov	fp,zero
 c001904:	d9003a17 	ldw	r4,232(sp)
 c001908:	dc001e04 	addi	r16,sp,120
 c00190c:	a08003cc 	andi	r2,r20,15
 c001910:	b006973a 	slli	r3,r22,28
 c001914:	2085883a 	add	r2,r4,r2
 c001918:	a028d13a 	srli	r20,r20,4
 c00191c:	10800003 	ldbu	r2,0(r2)
 c001920:	b02cd13a 	srli	r22,r22,4
 c001924:	843fffc4 	addi	r16,r16,-1
 c001928:	1d28b03a 	or	r20,r3,r20
 c00192c:	80800005 	stb	r2,0(r16)
 c001930:	a584b03a 	or	r2,r20,r22
 c001934:	103ff51e 	bne	r2,zero,c00190c <__alt_data_end+0xfc00190c>
 c001938:	d8c02817 	ldw	r3,160(sp)
 c00193c:	1c07c83a 	sub	r3,r3,r16
 c001940:	d8c02b15 	stw	r3,172(sp)
 c001944:	003ec806 	br	c001468 <__alt_data_end+0xfc001468>
 c001948:	d8c02e17 	ldw	r3,184(sp)
 c00194c:	d9002e17 	ldw	r4,184(sp)
 c001950:	8025883a 	mov	r18,r16
 c001954:	18800017 	ldw	r2,0(r3)
 c001958:	21000104 	addi	r4,r4,4
 c00195c:	00c00044 	movi	r3,1
 c001960:	e011883a 	mov	r8,fp
 c001964:	d8c02915 	stw	r3,164(sp)
 c001968:	d8002785 	stb	zero,158(sp)
 c00196c:	d8801405 	stb	r2,80(sp)
 c001970:	d9002e15 	stw	r4,184(sp)
 c001974:	d8c02b15 	stw	r3,172(sp)
 c001978:	d8002a15 	stw	zero,168(sp)
 c00197c:	d8003215 	stw	zero,200(sp)
 c001980:	dc001404 	addi	r16,sp,80
 c001984:	0039883a 	mov	fp,zero
 c001988:	003ec406 	br	c00149c <__alt_data_end+0xfc00149c>
 c00198c:	8025883a 	mov	r18,r16
 c001990:	dc002903 	ldbu	r16,164(sp)
 c001994:	e011883a 	mov	r8,fp
 c001998:	84003fcc 	andi	r16,r16,255
 c00199c:	803e8726 	beq	r16,zero,c0013bc <__alt_data_end+0xfc0013bc>
 c0019a0:	d8c02b03 	ldbu	r3,172(sp)
 c0019a4:	d8c02785 	stb	r3,158(sp)
 c0019a8:	003e8406 	br	c0013bc <__alt_data_end+0xfc0013bc>
 c0019ac:	00c00044 	movi	r3,1
 c0019b0:	d8c02905 	stb	r3,164(sp)
 c0019b4:	00c00ac4 	movi	r3,43
 c0019b8:	d8c02b05 	stb	r3,172(sp)
 c0019bc:	bc400007 	ldb	r17,0(r23)
 c0019c0:	003d4606 	br	c000edc <__alt_data_end+0xfc000edc>
 c0019c4:	84000814 	ori	r16,r16,32
 c0019c8:	bc400007 	ldb	r17,0(r23)
 c0019cc:	003d4306 	br	c000edc <__alt_data_end+0xfc000edc>
 c0019d0:	d8802e17 	ldw	r2,184(sp)
 c0019d4:	8025883a 	mov	r18,r16
 c0019d8:	d8002785 	stb	zero,158(sp)
 c0019dc:	14000017 	ldw	r16,0(r2)
 c0019e0:	e011883a 	mov	r8,fp
 c0019e4:	15000104 	addi	r20,r2,4
 c0019e8:	80042126 	beq	r16,zero,c002a70 <___svfprintf_internal_r+0x1ce8>
 c0019ec:	d8c02a17 	ldw	r3,168(sp)
 c0019f0:	1803ee16 	blt	r3,zero,c0029ac <___svfprintf_internal_r+0x1c24>
 c0019f4:	180d883a 	mov	r6,r3
 c0019f8:	000b883a 	mov	r5,zero
 c0019fc:	8009883a 	mov	r4,r16
 c001a00:	df003e15 	stw	fp,248(sp)
 c001a04:	c0051dc0 	call	c0051dc <memchr>
 c001a08:	da003e17 	ldw	r8,248(sp)
 c001a0c:	10046a26 	beq	r2,zero,c002bb8 <___svfprintf_internal_r+0x1e30>
 c001a10:	1405c83a 	sub	r2,r2,r16
 c001a14:	d8802b15 	stw	r2,172(sp)
 c001a18:	1003ea16 	blt	r2,zero,c0029c4 <___svfprintf_internal_r+0x1c3c>
 c001a1c:	df002783 	ldbu	fp,158(sp)
 c001a20:	d8802915 	stw	r2,164(sp)
 c001a24:	dd002e15 	stw	r20,184(sp)
 c001a28:	d8002a15 	stw	zero,168(sp)
 c001a2c:	d8003215 	stw	zero,200(sp)
 c001a30:	003e9306 	br	c001480 <__alt_data_end+0xfc001480>
 c001a34:	8025883a 	mov	r18,r16
 c001a38:	dc002903 	ldbu	r16,164(sp)
 c001a3c:	e011883a 	mov	r8,fp
 c001a40:	84003fcc 	andi	r16,r16,255
 c001a44:	803f7c26 	beq	r16,zero,c001838 <__alt_data_end+0xfc001838>
 c001a48:	d8c02b03 	ldbu	r3,172(sp)
 c001a4c:	d8c02785 	stb	r3,158(sp)
 c001a50:	003f7906 	br	c001838 <__alt_data_end+0xfc001838>
 c001a54:	8025883a 	mov	r18,r16
 c001a58:	dc002903 	ldbu	r16,164(sp)
 c001a5c:	e011883a 	mov	r8,fp
 c001a60:	84003fcc 	andi	r16,r16,255
 c001a64:	8005741e 	bne	r16,zero,c003038 <___svfprintf_internal_r+0x22b0>
 c001a68:	01030074 	movhi	r4,3073
 c001a6c:	21389c04 	addi	r4,r4,-7568
 c001a70:	d9003a15 	stw	r4,232(sp)
 c001a74:	9080080c 	andi	r2,r18,32
 c001a78:	103f8e1e 	bne	r2,zero,c0018b4 <__alt_data_end+0xfc0018b4>
 c001a7c:	9080040c 	andi	r2,r18,16
 c001a80:	1002a726 	beq	r2,zero,c002520 <___svfprintf_internal_r+0x1798>
 c001a84:	d8802e17 	ldw	r2,184(sp)
 c001a88:	002d883a 	mov	r22,zero
 c001a8c:	15000017 	ldw	r20,0(r2)
 c001a90:	10800104 	addi	r2,r2,4
 c001a94:	d8802e15 	stw	r2,184(sp)
 c001a98:	003f8b06 	br	c0018c8 <__alt_data_end+0xfc0018c8>
 c001a9c:	84000054 	ori	r16,r16,1
 c001aa0:	bc400007 	ldb	r17,0(r23)
 c001aa4:	003d0d06 	br	c000edc <__alt_data_end+0xfc000edc>
 c001aa8:	d8802b07 	ldb	r2,172(sp)
 c001aac:	1002a41e 	bne	r2,zero,c002540 <___svfprintf_internal_r+0x17b8>
 c001ab0:	00c00044 	movi	r3,1
 c001ab4:	d8c02905 	stb	r3,164(sp)
 c001ab8:	00c00804 	movi	r3,32
 c001abc:	d8c02b05 	stb	r3,172(sp)
 c001ac0:	bc400007 	ldb	r17,0(r23)
 c001ac4:	003d0506 	br	c000edc <__alt_data_end+0xfc000edc>
 c001ac8:	8025883a 	mov	r18,r16
 c001acc:	dc002903 	ldbu	r16,164(sp)
 c001ad0:	e011883a 	mov	r8,fp
 c001ad4:	84003fcc 	andi	r16,r16,255
 c001ad8:	803e0626 	beq	r16,zero,c0012f4 <__alt_data_end+0xfc0012f4>
 c001adc:	d8c02b03 	ldbu	r3,172(sp)
 c001ae0:	d8c02785 	stb	r3,158(sp)
 c001ae4:	003e0306 	br	c0012f4 <__alt_data_end+0xfc0012f4>
 c001ae8:	bc400007 	ldb	r17,0(r23)
 c001aec:	00801b04 	movi	r2,108
 c001af0:	88830a26 	beq	r17,r2,c00271c <___svfprintf_internal_r+0x1994>
 c001af4:	84000414 	ori	r16,r16,16
 c001af8:	003cf806 	br	c000edc <__alt_data_end+0xfc000edc>
 c001afc:	8025883a 	mov	r18,r16
 c001b00:	dc002903 	ldbu	r16,164(sp)
 c001b04:	e011883a 	mov	r8,fp
 c001b08:	84003fcc 	andi	r16,r16,255
 c001b0c:	8005471e 	bne	r16,zero,c00302c <___svfprintf_internal_r+0x22a4>
 c001b10:	9080080c 	andi	r2,r18,32
 c001b14:	10028c26 	beq	r2,zero,c002548 <___svfprintf_internal_r+0x17c0>
 c001b18:	d9002e17 	ldw	r4,184(sp)
 c001b1c:	d9402f17 	ldw	r5,188(sp)
 c001b20:	20800017 	ldw	r2,0(r4)
 c001b24:	2807d7fa 	srai	r3,r5,31
 c001b28:	21000104 	addi	r4,r4,4
 c001b2c:	d9002e15 	stw	r4,184(sp)
 c001b30:	11400015 	stw	r5,0(r2)
 c001b34:	10c00115 	stw	r3,4(r2)
 c001b38:	003cbe06 	br	c000e34 <__alt_data_end+0xfc000e34>
 c001b3c:	84001014 	ori	r16,r16,64
 c001b40:	bc400007 	ldb	r17,0(r23)
 c001b44:	003ce506 	br	c000edc <__alt_data_end+0xfc000edc>
 c001b48:	01030074 	movhi	r4,3073
 c001b4c:	21389c04 	addi	r4,r4,-7568
 c001b50:	0039883a 	mov	fp,zero
 c001b54:	d9003a15 	stw	r4,232(sp)
 c001b58:	04401e04 	movi	r17,120
 c001b5c:	003f6906 	br	c001904 <__alt_data_end+0xfc001904>
 c001b60:	8025883a 	mov	r18,r16
 c001b64:	dc002903 	ldbu	r16,164(sp)
 c001b68:	e011883a 	mov	r8,fp
 c001b6c:	84003fcc 	andi	r16,r16,255
 c001b70:	8005261e 	bne	r16,zero,c00300c <___svfprintf_internal_r+0x2284>
 c001b74:	883d6526 	beq	r17,zero,c00110c <__alt_data_end+0xfc00110c>
 c001b78:	00c00044 	movi	r3,1
 c001b7c:	d8c02915 	stw	r3,164(sp)
 c001b80:	dc401405 	stb	r17,80(sp)
 c001b84:	d8002785 	stb	zero,158(sp)
 c001b88:	003f7a06 	br	c001974 <__alt_data_end+0xfc001974>
 c001b8c:	01030074 	movhi	r4,3073
 c001b90:	21389c04 	addi	r4,r4,-7568
 c001b94:	d9003a15 	stw	r4,232(sp)
 c001b98:	d8c02e15 	stw	r3,184(sp)
 c001b9c:	1025883a 	mov	r18,r2
 c001ba0:	04401e04 	movi	r17,120
 c001ba4:	a584b03a 	or	r2,r20,r22
 c001ba8:	1000fa1e 	bne	r2,zero,c001f94 <___svfprintf_internal_r+0x120c>
 c001bac:	0039883a 	mov	fp,zero
 c001bb0:	00800084 	movi	r2,2
 c001bb4:	10803fcc 	andi	r2,r2,255
 c001bb8:	00c00044 	movi	r3,1
 c001bbc:	10c21626 	beq	r2,r3,c002418 <___svfprintf_internal_r+0x1690>
 c001bc0:	00c00084 	movi	r3,2
 c001bc4:	10fe0e1e 	bne	r2,r3,c001400 <__alt_data_end+0xfc001400>
 c001bc8:	003d4606 	br	c0010e4 <__alt_data_end+0xfc0010e4>
 c001bcc:	d8c02017 	ldw	r3,128(sp)
 c001bd0:	003e7306 	br	c0015a0 <__alt_data_end+0xfc0015a0>
 c001bd4:	00801944 	movi	r2,101
 c001bd8:	14407c0e 	bge	r2,r17,c001dcc <___svfprintf_internal_r+0x1044>
 c001bdc:	d9003617 	ldw	r4,216(sp)
 c001be0:	d9403717 	ldw	r5,220(sp)
 c001be4:	000d883a 	mov	r6,zero
 c001be8:	000f883a 	mov	r7,zero
 c001bec:	d8c03d15 	stw	r3,244(sp)
 c001bf0:	da003e15 	stw	r8,248(sp)
 c001bf4:	c00a8140 	call	c00a814 <__eqdf2>
 c001bf8:	d8c03d17 	ldw	r3,244(sp)
 c001bfc:	da003e17 	ldw	r8,248(sp)
 c001c00:	1000f51e 	bne	r2,zero,c001fd8 <___svfprintf_internal_r+0x1250>
 c001c04:	d8801f17 	ldw	r2,124(sp)
 c001c08:	01030074 	movhi	r4,3073
 c001c0c:	2138a304 	addi	r4,r4,-7540
 c001c10:	18c00044 	addi	r3,r3,1
 c001c14:	10800044 	addi	r2,r2,1
 c001c18:	41000015 	stw	r4,0(r8)
 c001c1c:	01000044 	movi	r4,1
 c001c20:	41000115 	stw	r4,4(r8)
 c001c24:	d8c02015 	stw	r3,128(sp)
 c001c28:	d8801f15 	stw	r2,124(sp)
 c001c2c:	010001c4 	movi	r4,7
 c001c30:	20826616 	blt	r4,r2,c0025cc <___svfprintf_internal_r+0x1844>
 c001c34:	42000204 	addi	r8,r8,8
 c001c38:	d8802617 	ldw	r2,152(sp)
 c001c3c:	d9403317 	ldw	r5,204(sp)
 c001c40:	11400216 	blt	r2,r5,c001c4c <___svfprintf_internal_r+0xec4>
 c001c44:	9080004c 	andi	r2,r18,1
 c001c48:	103eb326 	beq	r2,zero,c001718 <__alt_data_end+0xfc001718>
 c001c4c:	d8803817 	ldw	r2,224(sp)
 c001c50:	d9003417 	ldw	r4,208(sp)
 c001c54:	d9403817 	ldw	r5,224(sp)
 c001c58:	1887883a 	add	r3,r3,r2
 c001c5c:	d8801f17 	ldw	r2,124(sp)
 c001c60:	41000015 	stw	r4,0(r8)
 c001c64:	41400115 	stw	r5,4(r8)
 c001c68:	10800044 	addi	r2,r2,1
 c001c6c:	d8c02015 	stw	r3,128(sp)
 c001c70:	d8801f15 	stw	r2,124(sp)
 c001c74:	010001c4 	movi	r4,7
 c001c78:	2082af16 	blt	r4,r2,c002738 <___svfprintf_internal_r+0x19b0>
 c001c7c:	42000204 	addi	r8,r8,8
 c001c80:	d8803317 	ldw	r2,204(sp)
 c001c84:	143fffc4 	addi	r16,r2,-1
 c001c88:	043ea30e 	bge	zero,r16,c001718 <__alt_data_end+0xfc001718>
 c001c8c:	04400404 	movi	r17,16
 c001c90:	d8801f17 	ldw	r2,124(sp)
 c001c94:	8c00860e 	bge	r17,r16,c001eb0 <___svfprintf_internal_r+0x1128>
 c001c98:	01430074 	movhi	r5,3073
 c001c9c:	2978a384 	addi	r5,r5,-7538
 c001ca0:	d9402c15 	stw	r5,176(sp)
 c001ca4:	058001c4 	movi	r22,7
 c001ca8:	dd002d17 	ldw	r20,180(sp)
 c001cac:	00000306 	br	c001cbc <___svfprintf_internal_r+0xf34>
 c001cb0:	42000204 	addi	r8,r8,8
 c001cb4:	843ffc04 	addi	r16,r16,-16
 c001cb8:	8c00800e 	bge	r17,r16,c001ebc <___svfprintf_internal_r+0x1134>
 c001cbc:	18c00404 	addi	r3,r3,16
 c001cc0:	10800044 	addi	r2,r2,1
 c001cc4:	45400015 	stw	r21,0(r8)
 c001cc8:	44400115 	stw	r17,4(r8)
 c001ccc:	d8c02015 	stw	r3,128(sp)
 c001cd0:	d8801f15 	stw	r2,124(sp)
 c001cd4:	b0bff60e 	bge	r22,r2,c001cb0 <__alt_data_end+0xfc001cb0>
 c001cd8:	d9801e04 	addi	r6,sp,120
 c001cdc:	a00b883a 	mov	r5,r20
 c001ce0:	9809883a 	mov	r4,r19
 c001ce4:	c0066640 	call	c006664 <__ssprint_r>
 c001ce8:	103d0e1e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c001cec:	d8c02017 	ldw	r3,128(sp)
 c001cf0:	d8801f17 	ldw	r2,124(sp)
 c001cf4:	da000404 	addi	r8,sp,16
 c001cf8:	003fee06 	br	c001cb4 <__alt_data_end+0xfc001cb4>
 c001cfc:	d9403117 	ldw	r5,196(sp)
 c001d00:	d8802917 	ldw	r2,164(sp)
 c001d04:	28adc83a 	sub	r22,r5,r2
 c001d08:	05be430e 	bge	zero,r22,c001618 <__alt_data_end+0xfc001618>
 c001d0c:	07000404 	movi	fp,16
 c001d10:	d8801f17 	ldw	r2,124(sp)
 c001d14:	e583a20e 	bge	fp,r22,c002ba0 <___svfprintf_internal_r+0x1e18>
 c001d18:	01430074 	movhi	r5,3073
 c001d1c:	2978a384 	addi	r5,r5,-7538
 c001d20:	dc403015 	stw	r17,192(sp)
 c001d24:	d9402c15 	stw	r5,176(sp)
 c001d28:	b023883a 	mov	r17,r22
 c001d2c:	050001c4 	movi	r20,7
 c001d30:	902d883a 	mov	r22,r18
 c001d34:	8025883a 	mov	r18,r16
 c001d38:	dc002d17 	ldw	r16,180(sp)
 c001d3c:	00000306 	br	c001d4c <___svfprintf_internal_r+0xfc4>
 c001d40:	8c7ffc04 	addi	r17,r17,-16
 c001d44:	42000204 	addi	r8,r8,8
 c001d48:	e440110e 	bge	fp,r17,c001d90 <___svfprintf_internal_r+0x1008>
 c001d4c:	18c00404 	addi	r3,r3,16
 c001d50:	10800044 	addi	r2,r2,1
 c001d54:	45400015 	stw	r21,0(r8)
 c001d58:	47000115 	stw	fp,4(r8)
 c001d5c:	d8c02015 	stw	r3,128(sp)
 c001d60:	d8801f15 	stw	r2,124(sp)
 c001d64:	a0bff60e 	bge	r20,r2,c001d40 <__alt_data_end+0xfc001d40>
 c001d68:	d9801e04 	addi	r6,sp,120
 c001d6c:	800b883a 	mov	r5,r16
 c001d70:	9809883a 	mov	r4,r19
 c001d74:	c0066640 	call	c006664 <__ssprint_r>
 c001d78:	103cea1e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c001d7c:	8c7ffc04 	addi	r17,r17,-16
 c001d80:	d8c02017 	ldw	r3,128(sp)
 c001d84:	d8801f17 	ldw	r2,124(sp)
 c001d88:	da000404 	addi	r8,sp,16
 c001d8c:	e47fef16 	blt	fp,r17,c001d4c <__alt_data_end+0xfc001d4c>
 c001d90:	9021883a 	mov	r16,r18
 c001d94:	b025883a 	mov	r18,r22
 c001d98:	882d883a 	mov	r22,r17
 c001d9c:	dc403017 	ldw	r17,192(sp)
 c001da0:	d9002c17 	ldw	r4,176(sp)
 c001da4:	1d87883a 	add	r3,r3,r22
 c001da8:	10800044 	addi	r2,r2,1
 c001dac:	41000015 	stw	r4,0(r8)
 c001db0:	45800115 	stw	r22,4(r8)
 c001db4:	d8c02015 	stw	r3,128(sp)
 c001db8:	d8801f15 	stw	r2,124(sp)
 c001dbc:	010001c4 	movi	r4,7
 c001dc0:	20819a16 	blt	r4,r2,c00242c <___svfprintf_internal_r+0x16a4>
 c001dc4:	42000204 	addi	r8,r8,8
 c001dc8:	003e1306 	br	c001618 <__alt_data_end+0xfc001618>
 c001dcc:	d9403317 	ldw	r5,204(sp)
 c001dd0:	00800044 	movi	r2,1
 c001dd4:	18c00044 	addi	r3,r3,1
 c001dd8:	1141710e 	bge	r2,r5,c0023a0 <___svfprintf_internal_r+0x1618>
 c001ddc:	dc401f17 	ldw	r17,124(sp)
 c001de0:	00800044 	movi	r2,1
 c001de4:	40800115 	stw	r2,4(r8)
 c001de8:	8c400044 	addi	r17,r17,1
 c001dec:	44000015 	stw	r16,0(r8)
 c001df0:	d8c02015 	stw	r3,128(sp)
 c001df4:	dc401f15 	stw	r17,124(sp)
 c001df8:	008001c4 	movi	r2,7
 c001dfc:	14417416 	blt	r2,r17,c0023d0 <___svfprintf_internal_r+0x1648>
 c001e00:	42000204 	addi	r8,r8,8
 c001e04:	d8803817 	ldw	r2,224(sp)
 c001e08:	d9003417 	ldw	r4,208(sp)
 c001e0c:	8c400044 	addi	r17,r17,1
 c001e10:	10c7883a 	add	r3,r2,r3
 c001e14:	40800115 	stw	r2,4(r8)
 c001e18:	41000015 	stw	r4,0(r8)
 c001e1c:	d8c02015 	stw	r3,128(sp)
 c001e20:	dc401f15 	stw	r17,124(sp)
 c001e24:	008001c4 	movi	r2,7
 c001e28:	14417216 	blt	r2,r17,c0023f4 <___svfprintf_internal_r+0x166c>
 c001e2c:	45800204 	addi	r22,r8,8
 c001e30:	d9003617 	ldw	r4,216(sp)
 c001e34:	d9403717 	ldw	r5,220(sp)
 c001e38:	000d883a 	mov	r6,zero
 c001e3c:	000f883a 	mov	r7,zero
 c001e40:	d8c03d15 	stw	r3,244(sp)
 c001e44:	c00a8140 	call	c00a814 <__eqdf2>
 c001e48:	d8c03d17 	ldw	r3,244(sp)
 c001e4c:	1000b326 	beq	r2,zero,c00211c <___svfprintf_internal_r+0x1394>
 c001e50:	d9403317 	ldw	r5,204(sp)
 c001e54:	84000044 	addi	r16,r16,1
 c001e58:	8c400044 	addi	r17,r17,1
 c001e5c:	28bfffc4 	addi	r2,r5,-1
 c001e60:	1887883a 	add	r3,r3,r2
 c001e64:	b0800115 	stw	r2,4(r22)
 c001e68:	b4000015 	stw	r16,0(r22)
 c001e6c:	d8c02015 	stw	r3,128(sp)
 c001e70:	dc401f15 	stw	r17,124(sp)
 c001e74:	008001c4 	movi	r2,7
 c001e78:	1440d216 	blt	r2,r17,c0021c4 <___svfprintf_internal_r+0x143c>
 c001e7c:	b5800204 	addi	r22,r22,8
 c001e80:	d9003b17 	ldw	r4,236(sp)
 c001e84:	df0022c4 	addi	fp,sp,139
 c001e88:	8c400044 	addi	r17,r17,1
 c001e8c:	20c7883a 	add	r3,r4,r3
 c001e90:	b7000015 	stw	fp,0(r22)
 c001e94:	b1000115 	stw	r4,4(r22)
 c001e98:	d8c02015 	stw	r3,128(sp)
 c001e9c:	dc401f15 	stw	r17,124(sp)
 c001ea0:	008001c4 	movi	r2,7
 c001ea4:	14400e16 	blt	r2,r17,c001ee0 <___svfprintf_internal_r+0x1158>
 c001ea8:	b2000204 	addi	r8,r22,8
 c001eac:	003e1a06 	br	c001718 <__alt_data_end+0xfc001718>
 c001eb0:	01030074 	movhi	r4,3073
 c001eb4:	2138a384 	addi	r4,r4,-7538
 c001eb8:	d9002c15 	stw	r4,176(sp)
 c001ebc:	d9002c17 	ldw	r4,176(sp)
 c001ec0:	1c07883a 	add	r3,r3,r16
 c001ec4:	44000115 	stw	r16,4(r8)
 c001ec8:	41000015 	stw	r4,0(r8)
 c001ecc:	10800044 	addi	r2,r2,1
 c001ed0:	d8c02015 	stw	r3,128(sp)
 c001ed4:	d8801f15 	stw	r2,124(sp)
 c001ed8:	010001c4 	movi	r4,7
 c001edc:	20be0d0e 	bge	r4,r2,c001714 <__alt_data_end+0xfc001714>
 c001ee0:	d9402d17 	ldw	r5,180(sp)
 c001ee4:	d9801e04 	addi	r6,sp,120
 c001ee8:	9809883a 	mov	r4,r19
 c001eec:	c0066640 	call	c006664 <__ssprint_r>
 c001ef0:	103c8c1e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c001ef4:	d8c02017 	ldw	r3,128(sp)
 c001ef8:	da000404 	addi	r8,sp,16
 c001efc:	003e0606 	br	c001718 <__alt_data_end+0xfc001718>
 c001f00:	d9402d17 	ldw	r5,180(sp)
 c001f04:	d9801e04 	addi	r6,sp,120
 c001f08:	9809883a 	mov	r4,r19
 c001f0c:	c0066640 	call	c006664 <__ssprint_r>
 c001f10:	103e3d26 	beq	r2,zero,c001808 <__alt_data_end+0xfc001808>
 c001f14:	003c8306 	br	c001124 <__alt_data_end+0xfc001124>
 c001f18:	d9402d17 	ldw	r5,180(sp)
 c001f1c:	d9801e04 	addi	r6,sp,120
 c001f20:	9809883a 	mov	r4,r19
 c001f24:	c0066640 	call	c006664 <__ssprint_r>
 c001f28:	103c7e1e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c001f2c:	d8c02017 	ldw	r3,128(sp)
 c001f30:	da000404 	addi	r8,sp,16
 c001f34:	003deb06 	br	c0016e4 <__alt_data_end+0xfc0016e4>
 c001f38:	d9402d17 	ldw	r5,180(sp)
 c001f3c:	d9801e04 	addi	r6,sp,120
 c001f40:	9809883a 	mov	r4,r19
 c001f44:	c0066640 	call	c006664 <__ssprint_r>
 c001f48:	103c761e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c001f4c:	d8c02017 	ldw	r3,128(sp)
 c001f50:	da000404 	addi	r8,sp,16
 c001f54:	003d9f06 	br	c0015d4 <__alt_data_end+0xfc0015d4>
 c001f58:	d9402d17 	ldw	r5,180(sp)
 c001f5c:	d9801e04 	addi	r6,sp,120
 c001f60:	9809883a 	mov	r4,r19
 c001f64:	c0066640 	call	c006664 <__ssprint_r>
 c001f68:	103c6e1e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c001f6c:	d8c02017 	ldw	r3,128(sp)
 c001f70:	da000404 	addi	r8,sp,16
 c001f74:	003da506 	br	c00160c <__alt_data_end+0xfc00160c>
 c001f78:	d9402a17 	ldw	r5,168(sp)
 c001f7c:	d8002785 	stb	zero,158(sp)
 c001f80:	283f0816 	blt	r5,zero,c001ba4 <__alt_data_end+0xfc001ba4>
 c001f84:	00ffdfc4 	movi	r3,-129
 c001f88:	a584b03a 	or	r2,r20,r22
 c001f8c:	90e4703a 	and	r18,r18,r3
 c001f90:	103c5126 	beq	r2,zero,c0010d8 <__alt_data_end+0xfc0010d8>
 c001f94:	0039883a 	mov	fp,zero
 c001f98:	003e5a06 	br	c001904 <__alt_data_end+0xfc001904>
 c001f9c:	9080040c 	andi	r2,r18,16
 c001fa0:	10013d26 	beq	r2,zero,c002498 <___svfprintf_internal_r+0x1710>
 c001fa4:	d8c02e17 	ldw	r3,184(sp)
 c001fa8:	d9002a17 	ldw	r4,168(sp)
 c001fac:	d8002785 	stb	zero,158(sp)
 c001fb0:	18800104 	addi	r2,r3,4
 c001fb4:	1d000017 	ldw	r20,0(r3)
 c001fb8:	002d883a 	mov	r22,zero
 c001fbc:	20013f16 	blt	r4,zero,c0024bc <___svfprintf_internal_r+0x1734>
 c001fc0:	00ffdfc4 	movi	r3,-129
 c001fc4:	d8802e15 	stw	r2,184(sp)
 c001fc8:	90e4703a 	and	r18,r18,r3
 c001fcc:	a03d0926 	beq	r20,zero,c0013f4 <__alt_data_end+0xfc0013f4>
 c001fd0:	0039883a 	mov	fp,zero
 c001fd4:	003d0c06 	br	c001408 <__alt_data_end+0xfc001408>
 c001fd8:	dc402617 	ldw	r17,152(sp)
 c001fdc:	0441830e 	bge	zero,r17,c0025ec <___svfprintf_internal_r+0x1864>
 c001fe0:	dc403217 	ldw	r17,200(sp)
 c001fe4:	d8803317 	ldw	r2,204(sp)
 c001fe8:	1440010e 	bge	r2,r17,c001ff0 <___svfprintf_internal_r+0x1268>
 c001fec:	1023883a 	mov	r17,r2
 c001ff0:	04400a0e 	bge	zero,r17,c00201c <___svfprintf_internal_r+0x1294>
 c001ff4:	d8801f17 	ldw	r2,124(sp)
 c001ff8:	1c47883a 	add	r3,r3,r17
 c001ffc:	44000015 	stw	r16,0(r8)
 c002000:	10800044 	addi	r2,r2,1
 c002004:	44400115 	stw	r17,4(r8)
 c002008:	d8c02015 	stw	r3,128(sp)
 c00200c:	d8801f15 	stw	r2,124(sp)
 c002010:	010001c4 	movi	r4,7
 c002014:	20827516 	blt	r4,r2,c0029ec <___svfprintf_internal_r+0x1c64>
 c002018:	42000204 	addi	r8,r8,8
 c00201c:	88027b16 	blt	r17,zero,c002a0c <___svfprintf_internal_r+0x1c84>
 c002020:	d9003217 	ldw	r4,200(sp)
 c002024:	2463c83a 	sub	r17,r4,r17
 c002028:	0440990e 	bge	zero,r17,c002290 <___svfprintf_internal_r+0x1508>
 c00202c:	05800404 	movi	r22,16
 c002030:	d8801f17 	ldw	r2,124(sp)
 c002034:	b441530e 	bge	r22,r17,c002584 <___svfprintf_internal_r+0x17fc>
 c002038:	01030074 	movhi	r4,3073
 c00203c:	2138a384 	addi	r4,r4,-7538
 c002040:	d9002c15 	stw	r4,176(sp)
 c002044:	070001c4 	movi	fp,7
 c002048:	dd002d17 	ldw	r20,180(sp)
 c00204c:	00000306 	br	c00205c <___svfprintf_internal_r+0x12d4>
 c002050:	42000204 	addi	r8,r8,8
 c002054:	8c7ffc04 	addi	r17,r17,-16
 c002058:	b4414d0e 	bge	r22,r17,c002590 <___svfprintf_internal_r+0x1808>
 c00205c:	18c00404 	addi	r3,r3,16
 c002060:	10800044 	addi	r2,r2,1
 c002064:	45400015 	stw	r21,0(r8)
 c002068:	45800115 	stw	r22,4(r8)
 c00206c:	d8c02015 	stw	r3,128(sp)
 c002070:	d8801f15 	stw	r2,124(sp)
 c002074:	e0bff60e 	bge	fp,r2,c002050 <__alt_data_end+0xfc002050>
 c002078:	d9801e04 	addi	r6,sp,120
 c00207c:	a00b883a 	mov	r5,r20
 c002080:	9809883a 	mov	r4,r19
 c002084:	c0066640 	call	c006664 <__ssprint_r>
 c002088:	103c261e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c00208c:	d8c02017 	ldw	r3,128(sp)
 c002090:	d8801f17 	ldw	r2,124(sp)
 c002094:	da000404 	addi	r8,sp,16
 c002098:	003fee06 	br	c002054 <__alt_data_end+0xfc002054>
 c00209c:	d9402d17 	ldw	r5,180(sp)
 c0020a0:	d9801e04 	addi	r6,sp,120
 c0020a4:	9809883a 	mov	r4,r19
 c0020a8:	c0066640 	call	c006664 <__ssprint_r>
 c0020ac:	103c1d1e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c0020b0:	d8c02017 	ldw	r3,128(sp)
 c0020b4:	df002787 	ldb	fp,158(sp)
 c0020b8:	da000404 	addi	r8,sp,16
 c0020bc:	003d3806 	br	c0015a0 <__alt_data_end+0xfc0015a0>
 c0020c0:	9080040c 	andi	r2,r18,16
 c0020c4:	10005c26 	beq	r2,zero,c002238 <___svfprintf_internal_r+0x14b0>
 c0020c8:	d8c02e17 	ldw	r3,184(sp)
 c0020cc:	d9002a17 	ldw	r4,168(sp)
 c0020d0:	d8002785 	stb	zero,158(sp)
 c0020d4:	18800104 	addi	r2,r3,4
 c0020d8:	1d000017 	ldw	r20,0(r3)
 c0020dc:	002d883a 	mov	r22,zero
 c0020e0:	20005e16 	blt	r4,zero,c00225c <___svfprintf_internal_r+0x14d4>
 c0020e4:	00ffdfc4 	movi	r3,-129
 c0020e8:	d8802e15 	stw	r2,184(sp)
 c0020ec:	90e4703a 	and	r18,r18,r3
 c0020f0:	0039883a 	mov	fp,zero
 c0020f4:	a03ddf26 	beq	r20,zero,c001874 <__alt_data_end+0xfc001874>
 c0020f8:	00800244 	movi	r2,9
 c0020fc:	153c8e36 	bltu	r2,r20,c001338 <__alt_data_end+0xfc001338>
 c002100:	a5000c04 	addi	r20,r20,48
 c002104:	dc001dc4 	addi	r16,sp,119
 c002108:	dd001dc5 	stb	r20,119(sp)
 c00210c:	d8c02817 	ldw	r3,160(sp)
 c002110:	1c07c83a 	sub	r3,r3,r16
 c002114:	d8c02b15 	stw	r3,172(sp)
 c002118:	003cd306 	br	c001468 <__alt_data_end+0xfc001468>
 c00211c:	d8803317 	ldw	r2,204(sp)
 c002120:	143fffc4 	addi	r16,r2,-1
 c002124:	043f560e 	bge	zero,r16,c001e80 <__alt_data_end+0xfc001e80>
 c002128:	07000404 	movi	fp,16
 c00212c:	e403530e 	bge	fp,r16,c002e7c <___svfprintf_internal_r+0x20f4>
 c002130:	01430074 	movhi	r5,3073
 c002134:	2978a384 	addi	r5,r5,-7538
 c002138:	d9402c15 	stw	r5,176(sp)
 c00213c:	01c001c4 	movi	r7,7
 c002140:	dd002d17 	ldw	r20,180(sp)
 c002144:	00000306 	br	c002154 <___svfprintf_internal_r+0x13cc>
 c002148:	843ffc04 	addi	r16,r16,-16
 c00214c:	b5800204 	addi	r22,r22,8
 c002150:	e400130e 	bge	fp,r16,c0021a0 <___svfprintf_internal_r+0x1418>
 c002154:	18c00404 	addi	r3,r3,16
 c002158:	8c400044 	addi	r17,r17,1
 c00215c:	b5400015 	stw	r21,0(r22)
 c002160:	b7000115 	stw	fp,4(r22)
 c002164:	d8c02015 	stw	r3,128(sp)
 c002168:	dc401f15 	stw	r17,124(sp)
 c00216c:	3c7ff60e 	bge	r7,r17,c002148 <__alt_data_end+0xfc002148>
 c002170:	d9801e04 	addi	r6,sp,120
 c002174:	a00b883a 	mov	r5,r20
 c002178:	9809883a 	mov	r4,r19
 c00217c:	d9c03d15 	stw	r7,244(sp)
 c002180:	c0066640 	call	c006664 <__ssprint_r>
 c002184:	d9c03d17 	ldw	r7,244(sp)
 c002188:	103be61e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c00218c:	843ffc04 	addi	r16,r16,-16
 c002190:	d8c02017 	ldw	r3,128(sp)
 c002194:	dc401f17 	ldw	r17,124(sp)
 c002198:	dd800404 	addi	r22,sp,16
 c00219c:	e43fed16 	blt	fp,r16,c002154 <__alt_data_end+0xfc002154>
 c0021a0:	d8802c17 	ldw	r2,176(sp)
 c0021a4:	1c07883a 	add	r3,r3,r16
 c0021a8:	8c400044 	addi	r17,r17,1
 c0021ac:	b0800015 	stw	r2,0(r22)
 c0021b0:	b4000115 	stw	r16,4(r22)
 c0021b4:	d8c02015 	stw	r3,128(sp)
 c0021b8:	dc401f15 	stw	r17,124(sp)
 c0021bc:	008001c4 	movi	r2,7
 c0021c0:	147f2e0e 	bge	r2,r17,c001e7c <__alt_data_end+0xfc001e7c>
 c0021c4:	d9402d17 	ldw	r5,180(sp)
 c0021c8:	d9801e04 	addi	r6,sp,120
 c0021cc:	9809883a 	mov	r4,r19
 c0021d0:	c0066640 	call	c006664 <__ssprint_r>
 c0021d4:	103bd31e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c0021d8:	d8c02017 	ldw	r3,128(sp)
 c0021dc:	dc401f17 	ldw	r17,124(sp)
 c0021e0:	dd800404 	addi	r22,sp,16
 c0021e4:	003f2606 	br	c001e80 <__alt_data_end+0xfc001e80>
 c0021e8:	9080040c 	andi	r2,r18,16
 c0021ec:	1000c326 	beq	r2,zero,c0024fc <___svfprintf_internal_r+0x1774>
 c0021f0:	d9402e17 	ldw	r5,184(sp)
 c0021f4:	2d000017 	ldw	r20,0(r5)
 c0021f8:	29400104 	addi	r5,r5,4
 c0021fc:	d9402e15 	stw	r5,184(sp)
 c002200:	a02dd7fa 	srai	r22,r20,31
 c002204:	b005883a 	mov	r2,r22
 c002208:	103c430e 	bge	r2,zero,c001318 <__alt_data_end+0xfc001318>
 c00220c:	d9402a17 	ldw	r5,168(sp)
 c002210:	0529c83a 	sub	r20,zero,r20
 c002214:	07000b44 	movi	fp,45
 c002218:	a004c03a 	cmpne	r2,r20,zero
 c00221c:	05adc83a 	sub	r22,zero,r22
 c002220:	df002785 	stb	fp,158(sp)
 c002224:	b0adc83a 	sub	r22,r22,r2
 c002228:	28022e16 	blt	r5,zero,c002ae4 <___svfprintf_internal_r+0x1d5c>
 c00222c:	00bfdfc4 	movi	r2,-129
 c002230:	90a4703a 	and	r18,r18,r2
 c002234:	003c3f06 	br	c001334 <__alt_data_end+0xfc001334>
 c002238:	9080100c 	andi	r2,r18,64
 c00223c:	d8002785 	stb	zero,158(sp)
 c002240:	10012526 	beq	r2,zero,c0026d8 <___svfprintf_internal_r+0x1950>
 c002244:	d9402e17 	ldw	r5,184(sp)
 c002248:	d8c02a17 	ldw	r3,168(sp)
 c00224c:	002d883a 	mov	r22,zero
 c002250:	28800104 	addi	r2,r5,4
 c002254:	2d00000b 	ldhu	r20,0(r5)
 c002258:	183fa20e 	bge	r3,zero,c0020e4 <__alt_data_end+0xfc0020e4>
 c00225c:	d8802e15 	stw	r2,184(sp)
 c002260:	0039883a 	mov	fp,zero
 c002264:	a584b03a 	or	r2,r20,r22
 c002268:	103c321e 	bne	r2,zero,c001334 <__alt_data_end+0xfc001334>
 c00226c:	00800044 	movi	r2,1
 c002270:	003e5006 	br	c001bb4 <__alt_data_end+0xfc001bb4>
 c002274:	d9402d17 	ldw	r5,180(sp)
 c002278:	d9801e04 	addi	r6,sp,120
 c00227c:	9809883a 	mov	r4,r19
 c002280:	c0066640 	call	c006664 <__ssprint_r>
 c002284:	103ba71e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c002288:	d8c02017 	ldw	r3,128(sp)
 c00228c:	da000404 	addi	r8,sp,16
 c002290:	d9003217 	ldw	r4,200(sp)
 c002294:	d8802617 	ldw	r2,152(sp)
 c002298:	d9403317 	ldw	r5,204(sp)
 c00229c:	8123883a 	add	r17,r16,r4
 c0022a0:	11400216 	blt	r2,r5,c0022ac <___svfprintf_internal_r+0x1524>
 c0022a4:	9100004c 	andi	r4,r18,1
 c0022a8:	20000d26 	beq	r4,zero,c0022e0 <___svfprintf_internal_r+0x1558>
 c0022ac:	d9003817 	ldw	r4,224(sp)
 c0022b0:	d9403417 	ldw	r5,208(sp)
 c0022b4:	1907883a 	add	r3,r3,r4
 c0022b8:	d9001f17 	ldw	r4,124(sp)
 c0022bc:	41400015 	stw	r5,0(r8)
 c0022c0:	d9403817 	ldw	r5,224(sp)
 c0022c4:	21000044 	addi	r4,r4,1
 c0022c8:	d8c02015 	stw	r3,128(sp)
 c0022cc:	41400115 	stw	r5,4(r8)
 c0022d0:	d9001f15 	stw	r4,124(sp)
 c0022d4:	014001c4 	movi	r5,7
 c0022d8:	2901dc16 	blt	r5,r4,c002a4c <___svfprintf_internal_r+0x1cc4>
 c0022dc:	42000204 	addi	r8,r8,8
 c0022e0:	d9003317 	ldw	r4,204(sp)
 c0022e4:	8121883a 	add	r16,r16,r4
 c0022e8:	2085c83a 	sub	r2,r4,r2
 c0022ec:	8461c83a 	sub	r16,r16,r17
 c0022f0:	1400010e 	bge	r2,r16,c0022f8 <___svfprintf_internal_r+0x1570>
 c0022f4:	1021883a 	mov	r16,r2
 c0022f8:	04000a0e 	bge	zero,r16,c002324 <___svfprintf_internal_r+0x159c>
 c0022fc:	d9001f17 	ldw	r4,124(sp)
 c002300:	1c07883a 	add	r3,r3,r16
 c002304:	44400015 	stw	r17,0(r8)
 c002308:	21000044 	addi	r4,r4,1
 c00230c:	44000115 	stw	r16,4(r8)
 c002310:	d8c02015 	stw	r3,128(sp)
 c002314:	d9001f15 	stw	r4,124(sp)
 c002318:	014001c4 	movi	r5,7
 c00231c:	2901e616 	blt	r5,r4,c002ab8 <___svfprintf_internal_r+0x1d30>
 c002320:	42000204 	addi	r8,r8,8
 c002324:	8001f616 	blt	r16,zero,c002b00 <___svfprintf_internal_r+0x1d78>
 c002328:	1421c83a 	sub	r16,r2,r16
 c00232c:	043cfa0e 	bge	zero,r16,c001718 <__alt_data_end+0xfc001718>
 c002330:	04400404 	movi	r17,16
 c002334:	d8801f17 	ldw	r2,124(sp)
 c002338:	8c3edd0e 	bge	r17,r16,c001eb0 <__alt_data_end+0xfc001eb0>
 c00233c:	01430074 	movhi	r5,3073
 c002340:	2978a384 	addi	r5,r5,-7538
 c002344:	d9402c15 	stw	r5,176(sp)
 c002348:	058001c4 	movi	r22,7
 c00234c:	dd002d17 	ldw	r20,180(sp)
 c002350:	00000306 	br	c002360 <___svfprintf_internal_r+0x15d8>
 c002354:	42000204 	addi	r8,r8,8
 c002358:	843ffc04 	addi	r16,r16,-16
 c00235c:	8c3ed70e 	bge	r17,r16,c001ebc <__alt_data_end+0xfc001ebc>
 c002360:	18c00404 	addi	r3,r3,16
 c002364:	10800044 	addi	r2,r2,1
 c002368:	45400015 	stw	r21,0(r8)
 c00236c:	44400115 	stw	r17,4(r8)
 c002370:	d8c02015 	stw	r3,128(sp)
 c002374:	d8801f15 	stw	r2,124(sp)
 c002378:	b0bff60e 	bge	r22,r2,c002354 <__alt_data_end+0xfc002354>
 c00237c:	d9801e04 	addi	r6,sp,120
 c002380:	a00b883a 	mov	r5,r20
 c002384:	9809883a 	mov	r4,r19
 c002388:	c0066640 	call	c006664 <__ssprint_r>
 c00238c:	103b651e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c002390:	d8c02017 	ldw	r3,128(sp)
 c002394:	d8801f17 	ldw	r2,124(sp)
 c002398:	da000404 	addi	r8,sp,16
 c00239c:	003fee06 	br	c002358 <__alt_data_end+0xfc002358>
 c0023a0:	9088703a 	and	r4,r18,r2
 c0023a4:	203e8d1e 	bne	r4,zero,c001ddc <__alt_data_end+0xfc001ddc>
 c0023a8:	dc401f17 	ldw	r17,124(sp)
 c0023ac:	40800115 	stw	r2,4(r8)
 c0023b0:	44000015 	stw	r16,0(r8)
 c0023b4:	8c400044 	addi	r17,r17,1
 c0023b8:	d8c02015 	stw	r3,128(sp)
 c0023bc:	dc401f15 	stw	r17,124(sp)
 c0023c0:	008001c4 	movi	r2,7
 c0023c4:	147f7f16 	blt	r2,r17,c0021c4 <__alt_data_end+0xfc0021c4>
 c0023c8:	45800204 	addi	r22,r8,8
 c0023cc:	003eac06 	br	c001e80 <__alt_data_end+0xfc001e80>
 c0023d0:	d9402d17 	ldw	r5,180(sp)
 c0023d4:	d9801e04 	addi	r6,sp,120
 c0023d8:	9809883a 	mov	r4,r19
 c0023dc:	c0066640 	call	c006664 <__ssprint_r>
 c0023e0:	103b501e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c0023e4:	d8c02017 	ldw	r3,128(sp)
 c0023e8:	dc401f17 	ldw	r17,124(sp)
 c0023ec:	da000404 	addi	r8,sp,16
 c0023f0:	003e8406 	br	c001e04 <__alt_data_end+0xfc001e04>
 c0023f4:	d9402d17 	ldw	r5,180(sp)
 c0023f8:	d9801e04 	addi	r6,sp,120
 c0023fc:	9809883a 	mov	r4,r19
 c002400:	c0066640 	call	c006664 <__ssprint_r>
 c002404:	103b471e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c002408:	d8c02017 	ldw	r3,128(sp)
 c00240c:	dc401f17 	ldw	r17,124(sp)
 c002410:	dd800404 	addi	r22,sp,16
 c002414:	003e8606 	br	c001e30 <__alt_data_end+0xfc001e30>
 c002418:	0029883a 	mov	r20,zero
 c00241c:	a5000c04 	addi	r20,r20,48
 c002420:	dc001dc4 	addi	r16,sp,119
 c002424:	dd001dc5 	stb	r20,119(sp)
 c002428:	003f3806 	br	c00210c <__alt_data_end+0xfc00210c>
 c00242c:	d9402d17 	ldw	r5,180(sp)
 c002430:	d9801e04 	addi	r6,sp,120
 c002434:	9809883a 	mov	r4,r19
 c002438:	c0066640 	call	c006664 <__ssprint_r>
 c00243c:	103b391e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c002440:	d8c02017 	ldw	r3,128(sp)
 c002444:	da000404 	addi	r8,sp,16
 c002448:	003c7306 	br	c001618 <__alt_data_end+0xfc001618>
 c00244c:	d9003617 	ldw	r4,216(sp)
 c002450:	d9403717 	ldw	r5,220(sp)
 c002454:	da003e15 	stw	r8,248(sp)
 c002458:	c0064c00 	call	c0064c0 <__fpclassifyd>
 c00245c:	da003e17 	ldw	r8,248(sp)
 c002460:	1000bd1e 	bne	r2,zero,c002758 <___svfprintf_internal_r+0x19d0>
 c002464:	008011c4 	movi	r2,71
 c002468:	14411e0e 	bge	r2,r17,c0028e4 <___svfprintf_internal_r+0x1b5c>
 c00246c:	04030074 	movhi	r16,3073
 c002470:	84389604 	addi	r16,r16,-7592
 c002474:	00c000c4 	movi	r3,3
 c002478:	00bfdfc4 	movi	r2,-129
 c00247c:	d8c02915 	stw	r3,164(sp)
 c002480:	90a4703a 	and	r18,r18,r2
 c002484:	df002783 	ldbu	fp,158(sp)
 c002488:	d8c02b15 	stw	r3,172(sp)
 c00248c:	d8002a15 	stw	zero,168(sp)
 c002490:	d8003215 	stw	zero,200(sp)
 c002494:	003bfa06 	br	c001480 <__alt_data_end+0xfc001480>
 c002498:	9080100c 	andi	r2,r18,64
 c00249c:	d8002785 	stb	zero,158(sp)
 c0024a0:	10009426 	beq	r2,zero,c0026f4 <___svfprintf_internal_r+0x196c>
 c0024a4:	d9402e17 	ldw	r5,184(sp)
 c0024a8:	d8c02a17 	ldw	r3,168(sp)
 c0024ac:	002d883a 	mov	r22,zero
 c0024b0:	28800104 	addi	r2,r5,4
 c0024b4:	2d00000b 	ldhu	r20,0(r5)
 c0024b8:	183ec10e 	bge	r3,zero,c001fc0 <__alt_data_end+0xfc001fc0>
 c0024bc:	a586b03a 	or	r3,r20,r22
 c0024c0:	d8802e15 	stw	r2,184(sp)
 c0024c4:	183ec21e 	bne	r3,zero,c001fd0 <__alt_data_end+0xfc001fd0>
 c0024c8:	0039883a 	mov	fp,zero
 c0024cc:	0005883a 	mov	r2,zero
 c0024d0:	003db806 	br	c001bb4 <__alt_data_end+0xfc001bb4>
 c0024d4:	d8c02e17 	ldw	r3,184(sp)
 c0024d8:	d9002e17 	ldw	r4,184(sp)
 c0024dc:	d9402e17 	ldw	r5,184(sp)
 c0024e0:	18c00017 	ldw	r3,0(r3)
 c0024e4:	21000117 	ldw	r4,4(r4)
 c0024e8:	29400204 	addi	r5,r5,8
 c0024ec:	d8c03615 	stw	r3,216(sp)
 c0024f0:	d9003715 	stw	r4,220(sp)
 c0024f4:	d9402e15 	stw	r5,184(sp)
 c0024f8:	003b5a06 	br	c001264 <__alt_data_end+0xfc001264>
 c0024fc:	9080100c 	andi	r2,r18,64
 c002500:	10010726 	beq	r2,zero,c002920 <___svfprintf_internal_r+0x1b98>
 c002504:	d8802e17 	ldw	r2,184(sp)
 c002508:	1500000f 	ldh	r20,0(r2)
 c00250c:	10800104 	addi	r2,r2,4
 c002510:	d8802e15 	stw	r2,184(sp)
 c002514:	a02dd7fa 	srai	r22,r20,31
 c002518:	b005883a 	mov	r2,r22
 c00251c:	003b7d06 	br	c001314 <__alt_data_end+0xfc001314>
 c002520:	9080100c 	andi	r2,r18,64
 c002524:	10010526 	beq	r2,zero,c00293c <___svfprintf_internal_r+0x1bb4>
 c002528:	d8c02e17 	ldw	r3,184(sp)
 c00252c:	002d883a 	mov	r22,zero
 c002530:	1d00000b 	ldhu	r20,0(r3)
 c002534:	18c00104 	addi	r3,r3,4
 c002538:	d8c02e15 	stw	r3,184(sp)
 c00253c:	003ce206 	br	c0018c8 <__alt_data_end+0xfc0018c8>
 c002540:	bc400007 	ldb	r17,0(r23)
 c002544:	003a6506 	br	c000edc <__alt_data_end+0xfc000edc>
 c002548:	9080040c 	andi	r2,r18,16
 c00254c:	10010126 	beq	r2,zero,c002954 <___svfprintf_internal_r+0x1bcc>
 c002550:	d8c02e17 	ldw	r3,184(sp)
 c002554:	d9002f17 	ldw	r4,188(sp)
 c002558:	18800017 	ldw	r2,0(r3)
 c00255c:	18c00104 	addi	r3,r3,4
 c002560:	d8c02e15 	stw	r3,184(sp)
 c002564:	11000015 	stw	r4,0(r2)
 c002568:	003a3206 	br	c000e34 <__alt_data_end+0xfc000e34>
 c00256c:	d9002a17 	ldw	r4,168(sp)
 c002570:	d8002785 	stb	zero,158(sp)
 c002574:	203d8d16 	blt	r4,zero,c001bac <__alt_data_end+0xfc001bac>
 c002578:	00bfdfc4 	movi	r2,-129
 c00257c:	90a4703a 	and	r18,r18,r2
 c002580:	003ad506 	br	c0010d8 <__alt_data_end+0xfc0010d8>
 c002584:	01430074 	movhi	r5,3073
 c002588:	2978a384 	addi	r5,r5,-7538
 c00258c:	d9402c15 	stw	r5,176(sp)
 c002590:	d9402c17 	ldw	r5,176(sp)
 c002594:	1c47883a 	add	r3,r3,r17
 c002598:	10800044 	addi	r2,r2,1
 c00259c:	41400015 	stw	r5,0(r8)
 c0025a0:	44400115 	stw	r17,4(r8)
 c0025a4:	d8c02015 	stw	r3,128(sp)
 c0025a8:	d8801f15 	stw	r2,124(sp)
 c0025ac:	010001c4 	movi	r4,7
 c0025b0:	20bf3016 	blt	r4,r2,c002274 <__alt_data_end+0xfc002274>
 c0025b4:	42000204 	addi	r8,r8,8
 c0025b8:	003f3506 	br	c002290 <__alt_data_end+0xfc002290>
 c0025bc:	01030074 	movhi	r4,3073
 c0025c0:	2138a384 	addi	r4,r4,-7538
 c0025c4:	d9002c15 	stw	r4,176(sp)
 c0025c8:	003c3c06 	br	c0016bc <__alt_data_end+0xfc0016bc>
 c0025cc:	d9402d17 	ldw	r5,180(sp)
 c0025d0:	d9801e04 	addi	r6,sp,120
 c0025d4:	9809883a 	mov	r4,r19
 c0025d8:	c0066640 	call	c006664 <__ssprint_r>
 c0025dc:	103ad11e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c0025e0:	d8c02017 	ldw	r3,128(sp)
 c0025e4:	da000404 	addi	r8,sp,16
 c0025e8:	003d9306 	br	c001c38 <__alt_data_end+0xfc001c38>
 c0025ec:	d8801f17 	ldw	r2,124(sp)
 c0025f0:	01430074 	movhi	r5,3073
 c0025f4:	01000044 	movi	r4,1
 c0025f8:	18c00044 	addi	r3,r3,1
 c0025fc:	10800044 	addi	r2,r2,1
 c002600:	2978a304 	addi	r5,r5,-7540
 c002604:	41000115 	stw	r4,4(r8)
 c002608:	41400015 	stw	r5,0(r8)
 c00260c:	d8c02015 	stw	r3,128(sp)
 c002610:	d8801f15 	stw	r2,124(sp)
 c002614:	010001c4 	movi	r4,7
 c002618:	2080b516 	blt	r4,r2,c0028f0 <___svfprintf_internal_r+0x1b68>
 c00261c:	42000204 	addi	r8,r8,8
 c002620:	8800041e 	bne	r17,zero,c002634 <___svfprintf_internal_r+0x18ac>
 c002624:	d8803317 	ldw	r2,204(sp)
 c002628:	1000021e 	bne	r2,zero,c002634 <___svfprintf_internal_r+0x18ac>
 c00262c:	9080004c 	andi	r2,r18,1
 c002630:	103c3926 	beq	r2,zero,c001718 <__alt_data_end+0xfc001718>
 c002634:	d9003817 	ldw	r4,224(sp)
 c002638:	d8801f17 	ldw	r2,124(sp)
 c00263c:	d9403417 	ldw	r5,208(sp)
 c002640:	20c7883a 	add	r3,r4,r3
 c002644:	10800044 	addi	r2,r2,1
 c002648:	41000115 	stw	r4,4(r8)
 c00264c:	41400015 	stw	r5,0(r8)
 c002650:	d8c02015 	stw	r3,128(sp)
 c002654:	d8801f15 	stw	r2,124(sp)
 c002658:	010001c4 	movi	r4,7
 c00265c:	20818016 	blt	r4,r2,c002c60 <___svfprintf_internal_r+0x1ed8>
 c002660:	42000204 	addi	r8,r8,8
 c002664:	0463c83a 	sub	r17,zero,r17
 c002668:	0440cb0e 	bge	zero,r17,c002998 <___svfprintf_internal_r+0x1c10>
 c00266c:	05800404 	movi	r22,16
 c002670:	b440e80e 	bge	r22,r17,c002a14 <___svfprintf_internal_r+0x1c8c>
 c002674:	01430074 	movhi	r5,3073
 c002678:	2978a384 	addi	r5,r5,-7538
 c00267c:	d9402c15 	stw	r5,176(sp)
 c002680:	070001c4 	movi	fp,7
 c002684:	dd002d17 	ldw	r20,180(sp)
 c002688:	00000306 	br	c002698 <___svfprintf_internal_r+0x1910>
 c00268c:	42000204 	addi	r8,r8,8
 c002690:	8c7ffc04 	addi	r17,r17,-16
 c002694:	b440e20e 	bge	r22,r17,c002a20 <___svfprintf_internal_r+0x1c98>
 c002698:	18c00404 	addi	r3,r3,16
 c00269c:	10800044 	addi	r2,r2,1
 c0026a0:	45400015 	stw	r21,0(r8)
 c0026a4:	45800115 	stw	r22,4(r8)
 c0026a8:	d8c02015 	stw	r3,128(sp)
 c0026ac:	d8801f15 	stw	r2,124(sp)
 c0026b0:	e0bff60e 	bge	fp,r2,c00268c <__alt_data_end+0xfc00268c>
 c0026b4:	d9801e04 	addi	r6,sp,120
 c0026b8:	a00b883a 	mov	r5,r20
 c0026bc:	9809883a 	mov	r4,r19
 c0026c0:	c0066640 	call	c006664 <__ssprint_r>
 c0026c4:	103a971e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c0026c8:	d8c02017 	ldw	r3,128(sp)
 c0026cc:	d8801f17 	ldw	r2,124(sp)
 c0026d0:	da000404 	addi	r8,sp,16
 c0026d4:	003fee06 	br	c002690 <__alt_data_end+0xfc002690>
 c0026d8:	d9002e17 	ldw	r4,184(sp)
 c0026dc:	d9402a17 	ldw	r5,168(sp)
 c0026e0:	002d883a 	mov	r22,zero
 c0026e4:	20800104 	addi	r2,r4,4
 c0026e8:	25000017 	ldw	r20,0(r4)
 c0026ec:	283e7d0e 	bge	r5,zero,c0020e4 <__alt_data_end+0xfc0020e4>
 c0026f0:	003eda06 	br	c00225c <__alt_data_end+0xfc00225c>
 c0026f4:	d9002e17 	ldw	r4,184(sp)
 c0026f8:	d9402a17 	ldw	r5,168(sp)
 c0026fc:	002d883a 	mov	r22,zero
 c002700:	20800104 	addi	r2,r4,4
 c002704:	25000017 	ldw	r20,0(r4)
 c002708:	283e2d0e 	bge	r5,zero,c001fc0 <__alt_data_end+0xfc001fc0>
 c00270c:	003f6b06 	br	c0024bc <__alt_data_end+0xfc0024bc>
 c002710:	d8c02e15 	stw	r3,184(sp)
 c002714:	0039883a 	mov	fp,zero
 c002718:	003ed206 	br	c002264 <__alt_data_end+0xfc002264>
 c00271c:	bc400043 	ldbu	r17,1(r23)
 c002720:	84000814 	ori	r16,r16,32
 c002724:	bdc00044 	addi	r23,r23,1
 c002728:	8c403fcc 	andi	r17,r17,255
 c00272c:	8c40201c 	xori	r17,r17,128
 c002730:	8c7fe004 	addi	r17,r17,-128
 c002734:	0039e906 	br	c000edc <__alt_data_end+0xfc000edc>
 c002738:	d9402d17 	ldw	r5,180(sp)
 c00273c:	d9801e04 	addi	r6,sp,120
 c002740:	9809883a 	mov	r4,r19
 c002744:	c0066640 	call	c006664 <__ssprint_r>
 c002748:	103a761e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c00274c:	d8c02017 	ldw	r3,128(sp)
 c002750:	da000404 	addi	r8,sp,16
 c002754:	003d4a06 	br	c001c80 <__alt_data_end+0xfc001c80>
 c002758:	d9002a17 	ldw	r4,168(sp)
 c00275c:	05bff7c4 	movi	r22,-33
 c002760:	00bfffc4 	movi	r2,-1
 c002764:	8dac703a 	and	r22,r17,r22
 c002768:	20806a26 	beq	r4,r2,c002914 <___svfprintf_internal_r+0x1b8c>
 c00276c:	008011c4 	movi	r2,71
 c002770:	b0813726 	beq	r22,r2,c002c50 <___svfprintf_internal_r+0x1ec8>
 c002774:	d9003717 	ldw	r4,220(sp)
 c002778:	90c04014 	ori	r3,r18,256
 c00277c:	d8c02c15 	stw	r3,176(sp)
 c002780:	20015d16 	blt	r4,zero,c002cf8 <___svfprintf_internal_r+0x1f70>
 c002784:	dd003717 	ldw	r20,220(sp)
 c002788:	d8002905 	stb	zero,164(sp)
 c00278c:	00801984 	movi	r2,102
 c002790:	88814026 	beq	r17,r2,c002c94 <___svfprintf_internal_r+0x1f0c>
 c002794:	00801184 	movi	r2,70
 c002798:	88817126 	beq	r17,r2,c002d60 <___svfprintf_internal_r+0x1fd8>
 c00279c:	00801144 	movi	r2,69
 c0027a0:	b0816226 	beq	r22,r2,c002d2c <___svfprintf_internal_r+0x1fa4>
 c0027a4:	d8c02a17 	ldw	r3,168(sp)
 c0027a8:	d8802104 	addi	r2,sp,132
 c0027ac:	d8800315 	stw	r2,12(sp)
 c0027b0:	d9403617 	ldw	r5,216(sp)
 c0027b4:	d8802504 	addi	r2,sp,148
 c0027b8:	d8800215 	stw	r2,8(sp)
 c0027bc:	d8802604 	addi	r2,sp,152
 c0027c0:	d8c00015 	stw	r3,0(sp)
 c0027c4:	d8800115 	stw	r2,4(sp)
 c0027c8:	01c00084 	movi	r7,2
 c0027cc:	a00d883a 	mov	r6,r20
 c0027d0:	9809883a 	mov	r4,r19
 c0027d4:	d8c03d15 	stw	r3,244(sp)
 c0027d8:	da003e15 	stw	r8,248(sp)
 c0027dc:	c00326c0 	call	c00326c <_dtoa_r>
 c0027e0:	1021883a 	mov	r16,r2
 c0027e4:	008019c4 	movi	r2,103
 c0027e8:	d8c03d17 	ldw	r3,244(sp)
 c0027ec:	da003e17 	ldw	r8,248(sp)
 c0027f0:	8880e726 	beq	r17,r2,c002b90 <___svfprintf_internal_r+0x1e08>
 c0027f4:	008011c4 	movi	r2,71
 c0027f8:	8880d426 	beq	r17,r2,c002b4c <___svfprintf_internal_r+0x1dc4>
 c0027fc:	80f9883a 	add	fp,r16,r3
 c002800:	d9003617 	ldw	r4,216(sp)
 c002804:	000d883a 	mov	r6,zero
 c002808:	000f883a 	mov	r7,zero
 c00280c:	a00b883a 	mov	r5,r20
 c002810:	da003e15 	stw	r8,248(sp)
 c002814:	c00a8140 	call	c00a814 <__eqdf2>
 c002818:	da003e17 	ldw	r8,248(sp)
 c00281c:	1000e426 	beq	r2,zero,c002bb0 <___svfprintf_internal_r+0x1e28>
 c002820:	d8802117 	ldw	r2,132(sp)
 c002824:	1700062e 	bgeu	r2,fp,c002840 <___svfprintf_internal_r+0x1ab8>
 c002828:	01000c04 	movi	r4,48
 c00282c:	10c00044 	addi	r3,r2,1
 c002830:	d8c02115 	stw	r3,132(sp)
 c002834:	11000005 	stb	r4,0(r2)
 c002838:	d8802117 	ldw	r2,132(sp)
 c00283c:	173ffb36 	bltu	r2,fp,c00282c <__alt_data_end+0xfc00282c>
 c002840:	1405c83a 	sub	r2,r2,r16
 c002844:	d8803315 	stw	r2,204(sp)
 c002848:	008011c4 	movi	r2,71
 c00284c:	b080c526 	beq	r22,r2,c002b64 <___svfprintf_internal_r+0x1ddc>
 c002850:	00801944 	movi	r2,101
 c002854:	1441d80e 	bge	r2,r17,c002fb8 <___svfprintf_internal_r+0x2230>
 c002858:	d8c02617 	ldw	r3,152(sp)
 c00285c:	00801984 	movi	r2,102
 c002860:	d8c03215 	stw	r3,200(sp)
 c002864:	88813426 	beq	r17,r2,c002d38 <___svfprintf_internal_r+0x1fb0>
 c002868:	d8c03217 	ldw	r3,200(sp)
 c00286c:	d9003317 	ldw	r4,204(sp)
 c002870:	19012516 	blt	r3,r4,c002d08 <___svfprintf_internal_r+0x1f80>
 c002874:	9480004c 	andi	r18,r18,1
 c002878:	9001841e 	bne	r18,zero,c002e8c <___svfprintf_internal_r+0x2104>
 c00287c:	1805883a 	mov	r2,r3
 c002880:	1801cb16 	blt	r3,zero,c002fb0 <___svfprintf_internal_r+0x2228>
 c002884:	d8c03217 	ldw	r3,200(sp)
 c002888:	044019c4 	movi	r17,103
 c00288c:	d8c02b15 	stw	r3,172(sp)
 c002890:	df002907 	ldb	fp,164(sp)
 c002894:	e000a61e 	bne	fp,zero,c002b30 <___svfprintf_internal_r+0x1da8>
 c002898:	df002783 	ldbu	fp,158(sp)
 c00289c:	d8802915 	stw	r2,164(sp)
 c0028a0:	dc802c17 	ldw	r18,176(sp)
 c0028a4:	d8002a15 	stw	zero,168(sp)
 c0028a8:	003af506 	br	c001480 <__alt_data_end+0xfc001480>
 c0028ac:	04030074 	movhi	r16,3073
 c0028b0:	84389304 	addi	r16,r16,-7604
 c0028b4:	003a7e06 	br	c0012b0 <__alt_data_end+0xfc0012b0>
 c0028b8:	d9003917 	ldw	r4,228(sp)
 c0028bc:	04001004 	movi	r16,64
 c0028c0:	800b883a 	mov	r5,r16
 c0028c4:	c0049d00 	call	c0049d0 <_malloc_r>
 c0028c8:	d9002d17 	ldw	r4,180(sp)
 c0028cc:	20800015 	stw	r2,0(r4)
 c0028d0:	20800415 	stw	r2,16(r4)
 c0028d4:	1001d026 	beq	r2,zero,c003018 <___svfprintf_internal_r+0x2290>
 c0028d8:	d8802d17 	ldw	r2,180(sp)
 c0028dc:	14000515 	stw	r16,20(r2)
 c0028e0:	00394406 	br	c000df4 <__alt_data_end+0xfc000df4>
 c0028e4:	04030074 	movhi	r16,3073
 c0028e8:	84389504 	addi	r16,r16,-7596
 c0028ec:	003ee106 	br	c002474 <__alt_data_end+0xfc002474>
 c0028f0:	d9402d17 	ldw	r5,180(sp)
 c0028f4:	d9801e04 	addi	r6,sp,120
 c0028f8:	9809883a 	mov	r4,r19
 c0028fc:	c0066640 	call	c006664 <__ssprint_r>
 c002900:	103a081e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c002904:	dc402617 	ldw	r17,152(sp)
 c002908:	d8c02017 	ldw	r3,128(sp)
 c00290c:	da000404 	addi	r8,sp,16
 c002910:	003f4306 	br	c002620 <__alt_data_end+0xfc002620>
 c002914:	01400184 	movi	r5,6
 c002918:	d9402a15 	stw	r5,168(sp)
 c00291c:	003f9506 	br	c002774 <__alt_data_end+0xfc002774>
 c002920:	d8c02e17 	ldw	r3,184(sp)
 c002924:	1d000017 	ldw	r20,0(r3)
 c002928:	18c00104 	addi	r3,r3,4
 c00292c:	d8c02e15 	stw	r3,184(sp)
 c002930:	a02dd7fa 	srai	r22,r20,31
 c002934:	b005883a 	mov	r2,r22
 c002938:	003a7606 	br	c001314 <__alt_data_end+0xfc001314>
 c00293c:	d9002e17 	ldw	r4,184(sp)
 c002940:	002d883a 	mov	r22,zero
 c002944:	25000017 	ldw	r20,0(r4)
 c002948:	21000104 	addi	r4,r4,4
 c00294c:	d9002e15 	stw	r4,184(sp)
 c002950:	003bdd06 	br	c0018c8 <__alt_data_end+0xfc0018c8>
 c002954:	9480100c 	andi	r18,r18,64
 c002958:	90006e26 	beq	r18,zero,c002b14 <___svfprintf_internal_r+0x1d8c>
 c00295c:	d9402e17 	ldw	r5,184(sp)
 c002960:	d8c02f17 	ldw	r3,188(sp)
 c002964:	28800017 	ldw	r2,0(r5)
 c002968:	29400104 	addi	r5,r5,4
 c00296c:	d9402e15 	stw	r5,184(sp)
 c002970:	10c0000d 	sth	r3,0(r2)
 c002974:	00392f06 	br	c000e34 <__alt_data_end+0xfc000e34>
 c002978:	d9402d17 	ldw	r5,180(sp)
 c00297c:	d9801e04 	addi	r6,sp,120
 c002980:	9809883a 	mov	r4,r19
 c002984:	c0066640 	call	c006664 <__ssprint_r>
 c002988:	1039e61e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c00298c:	d8c02017 	ldw	r3,128(sp)
 c002990:	d8801f17 	ldw	r2,124(sp)
 c002994:	da000404 	addi	r8,sp,16
 c002998:	d9403317 	ldw	r5,204(sp)
 c00299c:	10800044 	addi	r2,r2,1
 c0029a0:	44000015 	stw	r16,0(r8)
 c0029a4:	28c7883a 	add	r3,r5,r3
 c0029a8:	003b5506 	br	c001700 <__alt_data_end+0xfc001700>
 c0029ac:	8009883a 	mov	r4,r16
 c0029b0:	df003e15 	stw	fp,248(sp)
 c0029b4:	c000cf00 	call	c000cf0 <strlen>
 c0029b8:	d8802b15 	stw	r2,172(sp)
 c0029bc:	da003e17 	ldw	r8,248(sp)
 c0029c0:	103c160e 	bge	r2,zero,c001a1c <__alt_data_end+0xfc001a1c>
 c0029c4:	0005883a 	mov	r2,zero
 c0029c8:	003c1406 	br	c001a1c <__alt_data_end+0xfc001a1c>
 c0029cc:	00bfffc4 	movi	r2,-1
 c0029d0:	0039d906 	br	c001138 <__alt_data_end+0xfc001138>
 c0029d4:	01030074 	movhi	r4,3073
 c0029d8:	2138a784 	addi	r4,r4,-7522
 c0029dc:	d9003515 	stw	r4,212(sp)
 c0029e0:	003ae406 	br	c001574 <__alt_data_end+0xfc001574>
 c0029e4:	013fffc4 	movi	r4,-1
 c0029e8:	0039fa06 	br	c0011d4 <__alt_data_end+0xfc0011d4>
 c0029ec:	d9402d17 	ldw	r5,180(sp)
 c0029f0:	d9801e04 	addi	r6,sp,120
 c0029f4:	9809883a 	mov	r4,r19
 c0029f8:	c0066640 	call	c006664 <__ssprint_r>
 c0029fc:	1039c91e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c002a00:	d8c02017 	ldw	r3,128(sp)
 c002a04:	da000404 	addi	r8,sp,16
 c002a08:	003d8406 	br	c00201c <__alt_data_end+0xfc00201c>
 c002a0c:	0023883a 	mov	r17,zero
 c002a10:	003d8306 	br	c002020 <__alt_data_end+0xfc002020>
 c002a14:	01030074 	movhi	r4,3073
 c002a18:	2138a384 	addi	r4,r4,-7538
 c002a1c:	d9002c15 	stw	r4,176(sp)
 c002a20:	d9002c17 	ldw	r4,176(sp)
 c002a24:	1c47883a 	add	r3,r3,r17
 c002a28:	10800044 	addi	r2,r2,1
 c002a2c:	41000015 	stw	r4,0(r8)
 c002a30:	44400115 	stw	r17,4(r8)
 c002a34:	d8c02015 	stw	r3,128(sp)
 c002a38:	d8801f15 	stw	r2,124(sp)
 c002a3c:	010001c4 	movi	r4,7
 c002a40:	20bfcd16 	blt	r4,r2,c002978 <__alt_data_end+0xfc002978>
 c002a44:	42000204 	addi	r8,r8,8
 c002a48:	003fd306 	br	c002998 <__alt_data_end+0xfc002998>
 c002a4c:	d9402d17 	ldw	r5,180(sp)
 c002a50:	d9801e04 	addi	r6,sp,120
 c002a54:	9809883a 	mov	r4,r19
 c002a58:	c0066640 	call	c006664 <__ssprint_r>
 c002a5c:	1039b11e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c002a60:	d8802617 	ldw	r2,152(sp)
 c002a64:	d8c02017 	ldw	r3,128(sp)
 c002a68:	da000404 	addi	r8,sp,16
 c002a6c:	003e1c06 	br	c0022e0 <__alt_data_end+0xfc0022e0>
 c002a70:	d8802a17 	ldw	r2,168(sp)
 c002a74:	00c00184 	movi	r3,6
 c002a78:	1880012e 	bgeu	r3,r2,c002a80 <___svfprintf_internal_r+0x1cf8>
 c002a7c:	1805883a 	mov	r2,r3
 c002a80:	d8802b15 	stw	r2,172(sp)
 c002a84:	1000f316 	blt	r2,zero,c002e54 <___svfprintf_internal_r+0x20cc>
 c002a88:	04030074 	movhi	r16,3073
 c002a8c:	d8802915 	stw	r2,164(sp)
 c002a90:	dd002e15 	stw	r20,184(sp)
 c002a94:	d8002a15 	stw	zero,168(sp)
 c002a98:	d8003215 	stw	zero,200(sp)
 c002a9c:	8438a104 	addi	r16,r16,-7548
 c002aa0:	0039883a 	mov	fp,zero
 c002aa4:	003a7d06 	br	c00149c <__alt_data_end+0xfc00149c>
 c002aa8:	01030074 	movhi	r4,3073
 c002aac:	2138a784 	addi	r4,r4,-7522
 c002ab0:	d9003515 	stw	r4,212(sp)
 c002ab4:	003b3d06 	br	c0017ac <__alt_data_end+0xfc0017ac>
 c002ab8:	d9402d17 	ldw	r5,180(sp)
 c002abc:	d9801e04 	addi	r6,sp,120
 c002ac0:	9809883a 	mov	r4,r19
 c002ac4:	c0066640 	call	c006664 <__ssprint_r>
 c002ac8:	1039961e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c002acc:	d8802617 	ldw	r2,152(sp)
 c002ad0:	d9403317 	ldw	r5,204(sp)
 c002ad4:	d8c02017 	ldw	r3,128(sp)
 c002ad8:	da000404 	addi	r8,sp,16
 c002adc:	2885c83a 	sub	r2,r5,r2
 c002ae0:	003e1006 	br	c002324 <__alt_data_end+0xfc002324>
 c002ae4:	00800044 	movi	r2,1
 c002ae8:	10803fcc 	andi	r2,r2,255
 c002aec:	00c00044 	movi	r3,1
 c002af0:	10fa1026 	beq	r2,r3,c001334 <__alt_data_end+0xfc001334>
 c002af4:	00c00084 	movi	r3,2
 c002af8:	10fb8226 	beq	r2,r3,c001904 <__alt_data_end+0xfc001904>
 c002afc:	003a4206 	br	c001408 <__alt_data_end+0xfc001408>
 c002b00:	0021883a 	mov	r16,zero
 c002b04:	003e0806 	br	c002328 <__alt_data_end+0xfc002328>
 c002b08:	07000b44 	movi	fp,45
 c002b0c:	df002785 	stb	fp,158(sp)
 c002b10:	0039e306 	br	c0012a0 <__alt_data_end+0xfc0012a0>
 c002b14:	d9002e17 	ldw	r4,184(sp)
 c002b18:	d9402f17 	ldw	r5,188(sp)
 c002b1c:	20800017 	ldw	r2,0(r4)
 c002b20:	21000104 	addi	r4,r4,4
 c002b24:	d9002e15 	stw	r4,184(sp)
 c002b28:	11400015 	stw	r5,0(r2)
 c002b2c:	0038c106 	br	c000e34 <__alt_data_end+0xfc000e34>
 c002b30:	00c00b44 	movi	r3,45
 c002b34:	d8c02785 	stb	r3,158(sp)
 c002b38:	d8802915 	stw	r2,164(sp)
 c002b3c:	dc802c17 	ldw	r18,176(sp)
 c002b40:	d8002a15 	stw	zero,168(sp)
 c002b44:	07000b44 	movi	fp,45
 c002b48:	003a5106 	br	c001490 <__alt_data_end+0xfc001490>
 c002b4c:	9080004c 	andi	r2,r18,1
 c002b50:	1000941e 	bne	r2,zero,c002da4 <___svfprintf_internal_r+0x201c>
 c002b54:	d8802117 	ldw	r2,132(sp)
 c002b58:	1405c83a 	sub	r2,r2,r16
 c002b5c:	d8803315 	stw	r2,204(sp)
 c002b60:	b441151e 	bne	r22,r17,c002fb8 <___svfprintf_internal_r+0x2230>
 c002b64:	dd802617 	ldw	r22,152(sp)
 c002b68:	00bfff44 	movi	r2,-3
 c002b6c:	b0801a16 	blt	r22,r2,c002bd8 <___svfprintf_internal_r+0x1e50>
 c002b70:	d9402a17 	ldw	r5,168(sp)
 c002b74:	2d801816 	blt	r5,r22,c002bd8 <___svfprintf_internal_r+0x1e50>
 c002b78:	dd803215 	stw	r22,200(sp)
 c002b7c:	003f3a06 	br	c002868 <__alt_data_end+0xfc002868>
 c002b80:	1025883a 	mov	r18,r2
 c002b84:	0039883a 	mov	fp,zero
 c002b88:	00800084 	movi	r2,2
 c002b8c:	003fd606 	br	c002ae8 <__alt_data_end+0xfc002ae8>
 c002b90:	9080004c 	andi	r2,r18,1
 c002b94:	103f191e 	bne	r2,zero,c0027fc <__alt_data_end+0xfc0027fc>
 c002b98:	d8802117 	ldw	r2,132(sp)
 c002b9c:	003f2806 	br	c002840 <__alt_data_end+0xfc002840>
 c002ba0:	01030074 	movhi	r4,3073
 c002ba4:	2138a384 	addi	r4,r4,-7538
 c002ba8:	d9002c15 	stw	r4,176(sp)
 c002bac:	003c7c06 	br	c001da0 <__alt_data_end+0xfc001da0>
 c002bb0:	e005883a 	mov	r2,fp
 c002bb4:	003f2206 	br	c002840 <__alt_data_end+0xfc002840>
 c002bb8:	d9002a17 	ldw	r4,168(sp)
 c002bbc:	df002783 	ldbu	fp,158(sp)
 c002bc0:	dd002e15 	stw	r20,184(sp)
 c002bc4:	d9002915 	stw	r4,164(sp)
 c002bc8:	d9002b15 	stw	r4,172(sp)
 c002bcc:	d8002a15 	stw	zero,168(sp)
 c002bd0:	d8003215 	stw	zero,200(sp)
 c002bd4:	003a2a06 	br	c001480 <__alt_data_end+0xfc001480>
 c002bd8:	8c7fff84 	addi	r17,r17,-2
 c002bdc:	b5bfffc4 	addi	r22,r22,-1
 c002be0:	dd802615 	stw	r22,152(sp)
 c002be4:	dc4022c5 	stb	r17,139(sp)
 c002be8:	b000c316 	blt	r22,zero,c002ef8 <___svfprintf_internal_r+0x2170>
 c002bec:	00800ac4 	movi	r2,43
 c002bf0:	d8802305 	stb	r2,140(sp)
 c002bf4:	00800244 	movi	r2,9
 c002bf8:	15806e16 	blt	r2,r22,c002db4 <___svfprintf_internal_r+0x202c>
 c002bfc:	00800c04 	movi	r2,48
 c002c00:	b5800c04 	addi	r22,r22,48
 c002c04:	d8802345 	stb	r2,141(sp)
 c002c08:	dd802385 	stb	r22,142(sp)
 c002c0c:	d88023c4 	addi	r2,sp,143
 c002c10:	df0022c4 	addi	fp,sp,139
 c002c14:	d8c03317 	ldw	r3,204(sp)
 c002c18:	1739c83a 	sub	fp,r2,fp
 c002c1c:	d9003317 	ldw	r4,204(sp)
 c002c20:	e0c7883a 	add	r3,fp,r3
 c002c24:	df003b15 	stw	fp,236(sp)
 c002c28:	d8c02b15 	stw	r3,172(sp)
 c002c2c:	00800044 	movi	r2,1
 c002c30:	1100b70e 	bge	r2,r4,c002f10 <___svfprintf_internal_r+0x2188>
 c002c34:	d8c02b17 	ldw	r3,172(sp)
 c002c38:	18c00044 	addi	r3,r3,1
 c002c3c:	d8c02b15 	stw	r3,172(sp)
 c002c40:	1805883a 	mov	r2,r3
 c002c44:	1800b016 	blt	r3,zero,c002f08 <___svfprintf_internal_r+0x2180>
 c002c48:	d8003215 	stw	zero,200(sp)
 c002c4c:	003f1006 	br	c002890 <__alt_data_end+0xfc002890>
 c002c50:	d8802a17 	ldw	r2,168(sp)
 c002c54:	103ec71e 	bne	r2,zero,c002774 <__alt_data_end+0xfc002774>
 c002c58:	dc002a15 	stw	r16,168(sp)
 c002c5c:	003ec506 	br	c002774 <__alt_data_end+0xfc002774>
 c002c60:	d9402d17 	ldw	r5,180(sp)
 c002c64:	d9801e04 	addi	r6,sp,120
 c002c68:	9809883a 	mov	r4,r19
 c002c6c:	c0066640 	call	c006664 <__ssprint_r>
 c002c70:	10392c1e 	bne	r2,zero,c001124 <__alt_data_end+0xfc001124>
 c002c74:	dc402617 	ldw	r17,152(sp)
 c002c78:	d8c02017 	ldw	r3,128(sp)
 c002c7c:	d8801f17 	ldw	r2,124(sp)
 c002c80:	da000404 	addi	r8,sp,16
 c002c84:	003e7706 	br	c002664 <__alt_data_end+0xfc002664>
 c002c88:	182f883a 	mov	r23,r3
 c002c8c:	d8002a15 	stw	zero,168(sp)
 c002c90:	00389306 	br	c000ee0 <__alt_data_end+0xfc000ee0>
 c002c94:	d8c02a17 	ldw	r3,168(sp)
 c002c98:	d8802104 	addi	r2,sp,132
 c002c9c:	d8800315 	stw	r2,12(sp)
 c002ca0:	d9403617 	ldw	r5,216(sp)
 c002ca4:	d8802504 	addi	r2,sp,148
 c002ca8:	d8800215 	stw	r2,8(sp)
 c002cac:	d8802604 	addi	r2,sp,152
 c002cb0:	d8c00015 	stw	r3,0(sp)
 c002cb4:	9809883a 	mov	r4,r19
 c002cb8:	d8800115 	stw	r2,4(sp)
 c002cbc:	01c000c4 	movi	r7,3
 c002cc0:	a00d883a 	mov	r6,r20
 c002cc4:	da003e15 	stw	r8,248(sp)
 c002cc8:	c00326c0 	call	c00326c <_dtoa_r>
 c002ccc:	d9002a17 	ldw	r4,168(sp)
 c002cd0:	da003e17 	ldw	r8,248(sp)
 c002cd4:	1021883a 	mov	r16,r2
 c002cd8:	1139883a 	add	fp,r2,r4
 c002cdc:	2007883a 	mov	r3,r4
 c002ce0:	81000007 	ldb	r4,0(r16)
 c002ce4:	00800c04 	movi	r2,48
 c002ce8:	20806f26 	beq	r4,r2,c002ea8 <___svfprintf_internal_r+0x2120>
 c002cec:	d8c02617 	ldw	r3,152(sp)
 c002cf0:	e0f9883a 	add	fp,fp,r3
 c002cf4:	003ec206 	br	c002800 <__alt_data_end+0xfc002800>
 c002cf8:	00c00b44 	movi	r3,45
 c002cfc:	2520003c 	xorhi	r20,r4,32768
 c002d00:	d8c02905 	stb	r3,164(sp)
 c002d04:	003ea106 	br	c00278c <__alt_data_end+0xfc00278c>
 c002d08:	d8c03217 	ldw	r3,200(sp)
 c002d0c:	00c0890e 	bge	zero,r3,c002f34 <___svfprintf_internal_r+0x21ac>
 c002d10:	00800044 	movi	r2,1
 c002d14:	d9003317 	ldw	r4,204(sp)
 c002d18:	1105883a 	add	r2,r2,r4
 c002d1c:	d8802b15 	stw	r2,172(sp)
 c002d20:	10005f16 	blt	r2,zero,c002ea0 <___svfprintf_internal_r+0x2118>
 c002d24:	044019c4 	movi	r17,103
 c002d28:	003ed906 	br	c002890 <__alt_data_end+0xfc002890>
 c002d2c:	d9002a17 	ldw	r4,168(sp)
 c002d30:	20c00044 	addi	r3,r4,1
 c002d34:	003e9c06 	br	c0027a8 <__alt_data_end+0xfc0027a8>
 c002d38:	d9002a17 	ldw	r4,168(sp)
 c002d3c:	00c0680e 	bge	zero,r3,c002ee0 <___svfprintf_internal_r+0x2158>
 c002d40:	2000461e 	bne	r4,zero,c002e5c <___svfprintf_internal_r+0x20d4>
 c002d44:	9480004c 	andi	r18,r18,1
 c002d48:	9000441e 	bne	r18,zero,c002e5c <___svfprintf_internal_r+0x20d4>
 c002d4c:	1805883a 	mov	r2,r3
 c002d50:	1800a116 	blt	r3,zero,c002fd8 <___svfprintf_internal_r+0x2250>
 c002d54:	d8c03217 	ldw	r3,200(sp)
 c002d58:	d8c02b15 	stw	r3,172(sp)
 c002d5c:	003ecc06 	br	c002890 <__alt_data_end+0xfc002890>
 c002d60:	d9402a17 	ldw	r5,168(sp)
 c002d64:	d8802104 	addi	r2,sp,132
 c002d68:	d8800315 	stw	r2,12(sp)
 c002d6c:	d9400015 	stw	r5,0(sp)
 c002d70:	d8802504 	addi	r2,sp,148
 c002d74:	d9403617 	ldw	r5,216(sp)
 c002d78:	d8800215 	stw	r2,8(sp)
 c002d7c:	d8802604 	addi	r2,sp,152
 c002d80:	d8800115 	stw	r2,4(sp)
 c002d84:	01c000c4 	movi	r7,3
 c002d88:	a00d883a 	mov	r6,r20
 c002d8c:	9809883a 	mov	r4,r19
 c002d90:	da003e15 	stw	r8,248(sp)
 c002d94:	c00326c0 	call	c00326c <_dtoa_r>
 c002d98:	d8c02a17 	ldw	r3,168(sp)
 c002d9c:	da003e17 	ldw	r8,248(sp)
 c002da0:	1021883a 	mov	r16,r2
 c002da4:	00801184 	movi	r2,70
 c002da8:	80f9883a 	add	fp,r16,r3
 c002dac:	88bfcc26 	beq	r17,r2,c002ce0 <__alt_data_end+0xfc002ce0>
 c002db0:	003e9306 	br	c002800 <__alt_data_end+0xfc002800>
 c002db4:	df0022c4 	addi	fp,sp,139
 c002db8:	dc002a15 	stw	r16,168(sp)
 c002dbc:	9829883a 	mov	r20,r19
 c002dc0:	e021883a 	mov	r16,fp
 c002dc4:	4027883a 	mov	r19,r8
 c002dc8:	b009883a 	mov	r4,r22
 c002dcc:	01400284 	movi	r5,10
 c002dd0:	c000a580 	call	c000a58 <__modsi3>
 c002dd4:	10800c04 	addi	r2,r2,48
 c002dd8:	843fffc4 	addi	r16,r16,-1
 c002ddc:	b009883a 	mov	r4,r22
 c002de0:	01400284 	movi	r5,10
 c002de4:	80800005 	stb	r2,0(r16)
 c002de8:	c0009d40 	call	c0009d4 <__divsi3>
 c002dec:	102d883a 	mov	r22,r2
 c002df0:	00800244 	movi	r2,9
 c002df4:	15bff416 	blt	r2,r22,c002dc8 <__alt_data_end+0xfc002dc8>
 c002df8:	9811883a 	mov	r8,r19
 c002dfc:	b0800c04 	addi	r2,r22,48
 c002e00:	a027883a 	mov	r19,r20
 c002e04:	8029883a 	mov	r20,r16
 c002e08:	a17fffc4 	addi	r5,r20,-1
 c002e0c:	a0bfffc5 	stb	r2,-1(r20)
 c002e10:	dc002a17 	ldw	r16,168(sp)
 c002e14:	2f00782e 	bgeu	r5,fp,c002ff8 <___svfprintf_internal_r+0x2270>
 c002e18:	d9c02384 	addi	r7,sp,142
 c002e1c:	3d0fc83a 	sub	r7,r7,r20
 c002e20:	d9002344 	addi	r4,sp,141
 c002e24:	e1cf883a 	add	r7,fp,r7
 c002e28:	00000106 	br	c002e30 <___svfprintf_internal_r+0x20a8>
 c002e2c:	28800003 	ldbu	r2,0(r5)
 c002e30:	20800005 	stb	r2,0(r4)
 c002e34:	21000044 	addi	r4,r4,1
 c002e38:	29400044 	addi	r5,r5,1
 c002e3c:	21fffb1e 	bne	r4,r7,c002e2c <__alt_data_end+0xfc002e2c>
 c002e40:	d8802304 	addi	r2,sp,140
 c002e44:	1505c83a 	sub	r2,r2,r20
 c002e48:	d8c02344 	addi	r3,sp,141
 c002e4c:	1885883a 	add	r2,r3,r2
 c002e50:	003f7006 	br	c002c14 <__alt_data_end+0xfc002c14>
 c002e54:	0005883a 	mov	r2,zero
 c002e58:	003f0b06 	br	c002a88 <__alt_data_end+0xfc002a88>
 c002e5c:	d9002a17 	ldw	r4,168(sp)
 c002e60:	d8c03217 	ldw	r3,200(sp)
 c002e64:	20800044 	addi	r2,r4,1
 c002e68:	1885883a 	add	r2,r3,r2
 c002e6c:	d8802b15 	stw	r2,172(sp)
 c002e70:	103e870e 	bge	r2,zero,c002890 <__alt_data_end+0xfc002890>
 c002e74:	0005883a 	mov	r2,zero
 c002e78:	003e8506 	br	c002890 <__alt_data_end+0xfc002890>
 c002e7c:	01030074 	movhi	r4,3073
 c002e80:	2138a384 	addi	r4,r4,-7538
 c002e84:	d9002c15 	stw	r4,176(sp)
 c002e88:	003cc506 	br	c0021a0 <__alt_data_end+0xfc0021a0>
 c002e8c:	d8c03217 	ldw	r3,200(sp)
 c002e90:	18c00044 	addi	r3,r3,1
 c002e94:	d8c02b15 	stw	r3,172(sp)
 c002e98:	1805883a 	mov	r2,r3
 c002e9c:	183fa10e 	bge	r3,zero,c002d24 <__alt_data_end+0xfc002d24>
 c002ea0:	0005883a 	mov	r2,zero
 c002ea4:	003f9f06 	br	c002d24 <__alt_data_end+0xfc002d24>
 c002ea8:	d9003617 	ldw	r4,216(sp)
 c002eac:	000d883a 	mov	r6,zero
 c002eb0:	000f883a 	mov	r7,zero
 c002eb4:	a00b883a 	mov	r5,r20
 c002eb8:	d8c03d15 	stw	r3,244(sp)
 c002ebc:	da003e15 	stw	r8,248(sp)
 c002ec0:	c00a8140 	call	c00a814 <__eqdf2>
 c002ec4:	d8c03d17 	ldw	r3,244(sp)
 c002ec8:	da003e17 	ldw	r8,248(sp)
 c002ecc:	103f8726 	beq	r2,zero,c002cec <__alt_data_end+0xfc002cec>
 c002ed0:	00800044 	movi	r2,1
 c002ed4:	10c7c83a 	sub	r3,r2,r3
 c002ed8:	d8c02615 	stw	r3,152(sp)
 c002edc:	003f8406 	br	c002cf0 <__alt_data_end+0xfc002cf0>
 c002ee0:	20000e1e 	bne	r4,zero,c002f1c <___svfprintf_internal_r+0x2194>
 c002ee4:	9480004c 	andi	r18,r18,1
 c002ee8:	90000c1e 	bne	r18,zero,c002f1c <___svfprintf_internal_r+0x2194>
 c002eec:	00800044 	movi	r2,1
 c002ef0:	d8802b15 	stw	r2,172(sp)
 c002ef4:	003e6606 	br	c002890 <__alt_data_end+0xfc002890>
 c002ef8:	00800b44 	movi	r2,45
 c002efc:	05adc83a 	sub	r22,zero,r22
 c002f00:	d8802305 	stb	r2,140(sp)
 c002f04:	003f3b06 	br	c002bf4 <__alt_data_end+0xfc002bf4>
 c002f08:	0005883a 	mov	r2,zero
 c002f0c:	003f4e06 	br	c002c48 <__alt_data_end+0xfc002c48>
 c002f10:	90a4703a 	and	r18,r18,r2
 c002f14:	903f4a26 	beq	r18,zero,c002c40 <__alt_data_end+0xfc002c40>
 c002f18:	003f4606 	br	c002c34 <__alt_data_end+0xfc002c34>
 c002f1c:	d8c02a17 	ldw	r3,168(sp)
 c002f20:	18c00084 	addi	r3,r3,2
 c002f24:	d8c02b15 	stw	r3,172(sp)
 c002f28:	1805883a 	mov	r2,r3
 c002f2c:	183e580e 	bge	r3,zero,c002890 <__alt_data_end+0xfc002890>
 c002f30:	003fd006 	br	c002e74 <__alt_data_end+0xfc002e74>
 c002f34:	00800084 	movi	r2,2
 c002f38:	10c5c83a 	sub	r2,r2,r3
 c002f3c:	003f7506 	br	c002d14 <__alt_data_end+0xfc002d14>
 c002f40:	d9402e17 	ldw	r5,184(sp)
 c002f44:	d9002e17 	ldw	r4,184(sp)
 c002f48:	bc400043 	ldbu	r17,1(r23)
 c002f4c:	29400017 	ldw	r5,0(r5)
 c002f50:	20800104 	addi	r2,r4,4
 c002f54:	d8802e15 	stw	r2,184(sp)
 c002f58:	d9402a15 	stw	r5,168(sp)
 c002f5c:	182f883a 	mov	r23,r3
 c002f60:	283df10e 	bge	r5,zero,c002728 <__alt_data_end+0xfc002728>
 c002f64:	8c403fcc 	andi	r17,r17,255
 c002f68:	017fffc4 	movi	r5,-1
 c002f6c:	8c40201c 	xori	r17,r17,128
 c002f70:	d9402a15 	stw	r5,168(sp)
 c002f74:	8c7fe004 	addi	r17,r17,-128
 c002f78:	0037d806 	br	c000edc <__alt_data_end+0xfc000edc>
 c002f7c:	9080004c 	andi	r2,r18,1
 c002f80:	0039883a 	mov	fp,zero
 c002f84:	10000726 	beq	r2,zero,c002fa4 <___svfprintf_internal_r+0x221c>
 c002f88:	d8c02817 	ldw	r3,160(sp)
 c002f8c:	dc001dc4 	addi	r16,sp,119
 c002f90:	00800c04 	movi	r2,48
 c002f94:	1c07c83a 	sub	r3,r3,r16
 c002f98:	d8801dc5 	stb	r2,119(sp)
 c002f9c:	d8c02b15 	stw	r3,172(sp)
 c002fa0:	00393106 	br	c001468 <__alt_data_end+0xfc001468>
 c002fa4:	d8002b15 	stw	zero,172(sp)
 c002fa8:	dc001e04 	addi	r16,sp,120
 c002fac:	00392e06 	br	c001468 <__alt_data_end+0xfc001468>
 c002fb0:	0005883a 	mov	r2,zero
 c002fb4:	003e3306 	br	c002884 <__alt_data_end+0xfc002884>
 c002fb8:	dd802617 	ldw	r22,152(sp)
 c002fbc:	003f0706 	br	c002bdc <__alt_data_end+0xfc002bdc>
 c002fc0:	d8c02b03 	ldbu	r3,172(sp)
 c002fc4:	d8c02785 	stb	r3,158(sp)
 c002fc8:	003a3506 	br	c0018a0 <__alt_data_end+0xfc0018a0>
 c002fcc:	d8c02b03 	ldbu	r3,172(sp)
 c002fd0:	d8c02785 	stb	r3,158(sp)
 c002fd4:	003a1706 	br	c001834 <__alt_data_end+0xfc001834>
 c002fd8:	0005883a 	mov	r2,zero
 c002fdc:	003f5d06 	br	c002d54 <__alt_data_end+0xfc002d54>
 c002fe0:	d8c02b03 	ldbu	r3,172(sp)
 c002fe4:	d8c02785 	stb	r3,158(sp)
 c002fe8:	0038f306 	br	c0013b8 <__alt_data_end+0xfc0013b8>
 c002fec:	d8c02b03 	ldbu	r3,172(sp)
 c002ff0:	d8c02785 	stb	r3,158(sp)
 c002ff4:	0038be06 	br	c0012f0 <__alt_data_end+0xfc0012f0>
 c002ff8:	d8802344 	addi	r2,sp,141
 c002ffc:	003f0506 	br	c002c14 <__alt_data_end+0xfc002c14>
 c003000:	d8c02b03 	ldbu	r3,172(sp)
 c003004:	d8c02785 	stb	r3,158(sp)
 c003008:	00388b06 	br	c001238 <__alt_data_end+0xfc001238>
 c00300c:	d8c02b03 	ldbu	r3,172(sp)
 c003010:	d8c02785 	stb	r3,158(sp)
 c003014:	003ad706 	br	c001b74 <__alt_data_end+0xfc001b74>
 c003018:	d9403917 	ldw	r5,228(sp)
 c00301c:	00800304 	movi	r2,12
 c003020:	28800015 	stw	r2,0(r5)
 c003024:	00bfffc4 	movi	r2,-1
 c003028:	00384306 	br	c001138 <__alt_data_end+0xfc001138>
 c00302c:	d8c02b03 	ldbu	r3,172(sp)
 c003030:	d8c02785 	stb	r3,158(sp)
 c003034:	003ab606 	br	c001b10 <__alt_data_end+0xfc001b10>
 c003038:	d8c02b03 	ldbu	r3,172(sp)
 c00303c:	d8c02785 	stb	r3,158(sp)
 c003040:	003a8906 	br	c001a68 <__alt_data_end+0xfc001a68>

0c003044 <quorem>:
 c003044:	defff204 	addi	sp,sp,-56
 c003048:	ddc00b15 	stw	r23,44(sp)
 c00304c:	20800417 	ldw	r2,16(r4)
 c003050:	2dc00417 	ldw	r23,16(r5)
 c003054:	dfc00d15 	stw	ra,52(sp)
 c003058:	df000c15 	stw	fp,48(sp)
 c00305c:	dd800a15 	stw	r22,40(sp)
 c003060:	dd400915 	stw	r21,36(sp)
 c003064:	dd000815 	stw	r20,32(sp)
 c003068:	dcc00715 	stw	r19,28(sp)
 c00306c:	dc800615 	stw	r18,24(sp)
 c003070:	dc400515 	stw	r17,20(sp)
 c003074:	dc000415 	stw	r16,16(sp)
 c003078:	15c07a16 	blt	r2,r23,c003264 <quorem+0x220>
 c00307c:	bdffffc4 	addi	r23,r23,-1
 c003080:	bde9883a 	add	r20,r23,r23
 c003084:	28c00504 	addi	r3,r5,20
 c003088:	a529883a 	add	r20,r20,r20
 c00308c:	1d39883a 	add	fp,r3,r20
 c003090:	24c00504 	addi	r19,r4,20
 c003094:	d9400215 	stw	r5,8(sp)
 c003098:	9d29883a 	add	r20,r19,r20
 c00309c:	e1400017 	ldw	r5,0(fp)
 c0030a0:	d9000015 	stw	r4,0(sp)
 c0030a4:	a1000017 	ldw	r4,0(r20)
 c0030a8:	29400044 	addi	r5,r5,1
 c0030ac:	d8c00115 	stw	r3,4(sp)
 c0030b0:	dd000315 	stw	r20,12(sp)
 c0030b4:	c000acc0 	call	c000acc <__udivsi3>
 c0030b8:	1025883a 	mov	r18,r2
 c0030bc:	10003026 	beq	r2,zero,c003180 <quorem+0x13c>
 c0030c0:	dc400117 	ldw	r17,4(sp)
 c0030c4:	9829883a 	mov	r20,r19
 c0030c8:	002d883a 	mov	r22,zero
 c0030cc:	0021883a 	mov	r16,zero
 c0030d0:	8d400017 	ldw	r21,0(r17)
 c0030d4:	900b883a 	mov	r5,r18
 c0030d8:	8c400104 	addi	r17,r17,4
 c0030dc:	a93fffcc 	andi	r4,r21,65535
 c0030e0:	c000b880 	call	c000b88 <__mulsi3>
 c0030e4:	a808d43a 	srli	r4,r21,16
 c0030e8:	900b883a 	mov	r5,r18
 c0030ec:	15ad883a 	add	r22,r2,r22
 c0030f0:	c000b880 	call	c000b88 <__mulsi3>
 c0030f4:	a1000017 	ldw	r4,0(r20)
 c0030f8:	b00cd43a 	srli	r6,r22,16
 c0030fc:	b0ffffcc 	andi	r3,r22,65535
 c003100:	217fffcc 	andi	r5,r4,65535
 c003104:	2c21883a 	add	r16,r5,r16
 c003108:	80c7c83a 	sub	r3,r16,r3
 c00310c:	2008d43a 	srli	r4,r4,16
 c003110:	1185883a 	add	r2,r2,r6
 c003114:	1821d43a 	srai	r16,r3,16
 c003118:	117fffcc 	andi	r5,r2,65535
 c00311c:	2149c83a 	sub	r4,r4,r5
 c003120:	2421883a 	add	r16,r4,r16
 c003124:	8008943a 	slli	r4,r16,16
 c003128:	18ffffcc 	andi	r3,r3,65535
 c00312c:	102cd43a 	srli	r22,r2,16
 c003130:	20c8b03a 	or	r4,r4,r3
 c003134:	a1000015 	stw	r4,0(r20)
 c003138:	8021d43a 	srai	r16,r16,16
 c00313c:	a5000104 	addi	r20,r20,4
 c003140:	e47fe32e 	bgeu	fp,r17,c0030d0 <__alt_data_end+0xfc0030d0>
 c003144:	d8c00317 	ldw	r3,12(sp)
 c003148:	18800017 	ldw	r2,0(r3)
 c00314c:	10000c1e 	bne	r2,zero,c003180 <quorem+0x13c>
 c003150:	18bfff04 	addi	r2,r3,-4
 c003154:	9880082e 	bgeu	r19,r2,c003178 <quorem+0x134>
 c003158:	18ffff17 	ldw	r3,-4(r3)
 c00315c:	18000326 	beq	r3,zero,c00316c <quorem+0x128>
 c003160:	00000506 	br	c003178 <quorem+0x134>
 c003164:	10c00017 	ldw	r3,0(r2)
 c003168:	1800031e 	bne	r3,zero,c003178 <quorem+0x134>
 c00316c:	10bfff04 	addi	r2,r2,-4
 c003170:	bdffffc4 	addi	r23,r23,-1
 c003174:	98bffb36 	bltu	r19,r2,c003164 <__alt_data_end+0xfc003164>
 c003178:	d8c00017 	ldw	r3,0(sp)
 c00317c:	1dc00415 	stw	r23,16(r3)
 c003180:	d9400217 	ldw	r5,8(sp)
 c003184:	d9000017 	ldw	r4,0(sp)
 c003188:	c005d8c0 	call	c005d8c <__mcmp>
 c00318c:	10002816 	blt	r2,zero,c003230 <quorem+0x1ec>
 c003190:	dc400117 	ldw	r17,4(sp)
 c003194:	94800044 	addi	r18,r18,1
 c003198:	980d883a 	mov	r6,r19
 c00319c:	0007883a 	mov	r3,zero
 c0031a0:	31000017 	ldw	r4,0(r6)
 c0031a4:	89400017 	ldw	r5,0(r17)
 c0031a8:	31800104 	addi	r6,r6,4
 c0031ac:	20bfffcc 	andi	r2,r4,65535
 c0031b0:	10c7883a 	add	r3,r2,r3
 c0031b4:	28bfffcc 	andi	r2,r5,65535
 c0031b8:	1885c83a 	sub	r2,r3,r2
 c0031bc:	280ad43a 	srli	r5,r5,16
 c0031c0:	2008d43a 	srli	r4,r4,16
 c0031c4:	1007d43a 	srai	r3,r2,16
 c0031c8:	10bfffcc 	andi	r2,r2,65535
 c0031cc:	2149c83a 	sub	r4,r4,r5
 c0031d0:	20c9883a 	add	r4,r4,r3
 c0031d4:	200a943a 	slli	r5,r4,16
 c0031d8:	8c400104 	addi	r17,r17,4
 c0031dc:	2007d43a 	srai	r3,r4,16
 c0031e0:	2884b03a 	or	r2,r5,r2
 c0031e4:	30bfff15 	stw	r2,-4(r6)
 c0031e8:	e47fed2e 	bgeu	fp,r17,c0031a0 <__alt_data_end+0xfc0031a0>
 c0031ec:	bdc5883a 	add	r2,r23,r23
 c0031f0:	1085883a 	add	r2,r2,r2
 c0031f4:	9887883a 	add	r3,r19,r2
 c0031f8:	18800017 	ldw	r2,0(r3)
 c0031fc:	10000c1e 	bne	r2,zero,c003230 <quorem+0x1ec>
 c003200:	18bfff04 	addi	r2,r3,-4
 c003204:	9880082e 	bgeu	r19,r2,c003228 <quorem+0x1e4>
 c003208:	18ffff17 	ldw	r3,-4(r3)
 c00320c:	18000326 	beq	r3,zero,c00321c <quorem+0x1d8>
 c003210:	00000506 	br	c003228 <quorem+0x1e4>
 c003214:	10c00017 	ldw	r3,0(r2)
 c003218:	1800031e 	bne	r3,zero,c003228 <quorem+0x1e4>
 c00321c:	10bfff04 	addi	r2,r2,-4
 c003220:	bdffffc4 	addi	r23,r23,-1
 c003224:	98bffb36 	bltu	r19,r2,c003214 <__alt_data_end+0xfc003214>
 c003228:	d8c00017 	ldw	r3,0(sp)
 c00322c:	1dc00415 	stw	r23,16(r3)
 c003230:	9005883a 	mov	r2,r18
 c003234:	dfc00d17 	ldw	ra,52(sp)
 c003238:	df000c17 	ldw	fp,48(sp)
 c00323c:	ddc00b17 	ldw	r23,44(sp)
 c003240:	dd800a17 	ldw	r22,40(sp)
 c003244:	dd400917 	ldw	r21,36(sp)
 c003248:	dd000817 	ldw	r20,32(sp)
 c00324c:	dcc00717 	ldw	r19,28(sp)
 c003250:	dc800617 	ldw	r18,24(sp)
 c003254:	dc400517 	ldw	r17,20(sp)
 c003258:	dc000417 	ldw	r16,16(sp)
 c00325c:	dec00e04 	addi	sp,sp,56
 c003260:	f800283a 	ret
 c003264:	0005883a 	mov	r2,zero
 c003268:	003ff206 	br	c003234 <__alt_data_end+0xfc003234>

0c00326c <_dtoa_r>:
 c00326c:	20801017 	ldw	r2,64(r4)
 c003270:	deffde04 	addi	sp,sp,-136
 c003274:	df002015 	stw	fp,128(sp)
 c003278:	dcc01b15 	stw	r19,108(sp)
 c00327c:	dc801a15 	stw	r18,104(sp)
 c003280:	dc401915 	stw	r17,100(sp)
 c003284:	dc001815 	stw	r16,96(sp)
 c003288:	dfc02115 	stw	ra,132(sp)
 c00328c:	ddc01f15 	stw	r23,124(sp)
 c003290:	dd801e15 	stw	r22,120(sp)
 c003294:	dd401d15 	stw	r21,116(sp)
 c003298:	dd001c15 	stw	r20,112(sp)
 c00329c:	d9c00315 	stw	r7,12(sp)
 c0032a0:	2039883a 	mov	fp,r4
 c0032a4:	3023883a 	mov	r17,r6
 c0032a8:	2825883a 	mov	r18,r5
 c0032ac:	dc002417 	ldw	r16,144(sp)
 c0032b0:	3027883a 	mov	r19,r6
 c0032b4:	10000826 	beq	r2,zero,c0032d8 <_dtoa_r+0x6c>
 c0032b8:	21801117 	ldw	r6,68(r4)
 c0032bc:	00c00044 	movi	r3,1
 c0032c0:	100b883a 	mov	r5,r2
 c0032c4:	1986983a 	sll	r3,r3,r6
 c0032c8:	11800115 	stw	r6,4(r2)
 c0032cc:	10c00215 	stw	r3,8(r2)
 c0032d0:	c0054b00 	call	c0054b0 <_Bfree>
 c0032d4:	e0001015 	stw	zero,64(fp)
 c0032d8:	88002e16 	blt	r17,zero,c003394 <_dtoa_r+0x128>
 c0032dc:	80000015 	stw	zero,0(r16)
 c0032e0:	889ffc2c 	andhi	r2,r17,32752
 c0032e4:	00dffc34 	movhi	r3,32752
 c0032e8:	10c01c26 	beq	r2,r3,c00335c <_dtoa_r+0xf0>
 c0032ec:	000d883a 	mov	r6,zero
 c0032f0:	000f883a 	mov	r7,zero
 c0032f4:	9009883a 	mov	r4,r18
 c0032f8:	980b883a 	mov	r5,r19
 c0032fc:	c00a8140 	call	c00a814 <__eqdf2>
 c003300:	10002b1e 	bne	r2,zero,c0033b0 <_dtoa_r+0x144>
 c003304:	d9c02317 	ldw	r7,140(sp)
 c003308:	00800044 	movi	r2,1
 c00330c:	38800015 	stw	r2,0(r7)
 c003310:	d8802517 	ldw	r2,148(sp)
 c003314:	10019e26 	beq	r2,zero,c003990 <_dtoa_r+0x724>
 c003318:	d8c02517 	ldw	r3,148(sp)
 c00331c:	00830074 	movhi	r2,3073
 c003320:	10b8a344 	addi	r2,r2,-7539
 c003324:	18800015 	stw	r2,0(r3)
 c003328:	10bfffc4 	addi	r2,r2,-1
 c00332c:	dfc02117 	ldw	ra,132(sp)
 c003330:	df002017 	ldw	fp,128(sp)
 c003334:	ddc01f17 	ldw	r23,124(sp)
 c003338:	dd801e17 	ldw	r22,120(sp)
 c00333c:	dd401d17 	ldw	r21,116(sp)
 c003340:	dd001c17 	ldw	r20,112(sp)
 c003344:	dcc01b17 	ldw	r19,108(sp)
 c003348:	dc801a17 	ldw	r18,104(sp)
 c00334c:	dc401917 	ldw	r17,100(sp)
 c003350:	dc001817 	ldw	r16,96(sp)
 c003354:	dec02204 	addi	sp,sp,136
 c003358:	f800283a 	ret
 c00335c:	d8c02317 	ldw	r3,140(sp)
 c003360:	0089c3c4 	movi	r2,9999
 c003364:	18800015 	stw	r2,0(r3)
 c003368:	90017726 	beq	r18,zero,c003948 <_dtoa_r+0x6dc>
 c00336c:	00830074 	movhi	r2,3073
 c003370:	10b8af04 	addi	r2,r2,-7492
 c003374:	d9002517 	ldw	r4,148(sp)
 c003378:	203fec26 	beq	r4,zero,c00332c <__alt_data_end+0xfc00332c>
 c00337c:	10c000c7 	ldb	r3,3(r2)
 c003380:	1801781e 	bne	r3,zero,c003964 <_dtoa_r+0x6f8>
 c003384:	10c000c4 	addi	r3,r2,3
 c003388:	d9802517 	ldw	r6,148(sp)
 c00338c:	30c00015 	stw	r3,0(r6)
 c003390:	003fe606 	br	c00332c <__alt_data_end+0xfc00332c>
 c003394:	04e00034 	movhi	r19,32768
 c003398:	9cffffc4 	addi	r19,r19,-1
 c00339c:	00800044 	movi	r2,1
 c0033a0:	8ce6703a 	and	r19,r17,r19
 c0033a4:	80800015 	stw	r2,0(r16)
 c0033a8:	9823883a 	mov	r17,r19
 c0033ac:	003fcc06 	br	c0032e0 <__alt_data_end+0xfc0032e0>
 c0033b0:	d8800204 	addi	r2,sp,8
 c0033b4:	d8800015 	stw	r2,0(sp)
 c0033b8:	d9c00104 	addi	r7,sp,4
 c0033bc:	900b883a 	mov	r5,r18
 c0033c0:	980d883a 	mov	r6,r19
 c0033c4:	e009883a 	mov	r4,fp
 c0033c8:	8820d53a 	srli	r16,r17,20
 c0033cc:	c0061580 	call	c006158 <__d2b>
 c0033d0:	d8800915 	stw	r2,36(sp)
 c0033d4:	8001651e 	bne	r16,zero,c00396c <_dtoa_r+0x700>
 c0033d8:	dd800217 	ldw	r22,8(sp)
 c0033dc:	dc000117 	ldw	r16,4(sp)
 c0033e0:	00800804 	movi	r2,32
 c0033e4:	b421883a 	add	r16,r22,r16
 c0033e8:	80c10c84 	addi	r3,r16,1074
 c0033ec:	10c2d10e 	bge	r2,r3,c003f34 <_dtoa_r+0xcc8>
 c0033f0:	00801004 	movi	r2,64
 c0033f4:	81010484 	addi	r4,r16,1042
 c0033f8:	10c7c83a 	sub	r3,r2,r3
 c0033fc:	9108d83a 	srl	r4,r18,r4
 c003400:	88e2983a 	sll	r17,r17,r3
 c003404:	2448b03a 	or	r4,r4,r17
 c003408:	c00bd300 	call	c00bd30 <__floatunsidf>
 c00340c:	017f8434 	movhi	r5,65040
 c003410:	01800044 	movi	r6,1
 c003414:	1009883a 	mov	r4,r2
 c003418:	194b883a 	add	r5,r3,r5
 c00341c:	843fffc4 	addi	r16,r16,-1
 c003420:	d9801115 	stw	r6,68(sp)
 c003424:	000d883a 	mov	r6,zero
 c003428:	01cffe34 	movhi	r7,16376
 c00342c:	c00b2d80 	call	c00b2d8 <__subdf3>
 c003430:	0198dbf4 	movhi	r6,25455
 c003434:	01cff4f4 	movhi	r7,16339
 c003438:	3190d844 	addi	r6,r6,17249
 c00343c:	39e1e9c4 	addi	r7,r7,-30809
 c003440:	1009883a 	mov	r4,r2
 c003444:	180b883a 	mov	r5,r3
 c003448:	c00aa6c0 	call	c00aa6c <__muldf3>
 c00344c:	01a2d874 	movhi	r6,35681
 c003450:	01cff1f4 	movhi	r7,16327
 c003454:	31b22cc4 	addi	r6,r6,-14157
 c003458:	39e28a04 	addi	r7,r7,-30168
 c00345c:	180b883a 	mov	r5,r3
 c003460:	1009883a 	mov	r4,r2
 c003464:	c0095980 	call	c009598 <__adddf3>
 c003468:	8009883a 	mov	r4,r16
 c00346c:	1029883a 	mov	r20,r2
 c003470:	1823883a 	mov	r17,r3
 c003474:	c00bc540 	call	c00bc54 <__floatsidf>
 c003478:	019427f4 	movhi	r6,20639
 c00347c:	01cff4f4 	movhi	r7,16339
 c003480:	319e7ec4 	addi	r6,r6,31227
 c003484:	39d104c4 	addi	r7,r7,17427
 c003488:	1009883a 	mov	r4,r2
 c00348c:	180b883a 	mov	r5,r3
 c003490:	c00aa6c0 	call	c00aa6c <__muldf3>
 c003494:	100d883a 	mov	r6,r2
 c003498:	180f883a 	mov	r7,r3
 c00349c:	a009883a 	mov	r4,r20
 c0034a0:	880b883a 	mov	r5,r17
 c0034a4:	c0095980 	call	c009598 <__adddf3>
 c0034a8:	1009883a 	mov	r4,r2
 c0034ac:	180b883a 	mov	r5,r3
 c0034b0:	1029883a 	mov	r20,r2
 c0034b4:	1823883a 	mov	r17,r3
 c0034b8:	c00bbd40 	call	c00bbd4 <__fixdfsi>
 c0034bc:	000d883a 	mov	r6,zero
 c0034c0:	000f883a 	mov	r7,zero
 c0034c4:	a009883a 	mov	r4,r20
 c0034c8:	880b883a 	mov	r5,r17
 c0034cc:	d8800515 	stw	r2,20(sp)
 c0034d0:	c00a9780 	call	c00a978 <__ledf2>
 c0034d4:	10028716 	blt	r2,zero,c003ef4 <_dtoa_r+0xc88>
 c0034d8:	d8c00517 	ldw	r3,20(sp)
 c0034dc:	00800584 	movi	r2,22
 c0034e0:	10c27536 	bltu	r2,r3,c003eb8 <_dtoa_r+0xc4c>
 c0034e4:	180490fa 	slli	r2,r3,3
 c0034e8:	00c30074 	movhi	r3,3073
 c0034ec:	18f8cb04 	addi	r3,r3,-7380
 c0034f0:	1885883a 	add	r2,r3,r2
 c0034f4:	11000017 	ldw	r4,0(r2)
 c0034f8:	11400117 	ldw	r5,4(r2)
 c0034fc:	900d883a 	mov	r6,r18
 c003500:	980f883a 	mov	r7,r19
 c003504:	c00a89c0 	call	c00a89c <__gedf2>
 c003508:	00828d0e 	bge	zero,r2,c003f40 <_dtoa_r+0xcd4>
 c00350c:	d9000517 	ldw	r4,20(sp)
 c003510:	d8000e15 	stw	zero,56(sp)
 c003514:	213fffc4 	addi	r4,r4,-1
 c003518:	d9000515 	stw	r4,20(sp)
 c00351c:	b42dc83a 	sub	r22,r22,r16
 c003520:	b5bfffc4 	addi	r22,r22,-1
 c003524:	b0026f16 	blt	r22,zero,c003ee4 <_dtoa_r+0xc78>
 c003528:	d8000815 	stw	zero,32(sp)
 c00352c:	d9c00517 	ldw	r7,20(sp)
 c003530:	38026416 	blt	r7,zero,c003ec4 <_dtoa_r+0xc58>
 c003534:	b1ed883a 	add	r22,r22,r7
 c003538:	d9c00d15 	stw	r7,52(sp)
 c00353c:	d8000a15 	stw	zero,40(sp)
 c003540:	d9800317 	ldw	r6,12(sp)
 c003544:	00800244 	movi	r2,9
 c003548:	11811436 	bltu	r2,r6,c00399c <_dtoa_r+0x730>
 c00354c:	00800144 	movi	r2,5
 c003550:	1184e10e 	bge	r2,r6,c0048d8 <_dtoa_r+0x166c>
 c003554:	31bfff04 	addi	r6,r6,-4
 c003558:	d9800315 	stw	r6,12(sp)
 c00355c:	0023883a 	mov	r17,zero
 c003560:	d9800317 	ldw	r6,12(sp)
 c003564:	008000c4 	movi	r2,3
 c003568:	30836726 	beq	r6,r2,c004308 <_dtoa_r+0x109c>
 c00356c:	1183410e 	bge	r2,r6,c004274 <_dtoa_r+0x1008>
 c003570:	d9c00317 	ldw	r7,12(sp)
 c003574:	00800104 	movi	r2,4
 c003578:	38827c26 	beq	r7,r2,c003f6c <_dtoa_r+0xd00>
 c00357c:	00800144 	movi	r2,5
 c003580:	3884c41e 	bne	r7,r2,c004894 <_dtoa_r+0x1628>
 c003584:	00800044 	movi	r2,1
 c003588:	d8800b15 	stw	r2,44(sp)
 c00358c:	d8c00517 	ldw	r3,20(sp)
 c003590:	d9002217 	ldw	r4,136(sp)
 c003594:	1907883a 	add	r3,r3,r4
 c003598:	19800044 	addi	r6,r3,1
 c00359c:	d8c00c15 	stw	r3,48(sp)
 c0035a0:	d9800615 	stw	r6,24(sp)
 c0035a4:	0183a40e 	bge	zero,r6,c004438 <_dtoa_r+0x11cc>
 c0035a8:	d9800617 	ldw	r6,24(sp)
 c0035ac:	3021883a 	mov	r16,r6
 c0035b0:	e0001115 	stw	zero,68(fp)
 c0035b4:	008005c4 	movi	r2,23
 c0035b8:	1184c92e 	bgeu	r2,r6,c0048e0 <_dtoa_r+0x1674>
 c0035bc:	00c00044 	movi	r3,1
 c0035c0:	00800104 	movi	r2,4
 c0035c4:	1085883a 	add	r2,r2,r2
 c0035c8:	11000504 	addi	r4,r2,20
 c0035cc:	180b883a 	mov	r5,r3
 c0035d0:	18c00044 	addi	r3,r3,1
 c0035d4:	313ffb2e 	bgeu	r6,r4,c0035c4 <__alt_data_end+0xfc0035c4>
 c0035d8:	e1401115 	stw	r5,68(fp)
 c0035dc:	e009883a 	mov	r4,fp
 c0035e0:	c0054080 	call	c005408 <_Balloc>
 c0035e4:	d8800715 	stw	r2,28(sp)
 c0035e8:	e0801015 	stw	r2,64(fp)
 c0035ec:	00800384 	movi	r2,14
 c0035f0:	1400f736 	bltu	r2,r16,c0039d0 <_dtoa_r+0x764>
 c0035f4:	8800f626 	beq	r17,zero,c0039d0 <_dtoa_r+0x764>
 c0035f8:	d9c00517 	ldw	r7,20(sp)
 c0035fc:	01c39a0e 	bge	zero,r7,c004468 <_dtoa_r+0x11fc>
 c003600:	388003cc 	andi	r2,r7,15
 c003604:	100490fa 	slli	r2,r2,3
 c003608:	382bd13a 	srai	r21,r7,4
 c00360c:	00c30074 	movhi	r3,3073
 c003610:	18f8cb04 	addi	r3,r3,-7380
 c003614:	1885883a 	add	r2,r3,r2
 c003618:	a8c0040c 	andi	r3,r21,16
 c00361c:	12400017 	ldw	r9,0(r2)
 c003620:	12000117 	ldw	r8,4(r2)
 c003624:	18037926 	beq	r3,zero,c00440c <_dtoa_r+0x11a0>
 c003628:	00830074 	movhi	r2,3073
 c00362c:	10b8c104 	addi	r2,r2,-7420
 c003630:	11800817 	ldw	r6,32(r2)
 c003634:	11c00917 	ldw	r7,36(r2)
 c003638:	9009883a 	mov	r4,r18
 c00363c:	980b883a 	mov	r5,r19
 c003640:	da001715 	stw	r8,92(sp)
 c003644:	da401615 	stw	r9,88(sp)
 c003648:	c009e440 	call	c009e44 <__divdf3>
 c00364c:	da001717 	ldw	r8,92(sp)
 c003650:	da401617 	ldw	r9,88(sp)
 c003654:	ad4003cc 	andi	r21,r21,15
 c003658:	040000c4 	movi	r16,3
 c00365c:	1023883a 	mov	r17,r2
 c003660:	1829883a 	mov	r20,r3
 c003664:	a8001126 	beq	r21,zero,c0036ac <_dtoa_r+0x440>
 c003668:	05c30074 	movhi	r23,3073
 c00366c:	bdf8c104 	addi	r23,r23,-7420
 c003670:	4805883a 	mov	r2,r9
 c003674:	4007883a 	mov	r3,r8
 c003678:	a980004c 	andi	r6,r21,1
 c00367c:	1009883a 	mov	r4,r2
 c003680:	a82bd07a 	srai	r21,r21,1
 c003684:	180b883a 	mov	r5,r3
 c003688:	30000426 	beq	r6,zero,c00369c <_dtoa_r+0x430>
 c00368c:	b9800017 	ldw	r6,0(r23)
 c003690:	b9c00117 	ldw	r7,4(r23)
 c003694:	84000044 	addi	r16,r16,1
 c003698:	c00aa6c0 	call	c00aa6c <__muldf3>
 c00369c:	bdc00204 	addi	r23,r23,8
 c0036a0:	a83ff51e 	bne	r21,zero,c003678 <__alt_data_end+0xfc003678>
 c0036a4:	1013883a 	mov	r9,r2
 c0036a8:	1811883a 	mov	r8,r3
 c0036ac:	480d883a 	mov	r6,r9
 c0036b0:	400f883a 	mov	r7,r8
 c0036b4:	8809883a 	mov	r4,r17
 c0036b8:	a00b883a 	mov	r5,r20
 c0036bc:	c009e440 	call	c009e44 <__divdf3>
 c0036c0:	d8800f15 	stw	r2,60(sp)
 c0036c4:	d8c01015 	stw	r3,64(sp)
 c0036c8:	d8c00e17 	ldw	r3,56(sp)
 c0036cc:	18000626 	beq	r3,zero,c0036e8 <_dtoa_r+0x47c>
 c0036d0:	d9000f17 	ldw	r4,60(sp)
 c0036d4:	d9401017 	ldw	r5,64(sp)
 c0036d8:	000d883a 	mov	r6,zero
 c0036dc:	01cffc34 	movhi	r7,16368
 c0036e0:	c00a9780 	call	c00a978 <__ledf2>
 c0036e4:	10040b16 	blt	r2,zero,c004714 <_dtoa_r+0x14a8>
 c0036e8:	8009883a 	mov	r4,r16
 c0036ec:	c00bc540 	call	c00bc54 <__floatsidf>
 c0036f0:	d9800f17 	ldw	r6,60(sp)
 c0036f4:	d9c01017 	ldw	r7,64(sp)
 c0036f8:	1009883a 	mov	r4,r2
 c0036fc:	180b883a 	mov	r5,r3
 c003700:	c00aa6c0 	call	c00aa6c <__muldf3>
 c003704:	000d883a 	mov	r6,zero
 c003708:	01d00734 	movhi	r7,16412
 c00370c:	1009883a 	mov	r4,r2
 c003710:	180b883a 	mov	r5,r3
 c003714:	c0095980 	call	c009598 <__adddf3>
 c003718:	1021883a 	mov	r16,r2
 c00371c:	d8800617 	ldw	r2,24(sp)
 c003720:	047f3034 	movhi	r17,64704
 c003724:	1c63883a 	add	r17,r3,r17
 c003728:	10031826 	beq	r2,zero,c00438c <_dtoa_r+0x1120>
 c00372c:	d8c00517 	ldw	r3,20(sp)
 c003730:	db000617 	ldw	r12,24(sp)
 c003734:	d8c01315 	stw	r3,76(sp)
 c003738:	d9000b17 	ldw	r4,44(sp)
 c00373c:	20038f26 	beq	r4,zero,c00457c <_dtoa_r+0x1310>
 c003740:	60bfffc4 	addi	r2,r12,-1
 c003744:	100490fa 	slli	r2,r2,3
 c003748:	00c30074 	movhi	r3,3073
 c00374c:	18f8cb04 	addi	r3,r3,-7380
 c003750:	1885883a 	add	r2,r3,r2
 c003754:	11800017 	ldw	r6,0(r2)
 c003758:	11c00117 	ldw	r7,4(r2)
 c00375c:	d8800717 	ldw	r2,28(sp)
 c003760:	0009883a 	mov	r4,zero
 c003764:	014ff834 	movhi	r5,16352
 c003768:	db001615 	stw	r12,88(sp)
 c00376c:	15c00044 	addi	r23,r2,1
 c003770:	c009e440 	call	c009e44 <__divdf3>
 c003774:	800d883a 	mov	r6,r16
 c003778:	880f883a 	mov	r7,r17
 c00377c:	1009883a 	mov	r4,r2
 c003780:	180b883a 	mov	r5,r3
 c003784:	c00b2d80 	call	c00b2d8 <__subdf3>
 c003788:	d9401017 	ldw	r5,64(sp)
 c00378c:	d9000f17 	ldw	r4,60(sp)
 c003790:	102b883a 	mov	r21,r2
 c003794:	d8c01215 	stw	r3,72(sp)
 c003798:	c00bbd40 	call	c00bbd4 <__fixdfsi>
 c00379c:	1009883a 	mov	r4,r2
 c0037a0:	1029883a 	mov	r20,r2
 c0037a4:	c00bc540 	call	c00bc54 <__floatsidf>
 c0037a8:	d9000f17 	ldw	r4,60(sp)
 c0037ac:	d9401017 	ldw	r5,64(sp)
 c0037b0:	100d883a 	mov	r6,r2
 c0037b4:	180f883a 	mov	r7,r3
 c0037b8:	c00b2d80 	call	c00b2d8 <__subdf3>
 c0037bc:	1823883a 	mov	r17,r3
 c0037c0:	d8c00717 	ldw	r3,28(sp)
 c0037c4:	d9401217 	ldw	r5,72(sp)
 c0037c8:	a2000c04 	addi	r8,r20,48
 c0037cc:	1021883a 	mov	r16,r2
 c0037d0:	1a000005 	stb	r8,0(r3)
 c0037d4:	800d883a 	mov	r6,r16
 c0037d8:	880f883a 	mov	r7,r17
 c0037dc:	a809883a 	mov	r4,r21
 c0037e0:	4029883a 	mov	r20,r8
 c0037e4:	c00a89c0 	call	c00a89c <__gedf2>
 c0037e8:	00841d16 	blt	zero,r2,c004860 <_dtoa_r+0x15f4>
 c0037ec:	800d883a 	mov	r6,r16
 c0037f0:	880f883a 	mov	r7,r17
 c0037f4:	0009883a 	mov	r4,zero
 c0037f8:	014ffc34 	movhi	r5,16368
 c0037fc:	c00b2d80 	call	c00b2d8 <__subdf3>
 c003800:	d9401217 	ldw	r5,72(sp)
 c003804:	100d883a 	mov	r6,r2
 c003808:	180f883a 	mov	r7,r3
 c00380c:	a809883a 	mov	r4,r21
 c003810:	c00a89c0 	call	c00a89c <__gedf2>
 c003814:	db001617 	ldw	r12,88(sp)
 c003818:	00840e16 	blt	zero,r2,c004854 <_dtoa_r+0x15e8>
 c00381c:	00800044 	movi	r2,1
 c003820:	13006b0e 	bge	r2,r12,c0039d0 <_dtoa_r+0x764>
 c003824:	d9000717 	ldw	r4,28(sp)
 c003828:	dd800f15 	stw	r22,60(sp)
 c00382c:	dcc01015 	stw	r19,64(sp)
 c003830:	2319883a 	add	r12,r4,r12
 c003834:	dcc01217 	ldw	r19,72(sp)
 c003838:	602d883a 	mov	r22,r12
 c00383c:	dc801215 	stw	r18,72(sp)
 c003840:	b825883a 	mov	r18,r23
 c003844:	00000906 	br	c00386c <_dtoa_r+0x600>
 c003848:	c00b2d80 	call	c00b2d8 <__subdf3>
 c00384c:	a80d883a 	mov	r6,r21
 c003850:	980f883a 	mov	r7,r19
 c003854:	1009883a 	mov	r4,r2
 c003858:	180b883a 	mov	r5,r3
 c00385c:	c00a9780 	call	c00a978 <__ledf2>
 c003860:	1003e816 	blt	r2,zero,c004804 <_dtoa_r+0x1598>
 c003864:	b825883a 	mov	r18,r23
 c003868:	bd83e926 	beq	r23,r22,c004810 <_dtoa_r+0x15a4>
 c00386c:	a809883a 	mov	r4,r21
 c003870:	980b883a 	mov	r5,r19
 c003874:	000d883a 	mov	r6,zero
 c003878:	01d00934 	movhi	r7,16420
 c00387c:	c00aa6c0 	call	c00aa6c <__muldf3>
 c003880:	000d883a 	mov	r6,zero
 c003884:	01d00934 	movhi	r7,16420
 c003888:	8009883a 	mov	r4,r16
 c00388c:	880b883a 	mov	r5,r17
 c003890:	102b883a 	mov	r21,r2
 c003894:	1827883a 	mov	r19,r3
 c003898:	c00aa6c0 	call	c00aa6c <__muldf3>
 c00389c:	180b883a 	mov	r5,r3
 c0038a0:	1009883a 	mov	r4,r2
 c0038a4:	1821883a 	mov	r16,r3
 c0038a8:	1023883a 	mov	r17,r2
 c0038ac:	c00bbd40 	call	c00bbd4 <__fixdfsi>
 c0038b0:	1009883a 	mov	r4,r2
 c0038b4:	1029883a 	mov	r20,r2
 c0038b8:	c00bc540 	call	c00bc54 <__floatsidf>
 c0038bc:	8809883a 	mov	r4,r17
 c0038c0:	800b883a 	mov	r5,r16
 c0038c4:	100d883a 	mov	r6,r2
 c0038c8:	180f883a 	mov	r7,r3
 c0038cc:	c00b2d80 	call	c00b2d8 <__subdf3>
 c0038d0:	a5000c04 	addi	r20,r20,48
 c0038d4:	a80d883a 	mov	r6,r21
 c0038d8:	980f883a 	mov	r7,r19
 c0038dc:	1009883a 	mov	r4,r2
 c0038e0:	180b883a 	mov	r5,r3
 c0038e4:	95000005 	stb	r20,0(r18)
 c0038e8:	1021883a 	mov	r16,r2
 c0038ec:	1823883a 	mov	r17,r3
 c0038f0:	c00a9780 	call	c00a978 <__ledf2>
 c0038f4:	bdc00044 	addi	r23,r23,1
 c0038f8:	800d883a 	mov	r6,r16
 c0038fc:	880f883a 	mov	r7,r17
 c003900:	0009883a 	mov	r4,zero
 c003904:	014ffc34 	movhi	r5,16368
 c003908:	103fcf0e 	bge	r2,zero,c003848 <__alt_data_end+0xfc003848>
 c00390c:	d8c01317 	ldw	r3,76(sp)
 c003910:	d8c00515 	stw	r3,20(sp)
 c003914:	d9400917 	ldw	r5,36(sp)
 c003918:	e009883a 	mov	r4,fp
 c00391c:	c0054b00 	call	c0054b0 <_Bfree>
 c003920:	d9000517 	ldw	r4,20(sp)
 c003924:	d9802317 	ldw	r6,140(sp)
 c003928:	d9c02517 	ldw	r7,148(sp)
 c00392c:	b8000005 	stb	zero,0(r23)
 c003930:	20800044 	addi	r2,r4,1
 c003934:	30800015 	stw	r2,0(r6)
 c003938:	3802aa26 	beq	r7,zero,c0043e4 <_dtoa_r+0x1178>
 c00393c:	3dc00015 	stw	r23,0(r7)
 c003940:	d8800717 	ldw	r2,28(sp)
 c003944:	003e7906 	br	c00332c <__alt_data_end+0xfc00332c>
 c003948:	00800434 	movhi	r2,16
 c00394c:	10bfffc4 	addi	r2,r2,-1
 c003950:	88a2703a 	and	r17,r17,r2
 c003954:	883e851e 	bne	r17,zero,c00336c <__alt_data_end+0xfc00336c>
 c003958:	00830074 	movhi	r2,3073
 c00395c:	10b8ac04 	addi	r2,r2,-7504
 c003960:	003e8406 	br	c003374 <__alt_data_end+0xfc003374>
 c003964:	10c00204 	addi	r3,r2,8
 c003968:	003e8706 	br	c003388 <__alt_data_end+0xfc003388>
 c00396c:	01400434 	movhi	r5,16
 c003970:	297fffc4 	addi	r5,r5,-1
 c003974:	994a703a 	and	r5,r19,r5
 c003978:	9009883a 	mov	r4,r18
 c00397c:	843f0044 	addi	r16,r16,-1023
 c003980:	294ffc34 	orhi	r5,r5,16368
 c003984:	dd800217 	ldw	r22,8(sp)
 c003988:	d8001115 	stw	zero,68(sp)
 c00398c:	003ea506 	br	c003424 <__alt_data_end+0xfc003424>
 c003990:	00830074 	movhi	r2,3073
 c003994:	10b8a304 	addi	r2,r2,-7540
 c003998:	003e6406 	br	c00332c <__alt_data_end+0xfc00332c>
 c00399c:	e0001115 	stw	zero,68(fp)
 c0039a0:	000b883a 	mov	r5,zero
 c0039a4:	e009883a 	mov	r4,fp
 c0039a8:	c0054080 	call	c005408 <_Balloc>
 c0039ac:	01bfffc4 	movi	r6,-1
 c0039b0:	01c00044 	movi	r7,1
 c0039b4:	d8800715 	stw	r2,28(sp)
 c0039b8:	d9800c15 	stw	r6,48(sp)
 c0039bc:	e0801015 	stw	r2,64(fp)
 c0039c0:	d8000315 	stw	zero,12(sp)
 c0039c4:	d9c00b15 	stw	r7,44(sp)
 c0039c8:	d9800615 	stw	r6,24(sp)
 c0039cc:	d8002215 	stw	zero,136(sp)
 c0039d0:	d8800117 	ldw	r2,4(sp)
 c0039d4:	10008916 	blt	r2,zero,c003bfc <_dtoa_r+0x990>
 c0039d8:	d9000517 	ldw	r4,20(sp)
 c0039dc:	00c00384 	movi	r3,14
 c0039e0:	19008616 	blt	r3,r4,c003bfc <_dtoa_r+0x990>
 c0039e4:	200490fa 	slli	r2,r4,3
 c0039e8:	00c30074 	movhi	r3,3073
 c0039ec:	d9802217 	ldw	r6,136(sp)
 c0039f0:	18f8cb04 	addi	r3,r3,-7380
 c0039f4:	1885883a 	add	r2,r3,r2
 c0039f8:	14000017 	ldw	r16,0(r2)
 c0039fc:	14400117 	ldw	r17,4(r2)
 c003a00:	30016316 	blt	r6,zero,c003f90 <_dtoa_r+0xd24>
 c003a04:	800d883a 	mov	r6,r16
 c003a08:	880f883a 	mov	r7,r17
 c003a0c:	9009883a 	mov	r4,r18
 c003a10:	980b883a 	mov	r5,r19
 c003a14:	c009e440 	call	c009e44 <__divdf3>
 c003a18:	180b883a 	mov	r5,r3
 c003a1c:	1009883a 	mov	r4,r2
 c003a20:	c00bbd40 	call	c00bbd4 <__fixdfsi>
 c003a24:	1009883a 	mov	r4,r2
 c003a28:	102b883a 	mov	r21,r2
 c003a2c:	c00bc540 	call	c00bc54 <__floatsidf>
 c003a30:	800d883a 	mov	r6,r16
 c003a34:	880f883a 	mov	r7,r17
 c003a38:	1009883a 	mov	r4,r2
 c003a3c:	180b883a 	mov	r5,r3
 c003a40:	c00aa6c0 	call	c00aa6c <__muldf3>
 c003a44:	100d883a 	mov	r6,r2
 c003a48:	180f883a 	mov	r7,r3
 c003a4c:	9009883a 	mov	r4,r18
 c003a50:	980b883a 	mov	r5,r19
 c003a54:	c00b2d80 	call	c00b2d8 <__subdf3>
 c003a58:	d9c00717 	ldw	r7,28(sp)
 c003a5c:	1009883a 	mov	r4,r2
 c003a60:	a8800c04 	addi	r2,r21,48
 c003a64:	38800005 	stb	r2,0(r7)
 c003a68:	3dc00044 	addi	r23,r7,1
 c003a6c:	d9c00617 	ldw	r7,24(sp)
 c003a70:	01800044 	movi	r6,1
 c003a74:	180b883a 	mov	r5,r3
 c003a78:	2005883a 	mov	r2,r4
 c003a7c:	39803826 	beq	r7,r6,c003b60 <_dtoa_r+0x8f4>
 c003a80:	000d883a 	mov	r6,zero
 c003a84:	01d00934 	movhi	r7,16420
 c003a88:	c00aa6c0 	call	c00aa6c <__muldf3>
 c003a8c:	000d883a 	mov	r6,zero
 c003a90:	000f883a 	mov	r7,zero
 c003a94:	1009883a 	mov	r4,r2
 c003a98:	180b883a 	mov	r5,r3
 c003a9c:	1025883a 	mov	r18,r2
 c003aa0:	1827883a 	mov	r19,r3
 c003aa4:	c00a8140 	call	c00a814 <__eqdf2>
 c003aa8:	103f9a26 	beq	r2,zero,c003914 <__alt_data_end+0xfc003914>
 c003aac:	d9c00617 	ldw	r7,24(sp)
 c003ab0:	d8c00717 	ldw	r3,28(sp)
 c003ab4:	b829883a 	mov	r20,r23
 c003ab8:	38bfffc4 	addi	r2,r7,-1
 c003abc:	18ad883a 	add	r22,r3,r2
 c003ac0:	00000a06 	br	c003aec <_dtoa_r+0x880>
 c003ac4:	c00aa6c0 	call	c00aa6c <__muldf3>
 c003ac8:	000d883a 	mov	r6,zero
 c003acc:	000f883a 	mov	r7,zero
 c003ad0:	1009883a 	mov	r4,r2
 c003ad4:	180b883a 	mov	r5,r3
 c003ad8:	1025883a 	mov	r18,r2
 c003adc:	1827883a 	mov	r19,r3
 c003ae0:	b829883a 	mov	r20,r23
 c003ae4:	c00a8140 	call	c00a814 <__eqdf2>
 c003ae8:	103f8a26 	beq	r2,zero,c003914 <__alt_data_end+0xfc003914>
 c003aec:	800d883a 	mov	r6,r16
 c003af0:	880f883a 	mov	r7,r17
 c003af4:	9009883a 	mov	r4,r18
 c003af8:	980b883a 	mov	r5,r19
 c003afc:	c009e440 	call	c009e44 <__divdf3>
 c003b00:	180b883a 	mov	r5,r3
 c003b04:	1009883a 	mov	r4,r2
 c003b08:	c00bbd40 	call	c00bbd4 <__fixdfsi>
 c003b0c:	1009883a 	mov	r4,r2
 c003b10:	102b883a 	mov	r21,r2
 c003b14:	c00bc540 	call	c00bc54 <__floatsidf>
 c003b18:	800d883a 	mov	r6,r16
 c003b1c:	880f883a 	mov	r7,r17
 c003b20:	1009883a 	mov	r4,r2
 c003b24:	180b883a 	mov	r5,r3
 c003b28:	c00aa6c0 	call	c00aa6c <__muldf3>
 c003b2c:	100d883a 	mov	r6,r2
 c003b30:	180f883a 	mov	r7,r3
 c003b34:	9009883a 	mov	r4,r18
 c003b38:	980b883a 	mov	r5,r19
 c003b3c:	c00b2d80 	call	c00b2d8 <__subdf3>
 c003b40:	aa000c04 	addi	r8,r21,48
 c003b44:	a2000005 	stb	r8,0(r20)
 c003b48:	000d883a 	mov	r6,zero
 c003b4c:	01d00934 	movhi	r7,16420
 c003b50:	1009883a 	mov	r4,r2
 c003b54:	180b883a 	mov	r5,r3
 c003b58:	a5c00044 	addi	r23,r20,1
 c003b5c:	b53fd91e 	bne	r22,r20,c003ac4 <__alt_data_end+0xfc003ac4>
 c003b60:	100d883a 	mov	r6,r2
 c003b64:	180f883a 	mov	r7,r3
 c003b68:	1009883a 	mov	r4,r2
 c003b6c:	180b883a 	mov	r5,r3
 c003b70:	c0095980 	call	c009598 <__adddf3>
 c003b74:	100d883a 	mov	r6,r2
 c003b78:	180f883a 	mov	r7,r3
 c003b7c:	8009883a 	mov	r4,r16
 c003b80:	880b883a 	mov	r5,r17
 c003b84:	1027883a 	mov	r19,r2
 c003b88:	1825883a 	mov	r18,r3
 c003b8c:	c00a9780 	call	c00a978 <__ledf2>
 c003b90:	10000816 	blt	r2,zero,c003bb4 <_dtoa_r+0x948>
 c003b94:	980d883a 	mov	r6,r19
 c003b98:	900f883a 	mov	r7,r18
 c003b9c:	8009883a 	mov	r4,r16
 c003ba0:	880b883a 	mov	r5,r17
 c003ba4:	c00a8140 	call	c00a814 <__eqdf2>
 c003ba8:	103f5a1e 	bne	r2,zero,c003914 <__alt_data_end+0xfc003914>
 c003bac:	ad40004c 	andi	r21,r21,1
 c003bb0:	a83f5826 	beq	r21,zero,c003914 <__alt_data_end+0xfc003914>
 c003bb4:	bd3fffc3 	ldbu	r20,-1(r23)
 c003bb8:	b8bfffc4 	addi	r2,r23,-1
 c003bbc:	1007883a 	mov	r3,r2
 c003bc0:	01400e44 	movi	r5,57
 c003bc4:	d9800717 	ldw	r6,28(sp)
 c003bc8:	00000506 	br	c003be0 <_dtoa_r+0x974>
 c003bcc:	18ffffc4 	addi	r3,r3,-1
 c003bd0:	11824726 	beq	r2,r6,c0044f0 <_dtoa_r+0x1284>
 c003bd4:	1d000003 	ldbu	r20,0(r3)
 c003bd8:	102f883a 	mov	r23,r2
 c003bdc:	10bfffc4 	addi	r2,r2,-1
 c003be0:	a1003fcc 	andi	r4,r20,255
 c003be4:	2100201c 	xori	r4,r4,128
 c003be8:	213fe004 	addi	r4,r4,-128
 c003bec:	217ff726 	beq	r4,r5,c003bcc <__alt_data_end+0xfc003bcc>
 c003bf0:	a2000044 	addi	r8,r20,1
 c003bf4:	12000005 	stb	r8,0(r2)
 c003bf8:	003f4606 	br	c003914 <__alt_data_end+0xfc003914>
 c003bfc:	d9000b17 	ldw	r4,44(sp)
 c003c00:	2000c826 	beq	r4,zero,c003f24 <_dtoa_r+0xcb8>
 c003c04:	d9800317 	ldw	r6,12(sp)
 c003c08:	00c00044 	movi	r3,1
 c003c0c:	1980f90e 	bge	r3,r6,c003ff4 <_dtoa_r+0xd88>
 c003c10:	d8800617 	ldw	r2,24(sp)
 c003c14:	d8c00a17 	ldw	r3,40(sp)
 c003c18:	157fffc4 	addi	r21,r2,-1
 c003c1c:	1d41f316 	blt	r3,r21,c0043ec <_dtoa_r+0x1180>
 c003c20:	1d6bc83a 	sub	r21,r3,r21
 c003c24:	d9c00617 	ldw	r7,24(sp)
 c003c28:	3802aa16 	blt	r7,zero,c0046d4 <_dtoa_r+0x1468>
 c003c2c:	dd000817 	ldw	r20,32(sp)
 c003c30:	d8800617 	ldw	r2,24(sp)
 c003c34:	d8c00817 	ldw	r3,32(sp)
 c003c38:	01400044 	movi	r5,1
 c003c3c:	e009883a 	mov	r4,fp
 c003c40:	1887883a 	add	r3,r3,r2
 c003c44:	d8c00815 	stw	r3,32(sp)
 c003c48:	b0ad883a 	add	r22,r22,r2
 c003c4c:	c00583c0 	call	c00583c <__i2b>
 c003c50:	1023883a 	mov	r17,r2
 c003c54:	a0000826 	beq	r20,zero,c003c78 <_dtoa_r+0xa0c>
 c003c58:	0580070e 	bge	zero,r22,c003c78 <_dtoa_r+0xa0c>
 c003c5c:	a005883a 	mov	r2,r20
 c003c60:	b500b916 	blt	r22,r20,c003f48 <_dtoa_r+0xcdc>
 c003c64:	d9000817 	ldw	r4,32(sp)
 c003c68:	a0a9c83a 	sub	r20,r20,r2
 c003c6c:	b0adc83a 	sub	r22,r22,r2
 c003c70:	2089c83a 	sub	r4,r4,r2
 c003c74:	d9000815 	stw	r4,32(sp)
 c003c78:	d9800a17 	ldw	r6,40(sp)
 c003c7c:	0181810e 	bge	zero,r6,c004284 <_dtoa_r+0x1018>
 c003c80:	d9c00b17 	ldw	r7,44(sp)
 c003c84:	3800b326 	beq	r7,zero,c003f54 <_dtoa_r+0xce8>
 c003c88:	a800b226 	beq	r21,zero,c003f54 <_dtoa_r+0xce8>
 c003c8c:	880b883a 	mov	r5,r17
 c003c90:	a80d883a 	mov	r6,r21
 c003c94:	e009883a 	mov	r4,fp
 c003c98:	c005b040 	call	c005b04 <__pow5mult>
 c003c9c:	d9800917 	ldw	r6,36(sp)
 c003ca0:	100b883a 	mov	r5,r2
 c003ca4:	e009883a 	mov	r4,fp
 c003ca8:	1023883a 	mov	r17,r2
 c003cac:	c0058780 	call	c005878 <__multiply>
 c003cb0:	1021883a 	mov	r16,r2
 c003cb4:	d8800a17 	ldw	r2,40(sp)
 c003cb8:	d9400917 	ldw	r5,36(sp)
 c003cbc:	e009883a 	mov	r4,fp
 c003cc0:	1545c83a 	sub	r2,r2,r21
 c003cc4:	d8800a15 	stw	r2,40(sp)
 c003cc8:	c0054b00 	call	c0054b0 <_Bfree>
 c003ccc:	d8c00a17 	ldw	r3,40(sp)
 c003cd0:	18009f1e 	bne	r3,zero,c003f50 <_dtoa_r+0xce4>
 c003cd4:	05c00044 	movi	r23,1
 c003cd8:	e009883a 	mov	r4,fp
 c003cdc:	b80b883a 	mov	r5,r23
 c003ce0:	c00583c0 	call	c00583c <__i2b>
 c003ce4:	d9000d17 	ldw	r4,52(sp)
 c003ce8:	102b883a 	mov	r21,r2
 c003cec:	2000ce26 	beq	r4,zero,c004028 <_dtoa_r+0xdbc>
 c003cf0:	200d883a 	mov	r6,r4
 c003cf4:	100b883a 	mov	r5,r2
 c003cf8:	e009883a 	mov	r4,fp
 c003cfc:	c005b040 	call	c005b04 <__pow5mult>
 c003d00:	d9800317 	ldw	r6,12(sp)
 c003d04:	102b883a 	mov	r21,r2
 c003d08:	b981810e 	bge	r23,r6,c004310 <_dtoa_r+0x10a4>
 c003d0c:	0027883a 	mov	r19,zero
 c003d10:	a8800417 	ldw	r2,16(r21)
 c003d14:	05c00804 	movi	r23,32
 c003d18:	10800104 	addi	r2,r2,4
 c003d1c:	1085883a 	add	r2,r2,r2
 c003d20:	1085883a 	add	r2,r2,r2
 c003d24:	a885883a 	add	r2,r21,r2
 c003d28:	11000017 	ldw	r4,0(r2)
 c003d2c:	c0057240 	call	c005724 <__hi0bits>
 c003d30:	b885c83a 	sub	r2,r23,r2
 c003d34:	1585883a 	add	r2,r2,r22
 c003d38:	108007cc 	andi	r2,r2,31
 c003d3c:	1000b326 	beq	r2,zero,c00400c <_dtoa_r+0xda0>
 c003d40:	00c00804 	movi	r3,32
 c003d44:	1887c83a 	sub	r3,r3,r2
 c003d48:	01000104 	movi	r4,4
 c003d4c:	20c2cd0e 	bge	r4,r3,c004884 <_dtoa_r+0x1618>
 c003d50:	00c00704 	movi	r3,28
 c003d54:	1885c83a 	sub	r2,r3,r2
 c003d58:	d8c00817 	ldw	r3,32(sp)
 c003d5c:	a0a9883a 	add	r20,r20,r2
 c003d60:	b0ad883a 	add	r22,r22,r2
 c003d64:	1887883a 	add	r3,r3,r2
 c003d68:	d8c00815 	stw	r3,32(sp)
 c003d6c:	d9800817 	ldw	r6,32(sp)
 c003d70:	0180040e 	bge	zero,r6,c003d84 <_dtoa_r+0xb18>
 c003d74:	800b883a 	mov	r5,r16
 c003d78:	e009883a 	mov	r4,fp
 c003d7c:	c005c440 	call	c005c44 <__lshift>
 c003d80:	1021883a 	mov	r16,r2
 c003d84:	0580050e 	bge	zero,r22,c003d9c <_dtoa_r+0xb30>
 c003d88:	a80b883a 	mov	r5,r21
 c003d8c:	b00d883a 	mov	r6,r22
 c003d90:	e009883a 	mov	r4,fp
 c003d94:	c005c440 	call	c005c44 <__lshift>
 c003d98:	102b883a 	mov	r21,r2
 c003d9c:	d9c00e17 	ldw	r7,56(sp)
 c003da0:	3801211e 	bne	r7,zero,c004228 <_dtoa_r+0xfbc>
 c003da4:	d9800617 	ldw	r6,24(sp)
 c003da8:	0181380e 	bge	zero,r6,c00428c <_dtoa_r+0x1020>
 c003dac:	d8c00b17 	ldw	r3,44(sp)
 c003db0:	1800ab1e 	bne	r3,zero,c004060 <_dtoa_r+0xdf4>
 c003db4:	dc800717 	ldw	r18,28(sp)
 c003db8:	dcc00617 	ldw	r19,24(sp)
 c003dbc:	9029883a 	mov	r20,r18
 c003dc0:	00000206 	br	c003dcc <_dtoa_r+0xb60>
 c003dc4:	c0054d80 	call	c0054d8 <__multadd>
 c003dc8:	1021883a 	mov	r16,r2
 c003dcc:	a80b883a 	mov	r5,r21
 c003dd0:	8009883a 	mov	r4,r16
 c003dd4:	c0030440 	call	c003044 <quorem>
 c003dd8:	10800c04 	addi	r2,r2,48
 c003ddc:	90800005 	stb	r2,0(r18)
 c003de0:	94800044 	addi	r18,r18,1
 c003de4:	9507c83a 	sub	r3,r18,r20
 c003de8:	000f883a 	mov	r7,zero
 c003dec:	01800284 	movi	r6,10
 c003df0:	800b883a 	mov	r5,r16
 c003df4:	e009883a 	mov	r4,fp
 c003df8:	1cfff216 	blt	r3,r19,c003dc4 <__alt_data_end+0xfc003dc4>
 c003dfc:	1011883a 	mov	r8,r2
 c003e00:	d8800617 	ldw	r2,24(sp)
 c003e04:	0082370e 	bge	zero,r2,c0046e4 <_dtoa_r+0x1478>
 c003e08:	d9000717 	ldw	r4,28(sp)
 c003e0c:	0025883a 	mov	r18,zero
 c003e10:	20af883a 	add	r23,r4,r2
 c003e14:	01800044 	movi	r6,1
 c003e18:	800b883a 	mov	r5,r16
 c003e1c:	e009883a 	mov	r4,fp
 c003e20:	da001715 	stw	r8,92(sp)
 c003e24:	c005c440 	call	c005c44 <__lshift>
 c003e28:	a80b883a 	mov	r5,r21
 c003e2c:	1009883a 	mov	r4,r2
 c003e30:	d8800915 	stw	r2,36(sp)
 c003e34:	c005d8c0 	call	c005d8c <__mcmp>
 c003e38:	da001717 	ldw	r8,92(sp)
 c003e3c:	0081800e 	bge	zero,r2,c004440 <_dtoa_r+0x11d4>
 c003e40:	b93fffc3 	ldbu	r4,-1(r23)
 c003e44:	b8bfffc4 	addi	r2,r23,-1
 c003e48:	1007883a 	mov	r3,r2
 c003e4c:	01800e44 	movi	r6,57
 c003e50:	d9c00717 	ldw	r7,28(sp)
 c003e54:	00000506 	br	c003e6c <_dtoa_r+0xc00>
 c003e58:	18ffffc4 	addi	r3,r3,-1
 c003e5c:	11c12326 	beq	r2,r7,c0042ec <_dtoa_r+0x1080>
 c003e60:	19000003 	ldbu	r4,0(r3)
 c003e64:	102f883a 	mov	r23,r2
 c003e68:	10bfffc4 	addi	r2,r2,-1
 c003e6c:	21403fcc 	andi	r5,r4,255
 c003e70:	2940201c 	xori	r5,r5,128
 c003e74:	297fe004 	addi	r5,r5,-128
 c003e78:	29bff726 	beq	r5,r6,c003e58 <__alt_data_end+0xfc003e58>
 c003e7c:	21000044 	addi	r4,r4,1
 c003e80:	11000005 	stb	r4,0(r2)
 c003e84:	a80b883a 	mov	r5,r21
 c003e88:	e009883a 	mov	r4,fp
 c003e8c:	c0054b00 	call	c0054b0 <_Bfree>
 c003e90:	883ea026 	beq	r17,zero,c003914 <__alt_data_end+0xfc003914>
 c003e94:	90000426 	beq	r18,zero,c003ea8 <_dtoa_r+0xc3c>
 c003e98:	94400326 	beq	r18,r17,c003ea8 <_dtoa_r+0xc3c>
 c003e9c:	900b883a 	mov	r5,r18
 c003ea0:	e009883a 	mov	r4,fp
 c003ea4:	c0054b00 	call	c0054b0 <_Bfree>
 c003ea8:	880b883a 	mov	r5,r17
 c003eac:	e009883a 	mov	r4,fp
 c003eb0:	c0054b00 	call	c0054b0 <_Bfree>
 c003eb4:	003e9706 	br	c003914 <__alt_data_end+0xfc003914>
 c003eb8:	01800044 	movi	r6,1
 c003ebc:	d9800e15 	stw	r6,56(sp)
 c003ec0:	003d9606 	br	c00351c <__alt_data_end+0xfc00351c>
 c003ec4:	d8800817 	ldw	r2,32(sp)
 c003ec8:	d8c00517 	ldw	r3,20(sp)
 c003ecc:	d8000d15 	stw	zero,52(sp)
 c003ed0:	10c5c83a 	sub	r2,r2,r3
 c003ed4:	00c9c83a 	sub	r4,zero,r3
 c003ed8:	d8800815 	stw	r2,32(sp)
 c003edc:	d9000a15 	stw	r4,40(sp)
 c003ee0:	003d9706 	br	c003540 <__alt_data_end+0xfc003540>
 c003ee4:	05adc83a 	sub	r22,zero,r22
 c003ee8:	dd800815 	stw	r22,32(sp)
 c003eec:	002d883a 	mov	r22,zero
 c003ef0:	003d8e06 	br	c00352c <__alt_data_end+0xfc00352c>
 c003ef4:	d9000517 	ldw	r4,20(sp)
 c003ef8:	c00bc540 	call	c00bc54 <__floatsidf>
 c003efc:	100d883a 	mov	r6,r2
 c003f00:	180f883a 	mov	r7,r3
 c003f04:	a009883a 	mov	r4,r20
 c003f08:	880b883a 	mov	r5,r17
 c003f0c:	c00a8140 	call	c00a814 <__eqdf2>
 c003f10:	103d7126 	beq	r2,zero,c0034d8 <__alt_data_end+0xfc0034d8>
 c003f14:	d9c00517 	ldw	r7,20(sp)
 c003f18:	39ffffc4 	addi	r7,r7,-1
 c003f1c:	d9c00515 	stw	r7,20(sp)
 c003f20:	003d6d06 	br	c0034d8 <__alt_data_end+0xfc0034d8>
 c003f24:	dd400a17 	ldw	r21,40(sp)
 c003f28:	dd000817 	ldw	r20,32(sp)
 c003f2c:	0023883a 	mov	r17,zero
 c003f30:	003f4806 	br	c003c54 <__alt_data_end+0xfc003c54>
 c003f34:	10e3c83a 	sub	r17,r2,r3
 c003f38:	9448983a 	sll	r4,r18,r17
 c003f3c:	003d3206 	br	c003408 <__alt_data_end+0xfc003408>
 c003f40:	d8000e15 	stw	zero,56(sp)
 c003f44:	003d7506 	br	c00351c <__alt_data_end+0xfc00351c>
 c003f48:	b005883a 	mov	r2,r22
 c003f4c:	003f4506 	br	c003c64 <__alt_data_end+0xfc003c64>
 c003f50:	dc000915 	stw	r16,36(sp)
 c003f54:	d9800a17 	ldw	r6,40(sp)
 c003f58:	d9400917 	ldw	r5,36(sp)
 c003f5c:	e009883a 	mov	r4,fp
 c003f60:	c005b040 	call	c005b04 <__pow5mult>
 c003f64:	1021883a 	mov	r16,r2
 c003f68:	003f5a06 	br	c003cd4 <__alt_data_end+0xfc003cd4>
 c003f6c:	01c00044 	movi	r7,1
 c003f70:	d9c00b15 	stw	r7,44(sp)
 c003f74:	d8802217 	ldw	r2,136(sp)
 c003f78:	0081280e 	bge	zero,r2,c00441c <_dtoa_r+0x11b0>
 c003f7c:	100d883a 	mov	r6,r2
 c003f80:	1021883a 	mov	r16,r2
 c003f84:	d8800c15 	stw	r2,48(sp)
 c003f88:	d8800615 	stw	r2,24(sp)
 c003f8c:	003d8806 	br	c0035b0 <__alt_data_end+0xfc0035b0>
 c003f90:	d8800617 	ldw	r2,24(sp)
 c003f94:	00be9b16 	blt	zero,r2,c003a04 <__alt_data_end+0xfc003a04>
 c003f98:	10010f1e 	bne	r2,zero,c0043d8 <_dtoa_r+0x116c>
 c003f9c:	880b883a 	mov	r5,r17
 c003fa0:	000d883a 	mov	r6,zero
 c003fa4:	01d00534 	movhi	r7,16404
 c003fa8:	8009883a 	mov	r4,r16
 c003fac:	c00aa6c0 	call	c00aa6c <__muldf3>
 c003fb0:	900d883a 	mov	r6,r18
 c003fb4:	980f883a 	mov	r7,r19
 c003fb8:	1009883a 	mov	r4,r2
 c003fbc:	180b883a 	mov	r5,r3
 c003fc0:	c00a89c0 	call	c00a89c <__gedf2>
 c003fc4:	002b883a 	mov	r21,zero
 c003fc8:	0023883a 	mov	r17,zero
 c003fcc:	1000bf16 	blt	r2,zero,c0042cc <_dtoa_r+0x1060>
 c003fd0:	d9802217 	ldw	r6,136(sp)
 c003fd4:	ddc00717 	ldw	r23,28(sp)
 c003fd8:	018c303a 	nor	r6,zero,r6
 c003fdc:	d9800515 	stw	r6,20(sp)
 c003fe0:	a80b883a 	mov	r5,r21
 c003fe4:	e009883a 	mov	r4,fp
 c003fe8:	c0054b00 	call	c0054b0 <_Bfree>
 c003fec:	883e4926 	beq	r17,zero,c003914 <__alt_data_end+0xfc003914>
 c003ff0:	003fad06 	br	c003ea8 <__alt_data_end+0xfc003ea8>
 c003ff4:	d9c01117 	ldw	r7,68(sp)
 c003ff8:	3801bc26 	beq	r7,zero,c0046ec <_dtoa_r+0x1480>
 c003ffc:	10810cc4 	addi	r2,r2,1075
 c004000:	dd400a17 	ldw	r21,40(sp)
 c004004:	dd000817 	ldw	r20,32(sp)
 c004008:	003f0a06 	br	c003c34 <__alt_data_end+0xfc003c34>
 c00400c:	00800704 	movi	r2,28
 c004010:	d9000817 	ldw	r4,32(sp)
 c004014:	a0a9883a 	add	r20,r20,r2
 c004018:	b0ad883a 	add	r22,r22,r2
 c00401c:	2089883a 	add	r4,r4,r2
 c004020:	d9000815 	stw	r4,32(sp)
 c004024:	003f5106 	br	c003d6c <__alt_data_end+0xfc003d6c>
 c004028:	d8c00317 	ldw	r3,12(sp)
 c00402c:	b8c1fc0e 	bge	r23,r3,c004820 <_dtoa_r+0x15b4>
 c004030:	0027883a 	mov	r19,zero
 c004034:	b805883a 	mov	r2,r23
 c004038:	003f3e06 	br	c003d34 <__alt_data_end+0xfc003d34>
 c00403c:	880b883a 	mov	r5,r17
 c004040:	e009883a 	mov	r4,fp
 c004044:	000f883a 	mov	r7,zero
 c004048:	01800284 	movi	r6,10
 c00404c:	c0054d80 	call	c0054d8 <__multadd>
 c004050:	d9000c17 	ldw	r4,48(sp)
 c004054:	1023883a 	mov	r17,r2
 c004058:	0102040e 	bge	zero,r4,c00486c <_dtoa_r+0x1600>
 c00405c:	d9000615 	stw	r4,24(sp)
 c004060:	0500050e 	bge	zero,r20,c004078 <_dtoa_r+0xe0c>
 c004064:	880b883a 	mov	r5,r17
 c004068:	a00d883a 	mov	r6,r20
 c00406c:	e009883a 	mov	r4,fp
 c004070:	c005c440 	call	c005c44 <__lshift>
 c004074:	1023883a 	mov	r17,r2
 c004078:	9801241e 	bne	r19,zero,c00450c <_dtoa_r+0x12a0>
 c00407c:	8829883a 	mov	r20,r17
 c004080:	d9000617 	ldw	r4,24(sp)
 c004084:	dcc00717 	ldw	r19,28(sp)
 c004088:	9480004c 	andi	r18,r18,1
 c00408c:	20bfffc4 	addi	r2,r4,-1
 c004090:	9885883a 	add	r2,r19,r2
 c004094:	d8800415 	stw	r2,16(sp)
 c004098:	dc800615 	stw	r18,24(sp)
 c00409c:	a80b883a 	mov	r5,r21
 c0040a0:	8009883a 	mov	r4,r16
 c0040a4:	c0030440 	call	c003044 <quorem>
 c0040a8:	880b883a 	mov	r5,r17
 c0040ac:	8009883a 	mov	r4,r16
 c0040b0:	102f883a 	mov	r23,r2
 c0040b4:	c005d8c0 	call	c005d8c <__mcmp>
 c0040b8:	a80b883a 	mov	r5,r21
 c0040bc:	a00d883a 	mov	r6,r20
 c0040c0:	e009883a 	mov	r4,fp
 c0040c4:	102d883a 	mov	r22,r2
 c0040c8:	c005dec0 	call	c005dec <__mdiff>
 c0040cc:	1007883a 	mov	r3,r2
 c0040d0:	10800317 	ldw	r2,12(r2)
 c0040d4:	bc800c04 	addi	r18,r23,48
 c0040d8:	180b883a 	mov	r5,r3
 c0040dc:	10004e1e 	bne	r2,zero,c004218 <_dtoa_r+0xfac>
 c0040e0:	8009883a 	mov	r4,r16
 c0040e4:	d8c01615 	stw	r3,88(sp)
 c0040e8:	c005d8c0 	call	c005d8c <__mcmp>
 c0040ec:	d8c01617 	ldw	r3,88(sp)
 c0040f0:	e009883a 	mov	r4,fp
 c0040f4:	d8801615 	stw	r2,88(sp)
 c0040f8:	180b883a 	mov	r5,r3
 c0040fc:	c0054b00 	call	c0054b0 <_Bfree>
 c004100:	d8801617 	ldw	r2,88(sp)
 c004104:	1000041e 	bne	r2,zero,c004118 <_dtoa_r+0xeac>
 c004108:	d9800317 	ldw	r6,12(sp)
 c00410c:	3000021e 	bne	r6,zero,c004118 <_dtoa_r+0xeac>
 c004110:	d8c00617 	ldw	r3,24(sp)
 c004114:	18003726 	beq	r3,zero,c0041f4 <_dtoa_r+0xf88>
 c004118:	b0002016 	blt	r22,zero,c00419c <_dtoa_r+0xf30>
 c00411c:	b000041e 	bne	r22,zero,c004130 <_dtoa_r+0xec4>
 c004120:	d9000317 	ldw	r4,12(sp)
 c004124:	2000021e 	bne	r4,zero,c004130 <_dtoa_r+0xec4>
 c004128:	d8c00617 	ldw	r3,24(sp)
 c00412c:	18001b26 	beq	r3,zero,c00419c <_dtoa_r+0xf30>
 c004130:	00810716 	blt	zero,r2,c004550 <_dtoa_r+0x12e4>
 c004134:	d8c00417 	ldw	r3,16(sp)
 c004138:	9d800044 	addi	r22,r19,1
 c00413c:	9c800005 	stb	r18,0(r19)
 c004140:	b02f883a 	mov	r23,r22
 c004144:	98c10626 	beq	r19,r3,c004560 <_dtoa_r+0x12f4>
 c004148:	800b883a 	mov	r5,r16
 c00414c:	000f883a 	mov	r7,zero
 c004150:	01800284 	movi	r6,10
 c004154:	e009883a 	mov	r4,fp
 c004158:	c0054d80 	call	c0054d8 <__multadd>
 c00415c:	1021883a 	mov	r16,r2
 c004160:	000f883a 	mov	r7,zero
 c004164:	01800284 	movi	r6,10
 c004168:	880b883a 	mov	r5,r17
 c00416c:	e009883a 	mov	r4,fp
 c004170:	8d002526 	beq	r17,r20,c004208 <_dtoa_r+0xf9c>
 c004174:	c0054d80 	call	c0054d8 <__multadd>
 c004178:	a00b883a 	mov	r5,r20
 c00417c:	000f883a 	mov	r7,zero
 c004180:	01800284 	movi	r6,10
 c004184:	e009883a 	mov	r4,fp
 c004188:	1023883a 	mov	r17,r2
 c00418c:	c0054d80 	call	c0054d8 <__multadd>
 c004190:	1029883a 	mov	r20,r2
 c004194:	b027883a 	mov	r19,r22
 c004198:	003fc006 	br	c00409c <__alt_data_end+0xfc00409c>
 c00419c:	9011883a 	mov	r8,r18
 c0041a0:	00800e0e 	bge	zero,r2,c0041dc <_dtoa_r+0xf70>
 c0041a4:	800b883a 	mov	r5,r16
 c0041a8:	01800044 	movi	r6,1
 c0041ac:	e009883a 	mov	r4,fp
 c0041b0:	da001715 	stw	r8,92(sp)
 c0041b4:	c005c440 	call	c005c44 <__lshift>
 c0041b8:	a80b883a 	mov	r5,r21
 c0041bc:	1009883a 	mov	r4,r2
 c0041c0:	1021883a 	mov	r16,r2
 c0041c4:	c005d8c0 	call	c005d8c <__mcmp>
 c0041c8:	da001717 	ldw	r8,92(sp)
 c0041cc:	0081960e 	bge	zero,r2,c004828 <_dtoa_r+0x15bc>
 c0041d0:	00800e44 	movi	r2,57
 c0041d4:	40817026 	beq	r8,r2,c004798 <_dtoa_r+0x152c>
 c0041d8:	ba000c44 	addi	r8,r23,49
 c0041dc:	8825883a 	mov	r18,r17
 c0041e0:	9dc00044 	addi	r23,r19,1
 c0041e4:	9a000005 	stb	r8,0(r19)
 c0041e8:	a023883a 	mov	r17,r20
 c0041ec:	dc000915 	stw	r16,36(sp)
 c0041f0:	003f2406 	br	c003e84 <__alt_data_end+0xfc003e84>
 c0041f4:	00800e44 	movi	r2,57
 c0041f8:	9011883a 	mov	r8,r18
 c0041fc:	90816626 	beq	r18,r2,c004798 <_dtoa_r+0x152c>
 c004200:	05bff516 	blt	zero,r22,c0041d8 <__alt_data_end+0xfc0041d8>
 c004204:	003ff506 	br	c0041dc <__alt_data_end+0xfc0041dc>
 c004208:	c0054d80 	call	c0054d8 <__multadd>
 c00420c:	1023883a 	mov	r17,r2
 c004210:	1029883a 	mov	r20,r2
 c004214:	003fdf06 	br	c004194 <__alt_data_end+0xfc004194>
 c004218:	e009883a 	mov	r4,fp
 c00421c:	c0054b00 	call	c0054b0 <_Bfree>
 c004220:	00800044 	movi	r2,1
 c004224:	003fbc06 	br	c004118 <__alt_data_end+0xfc004118>
 c004228:	a80b883a 	mov	r5,r21
 c00422c:	8009883a 	mov	r4,r16
 c004230:	c005d8c0 	call	c005d8c <__mcmp>
 c004234:	103edb0e 	bge	r2,zero,c003da4 <__alt_data_end+0xfc003da4>
 c004238:	800b883a 	mov	r5,r16
 c00423c:	000f883a 	mov	r7,zero
 c004240:	01800284 	movi	r6,10
 c004244:	e009883a 	mov	r4,fp
 c004248:	c0054d80 	call	c0054d8 <__multadd>
 c00424c:	1021883a 	mov	r16,r2
 c004250:	d8800517 	ldw	r2,20(sp)
 c004254:	d8c00b17 	ldw	r3,44(sp)
 c004258:	10bfffc4 	addi	r2,r2,-1
 c00425c:	d8800515 	stw	r2,20(sp)
 c004260:	183f761e 	bne	r3,zero,c00403c <__alt_data_end+0xfc00403c>
 c004264:	d9000c17 	ldw	r4,48(sp)
 c004268:	0101730e 	bge	zero,r4,c004838 <_dtoa_r+0x15cc>
 c00426c:	d9000615 	stw	r4,24(sp)
 c004270:	003ed006 	br	c003db4 <__alt_data_end+0xfc003db4>
 c004274:	00800084 	movi	r2,2
 c004278:	3081861e 	bne	r6,r2,c004894 <_dtoa_r+0x1628>
 c00427c:	d8000b15 	stw	zero,44(sp)
 c004280:	003f3c06 	br	c003f74 <__alt_data_end+0xfc003f74>
 c004284:	dc000917 	ldw	r16,36(sp)
 c004288:	003e9206 	br	c003cd4 <__alt_data_end+0xfc003cd4>
 c00428c:	d9c00317 	ldw	r7,12(sp)
 c004290:	00800084 	movi	r2,2
 c004294:	11fec50e 	bge	r2,r7,c003dac <__alt_data_end+0xfc003dac>
 c004298:	d9000617 	ldw	r4,24(sp)
 c00429c:	20013c1e 	bne	r4,zero,c004790 <_dtoa_r+0x1524>
 c0042a0:	a80b883a 	mov	r5,r21
 c0042a4:	000f883a 	mov	r7,zero
 c0042a8:	01800144 	movi	r6,5
 c0042ac:	e009883a 	mov	r4,fp
 c0042b0:	c0054d80 	call	c0054d8 <__multadd>
 c0042b4:	100b883a 	mov	r5,r2
 c0042b8:	8009883a 	mov	r4,r16
 c0042bc:	102b883a 	mov	r21,r2
 c0042c0:	c005d8c0 	call	c005d8c <__mcmp>
 c0042c4:	dc000915 	stw	r16,36(sp)
 c0042c8:	00bf410e 	bge	zero,r2,c003fd0 <__alt_data_end+0xfc003fd0>
 c0042cc:	d9c00717 	ldw	r7,28(sp)
 c0042d0:	00800c44 	movi	r2,49
 c0042d4:	38800005 	stb	r2,0(r7)
 c0042d8:	d8800517 	ldw	r2,20(sp)
 c0042dc:	3dc00044 	addi	r23,r7,1
 c0042e0:	10800044 	addi	r2,r2,1
 c0042e4:	d8800515 	stw	r2,20(sp)
 c0042e8:	003f3d06 	br	c003fe0 <__alt_data_end+0xfc003fe0>
 c0042ec:	d9800517 	ldw	r6,20(sp)
 c0042f0:	d9c00717 	ldw	r7,28(sp)
 c0042f4:	00800c44 	movi	r2,49
 c0042f8:	31800044 	addi	r6,r6,1
 c0042fc:	d9800515 	stw	r6,20(sp)
 c004300:	38800005 	stb	r2,0(r7)
 c004304:	003edf06 	br	c003e84 <__alt_data_end+0xfc003e84>
 c004308:	d8000b15 	stw	zero,44(sp)
 c00430c:	003c9f06 	br	c00358c <__alt_data_end+0xfc00358c>
 c004310:	903e7e1e 	bne	r18,zero,c003d0c <__alt_data_end+0xfc003d0c>
 c004314:	00800434 	movhi	r2,16
 c004318:	10bfffc4 	addi	r2,r2,-1
 c00431c:	9884703a 	and	r2,r19,r2
 c004320:	1000ea1e 	bne	r2,zero,c0046cc <_dtoa_r+0x1460>
 c004324:	9cdffc2c 	andhi	r19,r19,32752
 c004328:	9800e826 	beq	r19,zero,c0046cc <_dtoa_r+0x1460>
 c00432c:	d9c00817 	ldw	r7,32(sp)
 c004330:	b5800044 	addi	r22,r22,1
 c004334:	04c00044 	movi	r19,1
 c004338:	39c00044 	addi	r7,r7,1
 c00433c:	d9c00815 	stw	r7,32(sp)
 c004340:	d8800d17 	ldw	r2,52(sp)
 c004344:	103e721e 	bne	r2,zero,c003d10 <__alt_data_end+0xfc003d10>
 c004348:	00800044 	movi	r2,1
 c00434c:	003e7906 	br	c003d34 <__alt_data_end+0xfc003d34>
 c004350:	8009883a 	mov	r4,r16
 c004354:	c00bc540 	call	c00bc54 <__floatsidf>
 c004358:	d9800f17 	ldw	r6,60(sp)
 c00435c:	d9c01017 	ldw	r7,64(sp)
 c004360:	1009883a 	mov	r4,r2
 c004364:	180b883a 	mov	r5,r3
 c004368:	c00aa6c0 	call	c00aa6c <__muldf3>
 c00436c:	000d883a 	mov	r6,zero
 c004370:	01d00734 	movhi	r7,16412
 c004374:	1009883a 	mov	r4,r2
 c004378:	180b883a 	mov	r5,r3
 c00437c:	c0095980 	call	c009598 <__adddf3>
 c004380:	047f3034 	movhi	r17,64704
 c004384:	1021883a 	mov	r16,r2
 c004388:	1c63883a 	add	r17,r3,r17
 c00438c:	d9000f17 	ldw	r4,60(sp)
 c004390:	d9401017 	ldw	r5,64(sp)
 c004394:	000d883a 	mov	r6,zero
 c004398:	01d00534 	movhi	r7,16404
 c00439c:	c00b2d80 	call	c00b2d8 <__subdf3>
 c0043a0:	800d883a 	mov	r6,r16
 c0043a4:	880f883a 	mov	r7,r17
 c0043a8:	1009883a 	mov	r4,r2
 c0043ac:	180b883a 	mov	r5,r3
 c0043b0:	102b883a 	mov	r21,r2
 c0043b4:	1829883a 	mov	r20,r3
 c0043b8:	c00a89c0 	call	c00a89c <__gedf2>
 c0043bc:	00806c16 	blt	zero,r2,c004570 <_dtoa_r+0x1304>
 c0043c0:	89e0003c 	xorhi	r7,r17,32768
 c0043c4:	800d883a 	mov	r6,r16
 c0043c8:	a809883a 	mov	r4,r21
 c0043cc:	a00b883a 	mov	r5,r20
 c0043d0:	c00a9780 	call	c00a978 <__ledf2>
 c0043d4:	103d7e0e 	bge	r2,zero,c0039d0 <__alt_data_end+0xfc0039d0>
 c0043d8:	002b883a 	mov	r21,zero
 c0043dc:	0023883a 	mov	r17,zero
 c0043e0:	003efb06 	br	c003fd0 <__alt_data_end+0xfc003fd0>
 c0043e4:	d8800717 	ldw	r2,28(sp)
 c0043e8:	003bd006 	br	c00332c <__alt_data_end+0xfc00332c>
 c0043ec:	d9000a17 	ldw	r4,40(sp)
 c0043f0:	d9800d17 	ldw	r6,52(sp)
 c0043f4:	dd400a15 	stw	r21,40(sp)
 c0043f8:	a905c83a 	sub	r2,r21,r4
 c0043fc:	308d883a 	add	r6,r6,r2
 c004400:	d9800d15 	stw	r6,52(sp)
 c004404:	002b883a 	mov	r21,zero
 c004408:	003e0606 	br	c003c24 <__alt_data_end+0xfc003c24>
 c00440c:	9023883a 	mov	r17,r18
 c004410:	9829883a 	mov	r20,r19
 c004414:	04000084 	movi	r16,2
 c004418:	003c9206 	br	c003664 <__alt_data_end+0xfc003664>
 c00441c:	04000044 	movi	r16,1
 c004420:	dc000c15 	stw	r16,48(sp)
 c004424:	dc000615 	stw	r16,24(sp)
 c004428:	dc002215 	stw	r16,136(sp)
 c00442c:	e0001115 	stw	zero,68(fp)
 c004430:	000b883a 	mov	r5,zero
 c004434:	003c6906 	br	c0035dc <__alt_data_end+0xfc0035dc>
 c004438:	3021883a 	mov	r16,r6
 c00443c:	003ffb06 	br	c00442c <__alt_data_end+0xfc00442c>
 c004440:	1000021e 	bne	r2,zero,c00444c <_dtoa_r+0x11e0>
 c004444:	4200004c 	andi	r8,r8,1
 c004448:	403e7d1e 	bne	r8,zero,c003e40 <__alt_data_end+0xfc003e40>
 c00444c:	01000c04 	movi	r4,48
 c004450:	00000106 	br	c004458 <_dtoa_r+0x11ec>
 c004454:	102f883a 	mov	r23,r2
 c004458:	b8bfffc4 	addi	r2,r23,-1
 c00445c:	10c00007 	ldb	r3,0(r2)
 c004460:	193ffc26 	beq	r3,r4,c004454 <__alt_data_end+0xfc004454>
 c004464:	003e8706 	br	c003e84 <__alt_data_end+0xfc003e84>
 c004468:	d8800517 	ldw	r2,20(sp)
 c00446c:	00a3c83a 	sub	r17,zero,r2
 c004470:	8800a426 	beq	r17,zero,c004704 <_dtoa_r+0x1498>
 c004474:	888003cc 	andi	r2,r17,15
 c004478:	100490fa 	slli	r2,r2,3
 c00447c:	00c30074 	movhi	r3,3073
 c004480:	18f8cb04 	addi	r3,r3,-7380
 c004484:	1885883a 	add	r2,r3,r2
 c004488:	11800017 	ldw	r6,0(r2)
 c00448c:	11c00117 	ldw	r7,4(r2)
 c004490:	9009883a 	mov	r4,r18
 c004494:	980b883a 	mov	r5,r19
 c004498:	8823d13a 	srai	r17,r17,4
 c00449c:	c00aa6c0 	call	c00aa6c <__muldf3>
 c0044a0:	d8800f15 	stw	r2,60(sp)
 c0044a4:	d8c01015 	stw	r3,64(sp)
 c0044a8:	8800e826 	beq	r17,zero,c00484c <_dtoa_r+0x15e0>
 c0044ac:	05030074 	movhi	r20,3073
 c0044b0:	a538c104 	addi	r20,r20,-7420
 c0044b4:	04000084 	movi	r16,2
 c0044b8:	8980004c 	andi	r6,r17,1
 c0044bc:	1009883a 	mov	r4,r2
 c0044c0:	8823d07a 	srai	r17,r17,1
 c0044c4:	180b883a 	mov	r5,r3
 c0044c8:	30000426 	beq	r6,zero,c0044dc <_dtoa_r+0x1270>
 c0044cc:	a1800017 	ldw	r6,0(r20)
 c0044d0:	a1c00117 	ldw	r7,4(r20)
 c0044d4:	84000044 	addi	r16,r16,1
 c0044d8:	c00aa6c0 	call	c00aa6c <__muldf3>
 c0044dc:	a5000204 	addi	r20,r20,8
 c0044e0:	883ff51e 	bne	r17,zero,c0044b8 <__alt_data_end+0xfc0044b8>
 c0044e4:	d8800f15 	stw	r2,60(sp)
 c0044e8:	d8c01015 	stw	r3,64(sp)
 c0044ec:	003c7606 	br	c0036c8 <__alt_data_end+0xfc0036c8>
 c0044f0:	00c00c04 	movi	r3,48
 c0044f4:	10c00005 	stb	r3,0(r2)
 c0044f8:	d8c00517 	ldw	r3,20(sp)
 c0044fc:	bd3fffc3 	ldbu	r20,-1(r23)
 c004500:	18c00044 	addi	r3,r3,1
 c004504:	d8c00515 	stw	r3,20(sp)
 c004508:	003db906 	br	c003bf0 <__alt_data_end+0xfc003bf0>
 c00450c:	89400117 	ldw	r5,4(r17)
 c004510:	e009883a 	mov	r4,fp
 c004514:	c0054080 	call	c005408 <_Balloc>
 c004518:	89800417 	ldw	r6,16(r17)
 c00451c:	89400304 	addi	r5,r17,12
 c004520:	11000304 	addi	r4,r2,12
 c004524:	31800084 	addi	r6,r6,2
 c004528:	318d883a 	add	r6,r6,r6
 c00452c:	318d883a 	add	r6,r6,r6
 c004530:	1027883a 	mov	r19,r2
 c004534:	c0052c00 	call	c0052c0 <memcpy>
 c004538:	01800044 	movi	r6,1
 c00453c:	980b883a 	mov	r5,r19
 c004540:	e009883a 	mov	r4,fp
 c004544:	c005c440 	call	c005c44 <__lshift>
 c004548:	1029883a 	mov	r20,r2
 c00454c:	003ecc06 	br	c004080 <__alt_data_end+0xfc004080>
 c004550:	00800e44 	movi	r2,57
 c004554:	90809026 	beq	r18,r2,c004798 <_dtoa_r+0x152c>
 c004558:	92000044 	addi	r8,r18,1
 c00455c:	003f1f06 	br	c0041dc <__alt_data_end+0xfc0041dc>
 c004560:	9011883a 	mov	r8,r18
 c004564:	8825883a 	mov	r18,r17
 c004568:	a023883a 	mov	r17,r20
 c00456c:	003e2906 	br	c003e14 <__alt_data_end+0xfc003e14>
 c004570:	002b883a 	mov	r21,zero
 c004574:	0023883a 	mov	r17,zero
 c004578:	003f5406 	br	c0042cc <__alt_data_end+0xfc0042cc>
 c00457c:	61bfffc4 	addi	r6,r12,-1
 c004580:	300490fa 	slli	r2,r6,3
 c004584:	00c30074 	movhi	r3,3073
 c004588:	18f8cb04 	addi	r3,r3,-7380
 c00458c:	1885883a 	add	r2,r3,r2
 c004590:	11000017 	ldw	r4,0(r2)
 c004594:	11400117 	ldw	r5,4(r2)
 c004598:	d8800717 	ldw	r2,28(sp)
 c00459c:	880f883a 	mov	r7,r17
 c0045a0:	d9801215 	stw	r6,72(sp)
 c0045a4:	800d883a 	mov	r6,r16
 c0045a8:	db001615 	stw	r12,88(sp)
 c0045ac:	15c00044 	addi	r23,r2,1
 c0045b0:	c00aa6c0 	call	c00aa6c <__muldf3>
 c0045b4:	d9401017 	ldw	r5,64(sp)
 c0045b8:	d9000f17 	ldw	r4,60(sp)
 c0045bc:	d8c01515 	stw	r3,84(sp)
 c0045c0:	d8801415 	stw	r2,80(sp)
 c0045c4:	c00bbd40 	call	c00bbd4 <__fixdfsi>
 c0045c8:	1009883a 	mov	r4,r2
 c0045cc:	1021883a 	mov	r16,r2
 c0045d0:	c00bc540 	call	c00bc54 <__floatsidf>
 c0045d4:	d9000f17 	ldw	r4,60(sp)
 c0045d8:	d9401017 	ldw	r5,64(sp)
 c0045dc:	100d883a 	mov	r6,r2
 c0045e0:	180f883a 	mov	r7,r3
 c0045e4:	c00b2d80 	call	c00b2d8 <__subdf3>
 c0045e8:	1829883a 	mov	r20,r3
 c0045ec:	d8c00717 	ldw	r3,28(sp)
 c0045f0:	84000c04 	addi	r16,r16,48
 c0045f4:	1023883a 	mov	r17,r2
 c0045f8:	1c000005 	stb	r16,0(r3)
 c0045fc:	db001617 	ldw	r12,88(sp)
 c004600:	00800044 	movi	r2,1
 c004604:	60802226 	beq	r12,r2,c004690 <_dtoa_r+0x1424>
 c004608:	d9c00717 	ldw	r7,28(sp)
 c00460c:	8805883a 	mov	r2,r17
 c004610:	b82b883a 	mov	r21,r23
 c004614:	3b19883a 	add	r12,r7,r12
 c004618:	6023883a 	mov	r17,r12
 c00461c:	a007883a 	mov	r3,r20
 c004620:	dc800f15 	stw	r18,60(sp)
 c004624:	000d883a 	mov	r6,zero
 c004628:	01d00934 	movhi	r7,16420
 c00462c:	1009883a 	mov	r4,r2
 c004630:	180b883a 	mov	r5,r3
 c004634:	c00aa6c0 	call	c00aa6c <__muldf3>
 c004638:	180b883a 	mov	r5,r3
 c00463c:	1009883a 	mov	r4,r2
 c004640:	1829883a 	mov	r20,r3
 c004644:	1025883a 	mov	r18,r2
 c004648:	c00bbd40 	call	c00bbd4 <__fixdfsi>
 c00464c:	1009883a 	mov	r4,r2
 c004650:	1021883a 	mov	r16,r2
 c004654:	c00bc540 	call	c00bc54 <__floatsidf>
 c004658:	100d883a 	mov	r6,r2
 c00465c:	180f883a 	mov	r7,r3
 c004660:	9009883a 	mov	r4,r18
 c004664:	a00b883a 	mov	r5,r20
 c004668:	84000c04 	addi	r16,r16,48
 c00466c:	c00b2d80 	call	c00b2d8 <__subdf3>
 c004670:	ad400044 	addi	r21,r21,1
 c004674:	ac3fffc5 	stb	r16,-1(r21)
 c004678:	ac7fea1e 	bne	r21,r17,c004624 <__alt_data_end+0xfc004624>
 c00467c:	1023883a 	mov	r17,r2
 c004680:	d8801217 	ldw	r2,72(sp)
 c004684:	dc800f17 	ldw	r18,60(sp)
 c004688:	1829883a 	mov	r20,r3
 c00468c:	b8af883a 	add	r23,r23,r2
 c004690:	d9001417 	ldw	r4,80(sp)
 c004694:	d9401517 	ldw	r5,84(sp)
 c004698:	000d883a 	mov	r6,zero
 c00469c:	01cff834 	movhi	r7,16352
 c0046a0:	c0095980 	call	c009598 <__adddf3>
 c0046a4:	880d883a 	mov	r6,r17
 c0046a8:	a00f883a 	mov	r7,r20
 c0046ac:	1009883a 	mov	r4,r2
 c0046b0:	180b883a 	mov	r5,r3
 c0046b4:	c00a9780 	call	c00a978 <__ledf2>
 c0046b8:	10003e0e 	bge	r2,zero,c0047b4 <_dtoa_r+0x1548>
 c0046bc:	d9001317 	ldw	r4,76(sp)
 c0046c0:	bd3fffc3 	ldbu	r20,-1(r23)
 c0046c4:	d9000515 	stw	r4,20(sp)
 c0046c8:	003d3b06 	br	c003bb8 <__alt_data_end+0xfc003bb8>
 c0046cc:	0027883a 	mov	r19,zero
 c0046d0:	003f1b06 	br	c004340 <__alt_data_end+0xfc004340>
 c0046d4:	d8800817 	ldw	r2,32(sp)
 c0046d8:	11e9c83a 	sub	r20,r2,r7
 c0046dc:	0005883a 	mov	r2,zero
 c0046e0:	003d5406 	br	c003c34 <__alt_data_end+0xfc003c34>
 c0046e4:	00800044 	movi	r2,1
 c0046e8:	003dc706 	br	c003e08 <__alt_data_end+0xfc003e08>
 c0046ec:	d8c00217 	ldw	r3,8(sp)
 c0046f0:	00800d84 	movi	r2,54
 c0046f4:	dd400a17 	ldw	r21,40(sp)
 c0046f8:	10c5c83a 	sub	r2,r2,r3
 c0046fc:	dd000817 	ldw	r20,32(sp)
 c004700:	003d4c06 	br	c003c34 <__alt_data_end+0xfc003c34>
 c004704:	dc800f15 	stw	r18,60(sp)
 c004708:	dcc01015 	stw	r19,64(sp)
 c00470c:	04000084 	movi	r16,2
 c004710:	003bed06 	br	c0036c8 <__alt_data_end+0xfc0036c8>
 c004714:	d9000617 	ldw	r4,24(sp)
 c004718:	203f0d26 	beq	r4,zero,c004350 <__alt_data_end+0xfc004350>
 c00471c:	d9800c17 	ldw	r6,48(sp)
 c004720:	01bcab0e 	bge	zero,r6,c0039d0 <__alt_data_end+0xfc0039d0>
 c004724:	d9401017 	ldw	r5,64(sp)
 c004728:	d9000f17 	ldw	r4,60(sp)
 c00472c:	000d883a 	mov	r6,zero
 c004730:	01d00934 	movhi	r7,16420
 c004734:	c00aa6c0 	call	c00aa6c <__muldf3>
 c004738:	81000044 	addi	r4,r16,1
 c00473c:	d8800f15 	stw	r2,60(sp)
 c004740:	d8c01015 	stw	r3,64(sp)
 c004744:	c00bc540 	call	c00bc54 <__floatsidf>
 c004748:	d9800f17 	ldw	r6,60(sp)
 c00474c:	d9c01017 	ldw	r7,64(sp)
 c004750:	1009883a 	mov	r4,r2
 c004754:	180b883a 	mov	r5,r3
 c004758:	c00aa6c0 	call	c00aa6c <__muldf3>
 c00475c:	01d00734 	movhi	r7,16412
 c004760:	000d883a 	mov	r6,zero
 c004764:	1009883a 	mov	r4,r2
 c004768:	180b883a 	mov	r5,r3
 c00476c:	c0095980 	call	c009598 <__adddf3>
 c004770:	d9c00517 	ldw	r7,20(sp)
 c004774:	047f3034 	movhi	r17,64704
 c004778:	1021883a 	mov	r16,r2
 c00477c:	39ffffc4 	addi	r7,r7,-1
 c004780:	d9c01315 	stw	r7,76(sp)
 c004784:	1c63883a 	add	r17,r3,r17
 c004788:	db000c17 	ldw	r12,48(sp)
 c00478c:	003bea06 	br	c003738 <__alt_data_end+0xfc003738>
 c004790:	dc000915 	stw	r16,36(sp)
 c004794:	003e0e06 	br	c003fd0 <__alt_data_end+0xfc003fd0>
 c004798:	01000e44 	movi	r4,57
 c00479c:	8825883a 	mov	r18,r17
 c0047a0:	9dc00044 	addi	r23,r19,1
 c0047a4:	99000005 	stb	r4,0(r19)
 c0047a8:	a023883a 	mov	r17,r20
 c0047ac:	dc000915 	stw	r16,36(sp)
 c0047b0:	003da406 	br	c003e44 <__alt_data_end+0xfc003e44>
 c0047b4:	d9801417 	ldw	r6,80(sp)
 c0047b8:	d9c01517 	ldw	r7,84(sp)
 c0047bc:	0009883a 	mov	r4,zero
 c0047c0:	014ff834 	movhi	r5,16352
 c0047c4:	c00b2d80 	call	c00b2d8 <__subdf3>
 c0047c8:	880d883a 	mov	r6,r17
 c0047cc:	a00f883a 	mov	r7,r20
 c0047d0:	1009883a 	mov	r4,r2
 c0047d4:	180b883a 	mov	r5,r3
 c0047d8:	c00a89c0 	call	c00a89c <__gedf2>
 c0047dc:	00bc7c0e 	bge	zero,r2,c0039d0 <__alt_data_end+0xfc0039d0>
 c0047e0:	01000c04 	movi	r4,48
 c0047e4:	00000106 	br	c0047ec <_dtoa_r+0x1580>
 c0047e8:	102f883a 	mov	r23,r2
 c0047ec:	b8bfffc4 	addi	r2,r23,-1
 c0047f0:	10c00007 	ldb	r3,0(r2)
 c0047f4:	193ffc26 	beq	r3,r4,c0047e8 <__alt_data_end+0xfc0047e8>
 c0047f8:	d9801317 	ldw	r6,76(sp)
 c0047fc:	d9800515 	stw	r6,20(sp)
 c004800:	003c4406 	br	c003914 <__alt_data_end+0xfc003914>
 c004804:	d9801317 	ldw	r6,76(sp)
 c004808:	d9800515 	stw	r6,20(sp)
 c00480c:	003cea06 	br	c003bb8 <__alt_data_end+0xfc003bb8>
 c004810:	dd800f17 	ldw	r22,60(sp)
 c004814:	dcc01017 	ldw	r19,64(sp)
 c004818:	dc801217 	ldw	r18,72(sp)
 c00481c:	003c6c06 	br	c0039d0 <__alt_data_end+0xfc0039d0>
 c004820:	903e031e 	bne	r18,zero,c004030 <__alt_data_end+0xfc004030>
 c004824:	003ebb06 	br	c004314 <__alt_data_end+0xfc004314>
 c004828:	103e6c1e 	bne	r2,zero,c0041dc <__alt_data_end+0xfc0041dc>
 c00482c:	4080004c 	andi	r2,r8,1
 c004830:	103e6a26 	beq	r2,zero,c0041dc <__alt_data_end+0xfc0041dc>
 c004834:	003e6606 	br	c0041d0 <__alt_data_end+0xfc0041d0>
 c004838:	d8c00317 	ldw	r3,12(sp)
 c00483c:	00800084 	movi	r2,2
 c004840:	10c02916 	blt	r2,r3,c0048e8 <_dtoa_r+0x167c>
 c004844:	d9000c17 	ldw	r4,48(sp)
 c004848:	003e8806 	br	c00426c <__alt_data_end+0xfc00426c>
 c00484c:	04000084 	movi	r16,2
 c004850:	003b9d06 	br	c0036c8 <__alt_data_end+0xfc0036c8>
 c004854:	d9001317 	ldw	r4,76(sp)
 c004858:	d9000515 	stw	r4,20(sp)
 c00485c:	003cd606 	br	c003bb8 <__alt_data_end+0xfc003bb8>
 c004860:	d8801317 	ldw	r2,76(sp)
 c004864:	d8800515 	stw	r2,20(sp)
 c004868:	003c2a06 	br	c003914 <__alt_data_end+0xfc003914>
 c00486c:	d9800317 	ldw	r6,12(sp)
 c004870:	00800084 	movi	r2,2
 c004874:	11801516 	blt	r2,r6,c0048cc <_dtoa_r+0x1660>
 c004878:	d9c00c17 	ldw	r7,48(sp)
 c00487c:	d9c00615 	stw	r7,24(sp)
 c004880:	003df706 	br	c004060 <__alt_data_end+0xfc004060>
 c004884:	193d3926 	beq	r3,r4,c003d6c <__alt_data_end+0xfc003d6c>
 c004888:	00c00f04 	movi	r3,60
 c00488c:	1885c83a 	sub	r2,r3,r2
 c004890:	003ddf06 	br	c004010 <__alt_data_end+0xfc004010>
 c004894:	e009883a 	mov	r4,fp
 c004898:	e0001115 	stw	zero,68(fp)
 c00489c:	000b883a 	mov	r5,zero
 c0048a0:	c0054080 	call	c005408 <_Balloc>
 c0048a4:	d8800715 	stw	r2,28(sp)
 c0048a8:	d8c00717 	ldw	r3,28(sp)
 c0048ac:	00bfffc4 	movi	r2,-1
 c0048b0:	01000044 	movi	r4,1
 c0048b4:	d8800c15 	stw	r2,48(sp)
 c0048b8:	e0c01015 	stw	r3,64(fp)
 c0048bc:	d9000b15 	stw	r4,44(sp)
 c0048c0:	d8800615 	stw	r2,24(sp)
 c0048c4:	d8002215 	stw	zero,136(sp)
 c0048c8:	003c4106 	br	c0039d0 <__alt_data_end+0xfc0039d0>
 c0048cc:	d8c00c17 	ldw	r3,48(sp)
 c0048d0:	d8c00615 	stw	r3,24(sp)
 c0048d4:	003e7006 	br	c004298 <__alt_data_end+0xfc004298>
 c0048d8:	04400044 	movi	r17,1
 c0048dc:	003b2006 	br	c003560 <__alt_data_end+0xfc003560>
 c0048e0:	000b883a 	mov	r5,zero
 c0048e4:	003b3d06 	br	c0035dc <__alt_data_end+0xfc0035dc>
 c0048e8:	d8800c17 	ldw	r2,48(sp)
 c0048ec:	d8800615 	stw	r2,24(sp)
 c0048f0:	003e6906 	br	c004298 <__alt_data_end+0xfc004298>

0c0048f4 <_setlocale_r>:
 c0048f4:	30001b26 	beq	r6,zero,c004964 <_setlocale_r+0x70>
 c0048f8:	01430074 	movhi	r5,3073
 c0048fc:	defffe04 	addi	sp,sp,-8
 c004900:	2978b104 	addi	r5,r5,-7484
 c004904:	3009883a 	mov	r4,r6
 c004908:	dc000015 	stw	r16,0(sp)
 c00490c:	dfc00115 	stw	ra,4(sp)
 c004910:	3021883a 	mov	r16,r6
 c004914:	c0065880 	call	c006588 <strcmp>
 c004918:	1000061e 	bne	r2,zero,c004934 <_setlocale_r+0x40>
 c00491c:	00830074 	movhi	r2,3073
 c004920:	10b8b004 	addi	r2,r2,-7488
 c004924:	dfc00117 	ldw	ra,4(sp)
 c004928:	dc000017 	ldw	r16,0(sp)
 c00492c:	dec00204 	addi	sp,sp,8
 c004930:	f800283a 	ret
 c004934:	01430074 	movhi	r5,3073
 c004938:	2978b004 	addi	r5,r5,-7488
 c00493c:	8009883a 	mov	r4,r16
 c004940:	c0065880 	call	c006588 <strcmp>
 c004944:	103ff526 	beq	r2,zero,c00491c <__alt_data_end+0xfc00491c>
 c004948:	01430074 	movhi	r5,3073
 c00494c:	29789b04 	addi	r5,r5,-7572
 c004950:	8009883a 	mov	r4,r16
 c004954:	c0065880 	call	c006588 <strcmp>
 c004958:	103ff026 	beq	r2,zero,c00491c <__alt_data_end+0xfc00491c>
 c00495c:	0005883a 	mov	r2,zero
 c004960:	003ff006 	br	c004924 <__alt_data_end+0xfc004924>
 c004964:	00830074 	movhi	r2,3073
 c004968:	10b8b004 	addi	r2,r2,-7488
 c00496c:	f800283a 	ret

0c004970 <__locale_charset>:
 c004970:	00830074 	movhi	r2,3073
 c004974:	10bb1b04 	addi	r2,r2,-5012
 c004978:	f800283a 	ret

0c00497c <__locale_mb_cur_max>:
 c00497c:	00830074 	movhi	r2,3073
 c004980:	1080b904 	addi	r2,r2,740
 c004984:	10800017 	ldw	r2,0(r2)
 c004988:	f800283a 	ret

0c00498c <__locale_msgcharset>:
 c00498c:	00830074 	movhi	r2,3073
 c004990:	10bb1304 	addi	r2,r2,-5044
 c004994:	f800283a 	ret

0c004998 <__locale_cjk_lang>:
 c004998:	0005883a 	mov	r2,zero
 c00499c:	f800283a 	ret

0c0049a0 <_localeconv_r>:
 c0049a0:	00830074 	movhi	r2,3073
 c0049a4:	10bb2304 	addi	r2,r2,-4980
 c0049a8:	f800283a 	ret

0c0049ac <setlocale>:
 c0049ac:	00830074 	movhi	r2,3073
 c0049b0:	1080b804 	addi	r2,r2,736
 c0049b4:	280d883a 	mov	r6,r5
 c0049b8:	200b883a 	mov	r5,r4
 c0049bc:	11000017 	ldw	r4,0(r2)
 c0049c0:	c0048f41 	jmpi	c0048f4 <_setlocale_r>

0c0049c4 <localeconv>:
 c0049c4:	00830074 	movhi	r2,3073
 c0049c8:	10bb2304 	addi	r2,r2,-4980
 c0049cc:	f800283a 	ret

0c0049d0 <_malloc_r>:
 c0049d0:	defff504 	addi	sp,sp,-44
 c0049d4:	dc800315 	stw	r18,12(sp)
 c0049d8:	dfc00a15 	stw	ra,40(sp)
 c0049dc:	df000915 	stw	fp,36(sp)
 c0049e0:	ddc00815 	stw	r23,32(sp)
 c0049e4:	dd800715 	stw	r22,28(sp)
 c0049e8:	dd400615 	stw	r21,24(sp)
 c0049ec:	dd000515 	stw	r20,20(sp)
 c0049f0:	dcc00415 	stw	r19,16(sp)
 c0049f4:	dc400215 	stw	r17,8(sp)
 c0049f8:	dc000115 	stw	r16,4(sp)
 c0049fc:	288002c4 	addi	r2,r5,11
 c004a00:	00c00584 	movi	r3,22
 c004a04:	2025883a 	mov	r18,r4
 c004a08:	18807f2e 	bgeu	r3,r2,c004c08 <_malloc_r+0x238>
 c004a0c:	047ffe04 	movi	r17,-8
 c004a10:	1462703a 	and	r17,r2,r17
 c004a14:	8800a316 	blt	r17,zero,c004ca4 <_malloc_r+0x2d4>
 c004a18:	8940a236 	bltu	r17,r5,c004ca4 <_malloc_r+0x2d4>
 c004a1c:	c00bfa40 	call	c00bfa4 <__malloc_lock>
 c004a20:	00807dc4 	movi	r2,503
 c004a24:	1441e92e 	bgeu	r2,r17,c0051cc <_malloc_r+0x7fc>
 c004a28:	8804d27a 	srli	r2,r17,9
 c004a2c:	1000a126 	beq	r2,zero,c004cb4 <_malloc_r+0x2e4>
 c004a30:	00c00104 	movi	r3,4
 c004a34:	18811e36 	bltu	r3,r2,c004eb0 <_malloc_r+0x4e0>
 c004a38:	8804d1ba 	srli	r2,r17,6
 c004a3c:	12000e44 	addi	r8,r2,57
 c004a40:	11c00e04 	addi	r7,r2,56
 c004a44:	4209883a 	add	r4,r8,r8
 c004a48:	04c30074 	movhi	r19,3073
 c004a4c:	2109883a 	add	r4,r4,r4
 c004a50:	9cfb3104 	addi	r19,r19,-4924
 c004a54:	2109883a 	add	r4,r4,r4
 c004a58:	9909883a 	add	r4,r19,r4
 c004a5c:	24000117 	ldw	r16,4(r4)
 c004a60:	213ffe04 	addi	r4,r4,-8
 c004a64:	24009726 	beq	r4,r16,c004cc4 <_malloc_r+0x2f4>
 c004a68:	80800117 	ldw	r2,4(r16)
 c004a6c:	01bfff04 	movi	r6,-4
 c004a70:	014003c4 	movi	r5,15
 c004a74:	1184703a 	and	r2,r2,r6
 c004a78:	1447c83a 	sub	r3,r2,r17
 c004a7c:	28c00716 	blt	r5,r3,c004a9c <_malloc_r+0xcc>
 c004a80:	1800920e 	bge	r3,zero,c004ccc <_malloc_r+0x2fc>
 c004a84:	84000317 	ldw	r16,12(r16)
 c004a88:	24008e26 	beq	r4,r16,c004cc4 <_malloc_r+0x2f4>
 c004a8c:	80800117 	ldw	r2,4(r16)
 c004a90:	1184703a 	and	r2,r2,r6
 c004a94:	1447c83a 	sub	r3,r2,r17
 c004a98:	28fff90e 	bge	r5,r3,c004a80 <__alt_data_end+0xfc004a80>
 c004a9c:	3809883a 	mov	r4,r7
 c004aa0:	01830074 	movhi	r6,3073
 c004aa4:	9c000417 	ldw	r16,16(r19)
 c004aa8:	31bb3104 	addi	r6,r6,-4924
 c004aac:	32000204 	addi	r8,r6,8
 c004ab0:	82013426 	beq	r16,r8,c004f84 <_malloc_r+0x5b4>
 c004ab4:	80c00117 	ldw	r3,4(r16)
 c004ab8:	00bfff04 	movi	r2,-4
 c004abc:	188e703a 	and	r7,r3,r2
 c004ac0:	3c45c83a 	sub	r2,r7,r17
 c004ac4:	00c003c4 	movi	r3,15
 c004ac8:	18811f16 	blt	r3,r2,c004f48 <_malloc_r+0x578>
 c004acc:	32000515 	stw	r8,20(r6)
 c004ad0:	32000415 	stw	r8,16(r6)
 c004ad4:	10007f0e 	bge	r2,zero,c004cd4 <_malloc_r+0x304>
 c004ad8:	00807fc4 	movi	r2,511
 c004adc:	11c0fd36 	bltu	r2,r7,c004ed4 <_malloc_r+0x504>
 c004ae0:	3806d0fa 	srli	r3,r7,3
 c004ae4:	01c00044 	movi	r7,1
 c004ae8:	30800117 	ldw	r2,4(r6)
 c004aec:	19400044 	addi	r5,r3,1
 c004af0:	294b883a 	add	r5,r5,r5
 c004af4:	1807d0ba 	srai	r3,r3,2
 c004af8:	294b883a 	add	r5,r5,r5
 c004afc:	294b883a 	add	r5,r5,r5
 c004b00:	298b883a 	add	r5,r5,r6
 c004b04:	38c6983a 	sll	r3,r7,r3
 c004b08:	29c00017 	ldw	r7,0(r5)
 c004b0c:	2a7ffe04 	addi	r9,r5,-8
 c004b10:	1886b03a 	or	r3,r3,r2
 c004b14:	82400315 	stw	r9,12(r16)
 c004b18:	81c00215 	stw	r7,8(r16)
 c004b1c:	30c00115 	stw	r3,4(r6)
 c004b20:	2c000015 	stw	r16,0(r5)
 c004b24:	3c000315 	stw	r16,12(r7)
 c004b28:	2005d0ba 	srai	r2,r4,2
 c004b2c:	01400044 	movi	r5,1
 c004b30:	288a983a 	sll	r5,r5,r2
 c004b34:	19406f36 	bltu	r3,r5,c004cf4 <_malloc_r+0x324>
 c004b38:	28c4703a 	and	r2,r5,r3
 c004b3c:	10000a1e 	bne	r2,zero,c004b68 <_malloc_r+0x198>
 c004b40:	00bfff04 	movi	r2,-4
 c004b44:	294b883a 	add	r5,r5,r5
 c004b48:	2088703a 	and	r4,r4,r2
 c004b4c:	28c4703a 	and	r2,r5,r3
 c004b50:	21000104 	addi	r4,r4,4
 c004b54:	1000041e 	bne	r2,zero,c004b68 <_malloc_r+0x198>
 c004b58:	294b883a 	add	r5,r5,r5
 c004b5c:	28c4703a 	and	r2,r5,r3
 c004b60:	21000104 	addi	r4,r4,4
 c004b64:	103ffc26 	beq	r2,zero,c004b58 <__alt_data_end+0xfc004b58>
 c004b68:	02bfff04 	movi	r10,-4
 c004b6c:	024003c4 	movi	r9,15
 c004b70:	21800044 	addi	r6,r4,1
 c004b74:	318d883a 	add	r6,r6,r6
 c004b78:	318d883a 	add	r6,r6,r6
 c004b7c:	318d883a 	add	r6,r6,r6
 c004b80:	998d883a 	add	r6,r19,r6
 c004b84:	333ffe04 	addi	r12,r6,-8
 c004b88:	2017883a 	mov	r11,r4
 c004b8c:	31800104 	addi	r6,r6,4
 c004b90:	34000017 	ldw	r16,0(r6)
 c004b94:	31fffd04 	addi	r7,r6,-12
 c004b98:	81c0041e 	bne	r16,r7,c004bac <_malloc_r+0x1dc>
 c004b9c:	0000fb06 	br	c004f8c <_malloc_r+0x5bc>
 c004ba0:	1801030e 	bge	r3,zero,c004fb0 <_malloc_r+0x5e0>
 c004ba4:	84000317 	ldw	r16,12(r16)
 c004ba8:	81c0f826 	beq	r16,r7,c004f8c <_malloc_r+0x5bc>
 c004bac:	80800117 	ldw	r2,4(r16)
 c004bb0:	1284703a 	and	r2,r2,r10
 c004bb4:	1447c83a 	sub	r3,r2,r17
 c004bb8:	48fff90e 	bge	r9,r3,c004ba0 <__alt_data_end+0xfc004ba0>
 c004bbc:	80800317 	ldw	r2,12(r16)
 c004bc0:	81000217 	ldw	r4,8(r16)
 c004bc4:	89400054 	ori	r5,r17,1
 c004bc8:	81400115 	stw	r5,4(r16)
 c004bcc:	20800315 	stw	r2,12(r4)
 c004bd0:	11000215 	stw	r4,8(r2)
 c004bd4:	8463883a 	add	r17,r16,r17
 c004bd8:	9c400515 	stw	r17,20(r19)
 c004bdc:	9c400415 	stw	r17,16(r19)
 c004be0:	18800054 	ori	r2,r3,1
 c004be4:	88800115 	stw	r2,4(r17)
 c004be8:	8a000315 	stw	r8,12(r17)
 c004bec:	8a000215 	stw	r8,8(r17)
 c004bf0:	88e3883a 	add	r17,r17,r3
 c004bf4:	88c00015 	stw	r3,0(r17)
 c004bf8:	9009883a 	mov	r4,r18
 c004bfc:	c00bfc80 	call	c00bfc8 <__malloc_unlock>
 c004c00:	80800204 	addi	r2,r16,8
 c004c04:	00001b06 	br	c004c74 <_malloc_r+0x2a4>
 c004c08:	04400404 	movi	r17,16
 c004c0c:	89402536 	bltu	r17,r5,c004ca4 <_malloc_r+0x2d4>
 c004c10:	c00bfa40 	call	c00bfa4 <__malloc_lock>
 c004c14:	00800184 	movi	r2,6
 c004c18:	01000084 	movi	r4,2
 c004c1c:	04c30074 	movhi	r19,3073
 c004c20:	1085883a 	add	r2,r2,r2
 c004c24:	9cfb3104 	addi	r19,r19,-4924
 c004c28:	1085883a 	add	r2,r2,r2
 c004c2c:	9885883a 	add	r2,r19,r2
 c004c30:	14000117 	ldw	r16,4(r2)
 c004c34:	10fffe04 	addi	r3,r2,-8
 c004c38:	80c0d926 	beq	r16,r3,c004fa0 <_malloc_r+0x5d0>
 c004c3c:	80c00117 	ldw	r3,4(r16)
 c004c40:	81000317 	ldw	r4,12(r16)
 c004c44:	00bfff04 	movi	r2,-4
 c004c48:	1884703a 	and	r2,r3,r2
 c004c4c:	81400217 	ldw	r5,8(r16)
 c004c50:	8085883a 	add	r2,r16,r2
 c004c54:	10c00117 	ldw	r3,4(r2)
 c004c58:	29000315 	stw	r4,12(r5)
 c004c5c:	21400215 	stw	r5,8(r4)
 c004c60:	18c00054 	ori	r3,r3,1
 c004c64:	10c00115 	stw	r3,4(r2)
 c004c68:	9009883a 	mov	r4,r18
 c004c6c:	c00bfc80 	call	c00bfc8 <__malloc_unlock>
 c004c70:	80800204 	addi	r2,r16,8
 c004c74:	dfc00a17 	ldw	ra,40(sp)
 c004c78:	df000917 	ldw	fp,36(sp)
 c004c7c:	ddc00817 	ldw	r23,32(sp)
 c004c80:	dd800717 	ldw	r22,28(sp)
 c004c84:	dd400617 	ldw	r21,24(sp)
 c004c88:	dd000517 	ldw	r20,20(sp)
 c004c8c:	dcc00417 	ldw	r19,16(sp)
 c004c90:	dc800317 	ldw	r18,12(sp)
 c004c94:	dc400217 	ldw	r17,8(sp)
 c004c98:	dc000117 	ldw	r16,4(sp)
 c004c9c:	dec00b04 	addi	sp,sp,44
 c004ca0:	f800283a 	ret
 c004ca4:	00800304 	movi	r2,12
 c004ca8:	90800015 	stw	r2,0(r18)
 c004cac:	0005883a 	mov	r2,zero
 c004cb0:	003ff006 	br	c004c74 <__alt_data_end+0xfc004c74>
 c004cb4:	01002004 	movi	r4,128
 c004cb8:	02001004 	movi	r8,64
 c004cbc:	01c00fc4 	movi	r7,63
 c004cc0:	003f6106 	br	c004a48 <__alt_data_end+0xfc004a48>
 c004cc4:	4009883a 	mov	r4,r8
 c004cc8:	003f7506 	br	c004aa0 <__alt_data_end+0xfc004aa0>
 c004ccc:	81000317 	ldw	r4,12(r16)
 c004cd0:	003fde06 	br	c004c4c <__alt_data_end+0xfc004c4c>
 c004cd4:	81c5883a 	add	r2,r16,r7
 c004cd8:	11400117 	ldw	r5,4(r2)
 c004cdc:	9009883a 	mov	r4,r18
 c004ce0:	29400054 	ori	r5,r5,1
 c004ce4:	11400115 	stw	r5,4(r2)
 c004ce8:	c00bfc80 	call	c00bfc8 <__malloc_unlock>
 c004cec:	80800204 	addi	r2,r16,8
 c004cf0:	003fe006 	br	c004c74 <__alt_data_end+0xfc004c74>
 c004cf4:	9c000217 	ldw	r16,8(r19)
 c004cf8:	00bfff04 	movi	r2,-4
 c004cfc:	85800117 	ldw	r22,4(r16)
 c004d00:	b0ac703a 	and	r22,r22,r2
 c004d04:	b4400336 	bltu	r22,r17,c004d14 <_malloc_r+0x344>
 c004d08:	b445c83a 	sub	r2,r22,r17
 c004d0c:	00c003c4 	movi	r3,15
 c004d10:	18805d16 	blt	r3,r2,c004e88 <_malloc_r+0x4b8>
 c004d14:	05c30074 	movhi	r23,3073
 c004d18:	00830074 	movhi	r2,3073
 c004d1c:	10883f04 	addi	r2,r2,8444
 c004d20:	bdc0ba04 	addi	r23,r23,744
 c004d24:	15400017 	ldw	r21,0(r2)
 c004d28:	b8c00017 	ldw	r3,0(r23)
 c004d2c:	00bfffc4 	movi	r2,-1
 c004d30:	858d883a 	add	r6,r16,r22
 c004d34:	8d6b883a 	add	r21,r17,r21
 c004d38:	1880ea26 	beq	r3,r2,c0050e4 <_malloc_r+0x714>
 c004d3c:	ad4403c4 	addi	r21,r21,4111
 c004d40:	00bc0004 	movi	r2,-4096
 c004d44:	a8aa703a 	and	r21,r21,r2
 c004d48:	a80b883a 	mov	r5,r21
 c004d4c:	9009883a 	mov	r4,r18
 c004d50:	d9800015 	stw	r6,0(sp)
 c004d54:	c0065340 	call	c006534 <_sbrk_r>
 c004d58:	1029883a 	mov	r20,r2
 c004d5c:	00bfffc4 	movi	r2,-1
 c004d60:	d9800017 	ldw	r6,0(sp)
 c004d64:	a080e826 	beq	r20,r2,c005108 <_malloc_r+0x738>
 c004d68:	a180a636 	bltu	r20,r6,c005004 <_malloc_r+0x634>
 c004d6c:	07030074 	movhi	fp,3073
 c004d70:	e7084804 	addi	fp,fp,8480
 c004d74:	e0800017 	ldw	r2,0(fp)
 c004d78:	a887883a 	add	r3,r21,r2
 c004d7c:	e0c00015 	stw	r3,0(fp)
 c004d80:	3500e626 	beq	r6,r20,c00511c <_malloc_r+0x74c>
 c004d84:	b9000017 	ldw	r4,0(r23)
 c004d88:	00bfffc4 	movi	r2,-1
 c004d8c:	2080ee26 	beq	r4,r2,c005148 <_malloc_r+0x778>
 c004d90:	a185c83a 	sub	r2,r20,r6
 c004d94:	10c5883a 	add	r2,r2,r3
 c004d98:	e0800015 	stw	r2,0(fp)
 c004d9c:	a0c001cc 	andi	r3,r20,7
 c004da0:	1800bc26 	beq	r3,zero,c005094 <_malloc_r+0x6c4>
 c004da4:	a0e9c83a 	sub	r20,r20,r3
 c004da8:	00840204 	movi	r2,4104
 c004dac:	a5000204 	addi	r20,r20,8
 c004db0:	10c7c83a 	sub	r3,r2,r3
 c004db4:	a545883a 	add	r2,r20,r21
 c004db8:	1083ffcc 	andi	r2,r2,4095
 c004dbc:	18abc83a 	sub	r21,r3,r2
 c004dc0:	a80b883a 	mov	r5,r21
 c004dc4:	9009883a 	mov	r4,r18
 c004dc8:	c0065340 	call	c006534 <_sbrk_r>
 c004dcc:	00ffffc4 	movi	r3,-1
 c004dd0:	10c0e126 	beq	r2,r3,c005158 <_malloc_r+0x788>
 c004dd4:	1505c83a 	sub	r2,r2,r20
 c004dd8:	1545883a 	add	r2,r2,r21
 c004ddc:	10800054 	ori	r2,r2,1
 c004de0:	e0c00017 	ldw	r3,0(fp)
 c004de4:	9d000215 	stw	r20,8(r19)
 c004de8:	a0800115 	stw	r2,4(r20)
 c004dec:	a8c7883a 	add	r3,r21,r3
 c004df0:	e0c00015 	stw	r3,0(fp)
 c004df4:	84c00e26 	beq	r16,r19,c004e30 <_malloc_r+0x460>
 c004df8:	018003c4 	movi	r6,15
 c004dfc:	3580a72e 	bgeu	r6,r22,c00509c <_malloc_r+0x6cc>
 c004e00:	81400117 	ldw	r5,4(r16)
 c004e04:	013ffe04 	movi	r4,-8
 c004e08:	b0bffd04 	addi	r2,r22,-12
 c004e0c:	1104703a 	and	r2,r2,r4
 c004e10:	2900004c 	andi	r4,r5,1
 c004e14:	2088b03a 	or	r4,r4,r2
 c004e18:	81000115 	stw	r4,4(r16)
 c004e1c:	01400144 	movi	r5,5
 c004e20:	8089883a 	add	r4,r16,r2
 c004e24:	21400115 	stw	r5,4(r4)
 c004e28:	21400215 	stw	r5,8(r4)
 c004e2c:	3080cd36 	bltu	r6,r2,c005164 <_malloc_r+0x794>
 c004e30:	00830074 	movhi	r2,3073
 c004e34:	10883e04 	addi	r2,r2,8440
 c004e38:	11000017 	ldw	r4,0(r2)
 c004e3c:	20c0012e 	bgeu	r4,r3,c004e44 <_malloc_r+0x474>
 c004e40:	10c00015 	stw	r3,0(r2)
 c004e44:	00830074 	movhi	r2,3073
 c004e48:	10883d04 	addi	r2,r2,8436
 c004e4c:	11000017 	ldw	r4,0(r2)
 c004e50:	9c000217 	ldw	r16,8(r19)
 c004e54:	20c0012e 	bgeu	r4,r3,c004e5c <_malloc_r+0x48c>
 c004e58:	10c00015 	stw	r3,0(r2)
 c004e5c:	80c00117 	ldw	r3,4(r16)
 c004e60:	00bfff04 	movi	r2,-4
 c004e64:	1886703a 	and	r3,r3,r2
 c004e68:	1c45c83a 	sub	r2,r3,r17
 c004e6c:	1c400236 	bltu	r3,r17,c004e78 <_malloc_r+0x4a8>
 c004e70:	00c003c4 	movi	r3,15
 c004e74:	18800416 	blt	r3,r2,c004e88 <_malloc_r+0x4b8>
 c004e78:	9009883a 	mov	r4,r18
 c004e7c:	c00bfc80 	call	c00bfc8 <__malloc_unlock>
 c004e80:	0005883a 	mov	r2,zero
 c004e84:	003f7b06 	br	c004c74 <__alt_data_end+0xfc004c74>
 c004e88:	88c00054 	ori	r3,r17,1
 c004e8c:	80c00115 	stw	r3,4(r16)
 c004e90:	8463883a 	add	r17,r16,r17
 c004e94:	10800054 	ori	r2,r2,1
 c004e98:	9c400215 	stw	r17,8(r19)
 c004e9c:	88800115 	stw	r2,4(r17)
 c004ea0:	9009883a 	mov	r4,r18
 c004ea4:	c00bfc80 	call	c00bfc8 <__malloc_unlock>
 c004ea8:	80800204 	addi	r2,r16,8
 c004eac:	003f7106 	br	c004c74 <__alt_data_end+0xfc004c74>
 c004eb0:	00c00504 	movi	r3,20
 c004eb4:	18804a2e 	bgeu	r3,r2,c004fe0 <_malloc_r+0x610>
 c004eb8:	00c01504 	movi	r3,84
 c004ebc:	18806e36 	bltu	r3,r2,c005078 <_malloc_r+0x6a8>
 c004ec0:	8804d33a 	srli	r2,r17,12
 c004ec4:	12001bc4 	addi	r8,r2,111
 c004ec8:	11c01b84 	addi	r7,r2,110
 c004ecc:	4209883a 	add	r4,r8,r8
 c004ed0:	003edd06 	br	c004a48 <__alt_data_end+0xfc004a48>
 c004ed4:	3804d27a 	srli	r2,r7,9
 c004ed8:	00c00104 	movi	r3,4
 c004edc:	1880442e 	bgeu	r3,r2,c004ff0 <_malloc_r+0x620>
 c004ee0:	00c00504 	movi	r3,20
 c004ee4:	18808136 	bltu	r3,r2,c0050ec <_malloc_r+0x71c>
 c004ee8:	11401704 	addi	r5,r2,92
 c004eec:	10c016c4 	addi	r3,r2,91
 c004ef0:	294b883a 	add	r5,r5,r5
 c004ef4:	294b883a 	add	r5,r5,r5
 c004ef8:	294b883a 	add	r5,r5,r5
 c004efc:	994b883a 	add	r5,r19,r5
 c004f00:	28800017 	ldw	r2,0(r5)
 c004f04:	01830074 	movhi	r6,3073
 c004f08:	297ffe04 	addi	r5,r5,-8
 c004f0c:	31bb3104 	addi	r6,r6,-4924
 c004f10:	28806526 	beq	r5,r2,c0050a8 <_malloc_r+0x6d8>
 c004f14:	01bfff04 	movi	r6,-4
 c004f18:	10c00117 	ldw	r3,4(r2)
 c004f1c:	1986703a 	and	r3,r3,r6
 c004f20:	38c0022e 	bgeu	r7,r3,c004f2c <_malloc_r+0x55c>
 c004f24:	10800217 	ldw	r2,8(r2)
 c004f28:	28bffb1e 	bne	r5,r2,c004f18 <__alt_data_end+0xfc004f18>
 c004f2c:	11400317 	ldw	r5,12(r2)
 c004f30:	98c00117 	ldw	r3,4(r19)
 c004f34:	81400315 	stw	r5,12(r16)
 c004f38:	80800215 	stw	r2,8(r16)
 c004f3c:	2c000215 	stw	r16,8(r5)
 c004f40:	14000315 	stw	r16,12(r2)
 c004f44:	003ef806 	br	c004b28 <__alt_data_end+0xfc004b28>
 c004f48:	88c00054 	ori	r3,r17,1
 c004f4c:	80c00115 	stw	r3,4(r16)
 c004f50:	8463883a 	add	r17,r16,r17
 c004f54:	34400515 	stw	r17,20(r6)
 c004f58:	34400415 	stw	r17,16(r6)
 c004f5c:	10c00054 	ori	r3,r2,1
 c004f60:	8a000315 	stw	r8,12(r17)
 c004f64:	8a000215 	stw	r8,8(r17)
 c004f68:	88c00115 	stw	r3,4(r17)
 c004f6c:	88a3883a 	add	r17,r17,r2
 c004f70:	88800015 	stw	r2,0(r17)
 c004f74:	9009883a 	mov	r4,r18
 c004f78:	c00bfc80 	call	c00bfc8 <__malloc_unlock>
 c004f7c:	80800204 	addi	r2,r16,8
 c004f80:	003f3c06 	br	c004c74 <__alt_data_end+0xfc004c74>
 c004f84:	30c00117 	ldw	r3,4(r6)
 c004f88:	003ee706 	br	c004b28 <__alt_data_end+0xfc004b28>
 c004f8c:	5ac00044 	addi	r11,r11,1
 c004f90:	588000cc 	andi	r2,r11,3
 c004f94:	31800204 	addi	r6,r6,8
 c004f98:	103efd1e 	bne	r2,zero,c004b90 <__alt_data_end+0xfc004b90>
 c004f9c:	00002406 	br	c005030 <_malloc_r+0x660>
 c004fa0:	14000317 	ldw	r16,12(r2)
 c004fa4:	143f251e 	bne	r2,r16,c004c3c <__alt_data_end+0xfc004c3c>
 c004fa8:	21000084 	addi	r4,r4,2
 c004fac:	003ebc06 	br	c004aa0 <__alt_data_end+0xfc004aa0>
 c004fb0:	8085883a 	add	r2,r16,r2
 c004fb4:	10c00117 	ldw	r3,4(r2)
 c004fb8:	81000317 	ldw	r4,12(r16)
 c004fbc:	81400217 	ldw	r5,8(r16)
 c004fc0:	18c00054 	ori	r3,r3,1
 c004fc4:	10c00115 	stw	r3,4(r2)
 c004fc8:	29000315 	stw	r4,12(r5)
 c004fcc:	21400215 	stw	r5,8(r4)
 c004fd0:	9009883a 	mov	r4,r18
 c004fd4:	c00bfc80 	call	c00bfc8 <__malloc_unlock>
 c004fd8:	80800204 	addi	r2,r16,8
 c004fdc:	003f2506 	br	c004c74 <__alt_data_end+0xfc004c74>
 c004fe0:	12001704 	addi	r8,r2,92
 c004fe4:	11c016c4 	addi	r7,r2,91
 c004fe8:	4209883a 	add	r4,r8,r8
 c004fec:	003e9606 	br	c004a48 <__alt_data_end+0xfc004a48>
 c004ff0:	3804d1ba 	srli	r2,r7,6
 c004ff4:	11400e44 	addi	r5,r2,57
 c004ff8:	10c00e04 	addi	r3,r2,56
 c004ffc:	294b883a 	add	r5,r5,r5
 c005000:	003fbc06 	br	c004ef4 <__alt_data_end+0xfc004ef4>
 c005004:	84ff5926 	beq	r16,r19,c004d6c <__alt_data_end+0xfc004d6c>
 c005008:	00830074 	movhi	r2,3073
 c00500c:	10bb3104 	addi	r2,r2,-4924
 c005010:	14000217 	ldw	r16,8(r2)
 c005014:	00bfff04 	movi	r2,-4
 c005018:	80c00117 	ldw	r3,4(r16)
 c00501c:	1886703a 	and	r3,r3,r2
 c005020:	003f9106 	br	c004e68 <__alt_data_end+0xfc004e68>
 c005024:	60800217 	ldw	r2,8(r12)
 c005028:	213fffc4 	addi	r4,r4,-1
 c00502c:	1300651e 	bne	r2,r12,c0051c4 <_malloc_r+0x7f4>
 c005030:	208000cc 	andi	r2,r4,3
 c005034:	633ffe04 	addi	r12,r12,-8
 c005038:	103ffa1e 	bne	r2,zero,c005024 <__alt_data_end+0xfc005024>
 c00503c:	98800117 	ldw	r2,4(r19)
 c005040:	0146303a 	nor	r3,zero,r5
 c005044:	1884703a 	and	r2,r3,r2
 c005048:	98800115 	stw	r2,4(r19)
 c00504c:	294b883a 	add	r5,r5,r5
 c005050:	117f2836 	bltu	r2,r5,c004cf4 <__alt_data_end+0xfc004cf4>
 c005054:	283f2726 	beq	r5,zero,c004cf4 <__alt_data_end+0xfc004cf4>
 c005058:	2886703a 	and	r3,r5,r2
 c00505c:	5809883a 	mov	r4,r11
 c005060:	183ec31e 	bne	r3,zero,c004b70 <__alt_data_end+0xfc004b70>
 c005064:	294b883a 	add	r5,r5,r5
 c005068:	2886703a 	and	r3,r5,r2
 c00506c:	21000104 	addi	r4,r4,4
 c005070:	183ffc26 	beq	r3,zero,c005064 <__alt_data_end+0xfc005064>
 c005074:	003ebe06 	br	c004b70 <__alt_data_end+0xfc004b70>
 c005078:	00c05504 	movi	r3,340
 c00507c:	18801236 	bltu	r3,r2,c0050c8 <_malloc_r+0x6f8>
 c005080:	8804d3fa 	srli	r2,r17,15
 c005084:	12001e04 	addi	r8,r2,120
 c005088:	11c01dc4 	addi	r7,r2,119
 c00508c:	4209883a 	add	r4,r8,r8
 c005090:	003e6d06 	br	c004a48 <__alt_data_end+0xfc004a48>
 c005094:	00c40004 	movi	r3,4096
 c005098:	003f4606 	br	c004db4 <__alt_data_end+0xfc004db4>
 c00509c:	00800044 	movi	r2,1
 c0050a0:	a0800115 	stw	r2,4(r20)
 c0050a4:	003f7406 	br	c004e78 <__alt_data_end+0xfc004e78>
 c0050a8:	1805d0ba 	srai	r2,r3,2
 c0050ac:	01c00044 	movi	r7,1
 c0050b0:	30c00117 	ldw	r3,4(r6)
 c0050b4:	388e983a 	sll	r7,r7,r2
 c0050b8:	2805883a 	mov	r2,r5
 c0050bc:	38c6b03a 	or	r3,r7,r3
 c0050c0:	30c00115 	stw	r3,4(r6)
 c0050c4:	003f9b06 	br	c004f34 <__alt_data_end+0xfc004f34>
 c0050c8:	00c15504 	movi	r3,1364
 c0050cc:	18801a36 	bltu	r3,r2,c005138 <_malloc_r+0x768>
 c0050d0:	8804d4ba 	srli	r2,r17,18
 c0050d4:	12001f44 	addi	r8,r2,125
 c0050d8:	11c01f04 	addi	r7,r2,124
 c0050dc:	4209883a 	add	r4,r8,r8
 c0050e0:	003e5906 	br	c004a48 <__alt_data_end+0xfc004a48>
 c0050e4:	ad400404 	addi	r21,r21,16
 c0050e8:	003f1706 	br	c004d48 <__alt_data_end+0xfc004d48>
 c0050ec:	00c01504 	movi	r3,84
 c0050f0:	18802336 	bltu	r3,r2,c005180 <_malloc_r+0x7b0>
 c0050f4:	3804d33a 	srli	r2,r7,12
 c0050f8:	11401bc4 	addi	r5,r2,111
 c0050fc:	10c01b84 	addi	r3,r2,110
 c005100:	294b883a 	add	r5,r5,r5
 c005104:	003f7b06 	br	c004ef4 <__alt_data_end+0xfc004ef4>
 c005108:	9c000217 	ldw	r16,8(r19)
 c00510c:	00bfff04 	movi	r2,-4
 c005110:	80c00117 	ldw	r3,4(r16)
 c005114:	1886703a 	and	r3,r3,r2
 c005118:	003f5306 	br	c004e68 <__alt_data_end+0xfc004e68>
 c00511c:	3083ffcc 	andi	r2,r6,4095
 c005120:	103f181e 	bne	r2,zero,c004d84 <__alt_data_end+0xfc004d84>
 c005124:	99000217 	ldw	r4,8(r19)
 c005128:	b545883a 	add	r2,r22,r21
 c00512c:	10800054 	ori	r2,r2,1
 c005130:	20800115 	stw	r2,4(r4)
 c005134:	003f3e06 	br	c004e30 <__alt_data_end+0xfc004e30>
 c005138:	01003f84 	movi	r4,254
 c00513c:	02001fc4 	movi	r8,127
 c005140:	01c01f84 	movi	r7,126
 c005144:	003e4006 	br	c004a48 <__alt_data_end+0xfc004a48>
 c005148:	00830074 	movhi	r2,3073
 c00514c:	1080ba04 	addi	r2,r2,744
 c005150:	15000015 	stw	r20,0(r2)
 c005154:	003f1106 	br	c004d9c <__alt_data_end+0xfc004d9c>
 c005158:	00800044 	movi	r2,1
 c00515c:	002b883a 	mov	r21,zero
 c005160:	003f1f06 	br	c004de0 <__alt_data_end+0xfc004de0>
 c005164:	81400204 	addi	r5,r16,8
 c005168:	9009883a 	mov	r4,r18
 c00516c:	c007dd40 	call	c007dd4 <_free_r>
 c005170:	00830074 	movhi	r2,3073
 c005174:	10884804 	addi	r2,r2,8480
 c005178:	10c00017 	ldw	r3,0(r2)
 c00517c:	003f2c06 	br	c004e30 <__alt_data_end+0xfc004e30>
 c005180:	00c05504 	movi	r3,340
 c005184:	18800536 	bltu	r3,r2,c00519c <_malloc_r+0x7cc>
 c005188:	3804d3fa 	srli	r2,r7,15
 c00518c:	11401e04 	addi	r5,r2,120
 c005190:	10c01dc4 	addi	r3,r2,119
 c005194:	294b883a 	add	r5,r5,r5
 c005198:	003f5606 	br	c004ef4 <__alt_data_end+0xfc004ef4>
 c00519c:	00c15504 	movi	r3,1364
 c0051a0:	18800536 	bltu	r3,r2,c0051b8 <_malloc_r+0x7e8>
 c0051a4:	3804d4ba 	srli	r2,r7,18
 c0051a8:	11401f44 	addi	r5,r2,125
 c0051ac:	10c01f04 	addi	r3,r2,124
 c0051b0:	294b883a 	add	r5,r5,r5
 c0051b4:	003f4f06 	br	c004ef4 <__alt_data_end+0xfc004ef4>
 c0051b8:	01403f84 	movi	r5,254
 c0051bc:	00c01f84 	movi	r3,126
 c0051c0:	003f4c06 	br	c004ef4 <__alt_data_end+0xfc004ef4>
 c0051c4:	98800117 	ldw	r2,4(r19)
 c0051c8:	003fa006 	br	c00504c <__alt_data_end+0xfc00504c>
 c0051cc:	8808d0fa 	srli	r4,r17,3
 c0051d0:	20800044 	addi	r2,r4,1
 c0051d4:	1085883a 	add	r2,r2,r2
 c0051d8:	003e9006 	br	c004c1c <__alt_data_end+0xfc004c1c>

0c0051dc <memchr>:
 c0051dc:	208000cc 	andi	r2,r4,3
 c0051e0:	280f883a 	mov	r7,r5
 c0051e4:	10003426 	beq	r2,zero,c0052b8 <memchr+0xdc>
 c0051e8:	30bfffc4 	addi	r2,r6,-1
 c0051ec:	30001a26 	beq	r6,zero,c005258 <memchr+0x7c>
 c0051f0:	20c00003 	ldbu	r3,0(r4)
 c0051f4:	29803fcc 	andi	r6,r5,255
 c0051f8:	30c0051e 	bne	r6,r3,c005210 <memchr+0x34>
 c0051fc:	00001806 	br	c005260 <memchr+0x84>
 c005200:	10001526 	beq	r2,zero,c005258 <memchr+0x7c>
 c005204:	20c00003 	ldbu	r3,0(r4)
 c005208:	10bfffc4 	addi	r2,r2,-1
 c00520c:	30c01426 	beq	r6,r3,c005260 <memchr+0x84>
 c005210:	21000044 	addi	r4,r4,1
 c005214:	20c000cc 	andi	r3,r4,3
 c005218:	183ff91e 	bne	r3,zero,c005200 <__alt_data_end+0xfc005200>
 c00521c:	020000c4 	movi	r8,3
 c005220:	40801136 	bltu	r8,r2,c005268 <memchr+0x8c>
 c005224:	10000c26 	beq	r2,zero,c005258 <memchr+0x7c>
 c005228:	20c00003 	ldbu	r3,0(r4)
 c00522c:	29403fcc 	andi	r5,r5,255
 c005230:	28c00b26 	beq	r5,r3,c005260 <memchr+0x84>
 c005234:	20c00044 	addi	r3,r4,1
 c005238:	39803fcc 	andi	r6,r7,255
 c00523c:	2089883a 	add	r4,r4,r2
 c005240:	00000306 	br	c005250 <memchr+0x74>
 c005244:	18c00044 	addi	r3,r3,1
 c005248:	197fffc3 	ldbu	r5,-1(r3)
 c00524c:	31400526 	beq	r6,r5,c005264 <memchr+0x88>
 c005250:	1805883a 	mov	r2,r3
 c005254:	20fffb1e 	bne	r4,r3,c005244 <__alt_data_end+0xfc005244>
 c005258:	0005883a 	mov	r2,zero
 c00525c:	f800283a 	ret
 c005260:	2005883a 	mov	r2,r4
 c005264:	f800283a 	ret
 c005268:	28c03fcc 	andi	r3,r5,255
 c00526c:	1812923a 	slli	r9,r3,8
 c005270:	02ffbff4 	movhi	r11,65279
 c005274:	02a02074 	movhi	r10,32897
 c005278:	48d2b03a 	or	r9,r9,r3
 c00527c:	4806943a 	slli	r3,r9,16
 c005280:	5affbfc4 	addi	r11,r11,-257
 c005284:	52a02004 	addi	r10,r10,-32640
 c005288:	48d2b03a 	or	r9,r9,r3
 c00528c:	20c00017 	ldw	r3,0(r4)
 c005290:	48c6f03a 	xor	r3,r9,r3
 c005294:	1acd883a 	add	r6,r3,r11
 c005298:	00c6303a 	nor	r3,zero,r3
 c00529c:	30c6703a 	and	r3,r6,r3
 c0052a0:	1a86703a 	and	r3,r3,r10
 c0052a4:	183fe01e 	bne	r3,zero,c005228 <__alt_data_end+0xfc005228>
 c0052a8:	10bfff04 	addi	r2,r2,-4
 c0052ac:	21000104 	addi	r4,r4,4
 c0052b0:	40bff636 	bltu	r8,r2,c00528c <__alt_data_end+0xfc00528c>
 c0052b4:	003fdb06 	br	c005224 <__alt_data_end+0xfc005224>
 c0052b8:	3005883a 	mov	r2,r6
 c0052bc:	003fd706 	br	c00521c <__alt_data_end+0xfc00521c>

0c0052c0 <memcpy>:
 c0052c0:	defffd04 	addi	sp,sp,-12
 c0052c4:	dfc00215 	stw	ra,8(sp)
 c0052c8:	dc400115 	stw	r17,4(sp)
 c0052cc:	dc000015 	stw	r16,0(sp)
 c0052d0:	00c003c4 	movi	r3,15
 c0052d4:	2005883a 	mov	r2,r4
 c0052d8:	1980452e 	bgeu	r3,r6,c0053f0 <memcpy+0x130>
 c0052dc:	2906b03a 	or	r3,r5,r4
 c0052e0:	18c000cc 	andi	r3,r3,3
 c0052e4:	1800441e 	bne	r3,zero,c0053f8 <memcpy+0x138>
 c0052e8:	347ffc04 	addi	r17,r6,-16
 c0052ec:	8822d13a 	srli	r17,r17,4
 c0052f0:	28c00104 	addi	r3,r5,4
 c0052f4:	23400104 	addi	r13,r4,4
 c0052f8:	8820913a 	slli	r16,r17,4
 c0052fc:	2b000204 	addi	r12,r5,8
 c005300:	22c00204 	addi	r11,r4,8
 c005304:	84000504 	addi	r16,r16,20
 c005308:	2a800304 	addi	r10,r5,12
 c00530c:	22400304 	addi	r9,r4,12
 c005310:	2c21883a 	add	r16,r5,r16
 c005314:	2811883a 	mov	r8,r5
 c005318:	200f883a 	mov	r7,r4
 c00531c:	41000017 	ldw	r4,0(r8)
 c005320:	1fc00017 	ldw	ra,0(r3)
 c005324:	63c00017 	ldw	r15,0(r12)
 c005328:	39000015 	stw	r4,0(r7)
 c00532c:	53800017 	ldw	r14,0(r10)
 c005330:	6fc00015 	stw	ra,0(r13)
 c005334:	5bc00015 	stw	r15,0(r11)
 c005338:	4b800015 	stw	r14,0(r9)
 c00533c:	18c00404 	addi	r3,r3,16
 c005340:	39c00404 	addi	r7,r7,16
 c005344:	42000404 	addi	r8,r8,16
 c005348:	6b400404 	addi	r13,r13,16
 c00534c:	63000404 	addi	r12,r12,16
 c005350:	5ac00404 	addi	r11,r11,16
 c005354:	52800404 	addi	r10,r10,16
 c005358:	4a400404 	addi	r9,r9,16
 c00535c:	1c3fef1e 	bne	r3,r16,c00531c <__alt_data_end+0xfc00531c>
 c005360:	89c00044 	addi	r7,r17,1
 c005364:	380e913a 	slli	r7,r7,4
 c005368:	310003cc 	andi	r4,r6,15
 c00536c:	02c000c4 	movi	r11,3
 c005370:	11c7883a 	add	r3,r2,r7
 c005374:	29cb883a 	add	r5,r5,r7
 c005378:	5900212e 	bgeu	r11,r4,c005400 <memcpy+0x140>
 c00537c:	1813883a 	mov	r9,r3
 c005380:	2811883a 	mov	r8,r5
 c005384:	200f883a 	mov	r7,r4
 c005388:	42800017 	ldw	r10,0(r8)
 c00538c:	4a400104 	addi	r9,r9,4
 c005390:	39ffff04 	addi	r7,r7,-4
 c005394:	4abfff15 	stw	r10,-4(r9)
 c005398:	42000104 	addi	r8,r8,4
 c00539c:	59fffa36 	bltu	r11,r7,c005388 <__alt_data_end+0xfc005388>
 c0053a0:	213fff04 	addi	r4,r4,-4
 c0053a4:	2008d0ba 	srli	r4,r4,2
 c0053a8:	318000cc 	andi	r6,r6,3
 c0053ac:	21000044 	addi	r4,r4,1
 c0053b0:	2109883a 	add	r4,r4,r4
 c0053b4:	2109883a 	add	r4,r4,r4
 c0053b8:	1907883a 	add	r3,r3,r4
 c0053bc:	290b883a 	add	r5,r5,r4
 c0053c0:	30000626 	beq	r6,zero,c0053dc <memcpy+0x11c>
 c0053c4:	198d883a 	add	r6,r3,r6
 c0053c8:	29c00003 	ldbu	r7,0(r5)
 c0053cc:	18c00044 	addi	r3,r3,1
 c0053d0:	29400044 	addi	r5,r5,1
 c0053d4:	19ffffc5 	stb	r7,-1(r3)
 c0053d8:	19bffb1e 	bne	r3,r6,c0053c8 <__alt_data_end+0xfc0053c8>
 c0053dc:	dfc00217 	ldw	ra,8(sp)
 c0053e0:	dc400117 	ldw	r17,4(sp)
 c0053e4:	dc000017 	ldw	r16,0(sp)
 c0053e8:	dec00304 	addi	sp,sp,12
 c0053ec:	f800283a 	ret
 c0053f0:	2007883a 	mov	r3,r4
 c0053f4:	003ff206 	br	c0053c0 <__alt_data_end+0xfc0053c0>
 c0053f8:	2007883a 	mov	r3,r4
 c0053fc:	003ff106 	br	c0053c4 <__alt_data_end+0xfc0053c4>
 c005400:	200d883a 	mov	r6,r4
 c005404:	003fee06 	br	c0053c0 <__alt_data_end+0xfc0053c0>

0c005408 <_Balloc>:
 c005408:	20801317 	ldw	r2,76(r4)
 c00540c:	defffc04 	addi	sp,sp,-16
 c005410:	dc400115 	stw	r17,4(sp)
 c005414:	dc000015 	stw	r16,0(sp)
 c005418:	dfc00315 	stw	ra,12(sp)
 c00541c:	dc800215 	stw	r18,8(sp)
 c005420:	2023883a 	mov	r17,r4
 c005424:	2821883a 	mov	r16,r5
 c005428:	10000f26 	beq	r2,zero,c005468 <_Balloc+0x60>
 c00542c:	8407883a 	add	r3,r16,r16
 c005430:	18c7883a 	add	r3,r3,r3
 c005434:	10c7883a 	add	r3,r2,r3
 c005438:	18800017 	ldw	r2,0(r3)
 c00543c:	10001126 	beq	r2,zero,c005484 <_Balloc+0x7c>
 c005440:	11000017 	ldw	r4,0(r2)
 c005444:	19000015 	stw	r4,0(r3)
 c005448:	10000415 	stw	zero,16(r2)
 c00544c:	10000315 	stw	zero,12(r2)
 c005450:	dfc00317 	ldw	ra,12(sp)
 c005454:	dc800217 	ldw	r18,8(sp)
 c005458:	dc400117 	ldw	r17,4(sp)
 c00545c:	dc000017 	ldw	r16,0(sp)
 c005460:	dec00404 	addi	sp,sp,16
 c005464:	f800283a 	ret
 c005468:	01800844 	movi	r6,33
 c00546c:	01400104 	movi	r5,4
 c005470:	c007bd40 	call	c007bd4 <_calloc_r>
 c005474:	88801315 	stw	r2,76(r17)
 c005478:	103fec1e 	bne	r2,zero,c00542c <__alt_data_end+0xfc00542c>
 c00547c:	0005883a 	mov	r2,zero
 c005480:	003ff306 	br	c005450 <__alt_data_end+0xfc005450>
 c005484:	01400044 	movi	r5,1
 c005488:	2c24983a 	sll	r18,r5,r16
 c00548c:	8809883a 	mov	r4,r17
 c005490:	91800144 	addi	r6,r18,5
 c005494:	318d883a 	add	r6,r6,r6
 c005498:	318d883a 	add	r6,r6,r6
 c00549c:	c007bd40 	call	c007bd4 <_calloc_r>
 c0054a0:	103ff626 	beq	r2,zero,c00547c <__alt_data_end+0xfc00547c>
 c0054a4:	14000115 	stw	r16,4(r2)
 c0054a8:	14800215 	stw	r18,8(r2)
 c0054ac:	003fe606 	br	c005448 <__alt_data_end+0xfc005448>

0c0054b0 <_Bfree>:
 c0054b0:	28000826 	beq	r5,zero,c0054d4 <_Bfree+0x24>
 c0054b4:	28c00117 	ldw	r3,4(r5)
 c0054b8:	20801317 	ldw	r2,76(r4)
 c0054bc:	18c7883a 	add	r3,r3,r3
 c0054c0:	18c7883a 	add	r3,r3,r3
 c0054c4:	10c5883a 	add	r2,r2,r3
 c0054c8:	10c00017 	ldw	r3,0(r2)
 c0054cc:	28c00015 	stw	r3,0(r5)
 c0054d0:	11400015 	stw	r5,0(r2)
 c0054d4:	f800283a 	ret

0c0054d8 <__multadd>:
 c0054d8:	defff704 	addi	sp,sp,-36
 c0054dc:	dc800215 	stw	r18,8(sp)
 c0054e0:	2c800417 	ldw	r18,16(r5)
 c0054e4:	dd800615 	stw	r22,24(sp)
 c0054e8:	dd400515 	stw	r21,20(sp)
 c0054ec:	dd000415 	stw	r20,16(sp)
 c0054f0:	dcc00315 	stw	r19,12(sp)
 c0054f4:	dc400115 	stw	r17,4(sp)
 c0054f8:	dc000015 	stw	r16,0(sp)
 c0054fc:	dfc00815 	stw	ra,32(sp)
 c005500:	ddc00715 	stw	r23,28(sp)
 c005504:	2827883a 	mov	r19,r5
 c005508:	2029883a 	mov	r20,r4
 c00550c:	3023883a 	mov	r17,r6
 c005510:	3821883a 	mov	r16,r7
 c005514:	2d400504 	addi	r21,r5,20
 c005518:	002d883a 	mov	r22,zero
 c00551c:	adc00017 	ldw	r23,0(r21)
 c005520:	880b883a 	mov	r5,r17
 c005524:	ad400104 	addi	r21,r21,4
 c005528:	b93fffcc 	andi	r4,r23,65535
 c00552c:	c000b880 	call	c000b88 <__mulsi3>
 c005530:	b808d43a 	srli	r4,r23,16
 c005534:	880b883a 	mov	r5,r17
 c005538:	1421883a 	add	r16,r2,r16
 c00553c:	c000b880 	call	c000b88 <__mulsi3>
 c005540:	800ed43a 	srli	r7,r16,16
 c005544:	80ffffcc 	andi	r3,r16,65535
 c005548:	b5800044 	addi	r22,r22,1
 c00554c:	11c5883a 	add	r2,r2,r7
 c005550:	100e943a 	slli	r7,r2,16
 c005554:	1020d43a 	srli	r16,r2,16
 c005558:	38c7883a 	add	r3,r7,r3
 c00555c:	a8ffff15 	stw	r3,-4(r21)
 c005560:	b4bfee16 	blt	r22,r18,c00551c <__alt_data_end+0xfc00551c>
 c005564:	80000926 	beq	r16,zero,c00558c <__multadd+0xb4>
 c005568:	98800217 	ldw	r2,8(r19)
 c00556c:	9080130e 	bge	r18,r2,c0055bc <__multadd+0xe4>
 c005570:	90800144 	addi	r2,r18,5
 c005574:	1085883a 	add	r2,r2,r2
 c005578:	1085883a 	add	r2,r2,r2
 c00557c:	9885883a 	add	r2,r19,r2
 c005580:	14000015 	stw	r16,0(r2)
 c005584:	94800044 	addi	r18,r18,1
 c005588:	9c800415 	stw	r18,16(r19)
 c00558c:	9805883a 	mov	r2,r19
 c005590:	dfc00817 	ldw	ra,32(sp)
 c005594:	ddc00717 	ldw	r23,28(sp)
 c005598:	dd800617 	ldw	r22,24(sp)
 c00559c:	dd400517 	ldw	r21,20(sp)
 c0055a0:	dd000417 	ldw	r20,16(sp)
 c0055a4:	dcc00317 	ldw	r19,12(sp)
 c0055a8:	dc800217 	ldw	r18,8(sp)
 c0055ac:	dc400117 	ldw	r17,4(sp)
 c0055b0:	dc000017 	ldw	r16,0(sp)
 c0055b4:	dec00904 	addi	sp,sp,36
 c0055b8:	f800283a 	ret
 c0055bc:	99400117 	ldw	r5,4(r19)
 c0055c0:	a009883a 	mov	r4,r20
 c0055c4:	29400044 	addi	r5,r5,1
 c0055c8:	c0054080 	call	c005408 <_Balloc>
 c0055cc:	99800417 	ldw	r6,16(r19)
 c0055d0:	99400304 	addi	r5,r19,12
 c0055d4:	11000304 	addi	r4,r2,12
 c0055d8:	31800084 	addi	r6,r6,2
 c0055dc:	318d883a 	add	r6,r6,r6
 c0055e0:	318d883a 	add	r6,r6,r6
 c0055e4:	1023883a 	mov	r17,r2
 c0055e8:	c0052c00 	call	c0052c0 <memcpy>
 c0055ec:	98000a26 	beq	r19,zero,c005618 <__multadd+0x140>
 c0055f0:	98c00117 	ldw	r3,4(r19)
 c0055f4:	a0801317 	ldw	r2,76(r20)
 c0055f8:	18c7883a 	add	r3,r3,r3
 c0055fc:	18c7883a 	add	r3,r3,r3
 c005600:	10c5883a 	add	r2,r2,r3
 c005604:	10c00017 	ldw	r3,0(r2)
 c005608:	98c00015 	stw	r3,0(r19)
 c00560c:	14c00015 	stw	r19,0(r2)
 c005610:	8827883a 	mov	r19,r17
 c005614:	003fd606 	br	c005570 <__alt_data_end+0xfc005570>
 c005618:	8827883a 	mov	r19,r17
 c00561c:	003fd406 	br	c005570 <__alt_data_end+0xfc005570>

0c005620 <__s2b>:
 c005620:	defff904 	addi	sp,sp,-28
 c005624:	dc400115 	stw	r17,4(sp)
 c005628:	dc000015 	stw	r16,0(sp)
 c00562c:	2023883a 	mov	r17,r4
 c005630:	2821883a 	mov	r16,r5
 c005634:	39000204 	addi	r4,r7,8
 c005638:	01400244 	movi	r5,9
 c00563c:	dcc00315 	stw	r19,12(sp)
 c005640:	dc800215 	stw	r18,8(sp)
 c005644:	dfc00615 	stw	ra,24(sp)
 c005648:	dd400515 	stw	r21,20(sp)
 c00564c:	dd000415 	stw	r20,16(sp)
 c005650:	3825883a 	mov	r18,r7
 c005654:	3027883a 	mov	r19,r6
 c005658:	c0009d40 	call	c0009d4 <__divsi3>
 c00565c:	00c00044 	movi	r3,1
 c005660:	000b883a 	mov	r5,zero
 c005664:	1880030e 	bge	r3,r2,c005674 <__s2b+0x54>
 c005668:	18c7883a 	add	r3,r3,r3
 c00566c:	29400044 	addi	r5,r5,1
 c005670:	18bffd16 	blt	r3,r2,c005668 <__alt_data_end+0xfc005668>
 c005674:	8809883a 	mov	r4,r17
 c005678:	c0054080 	call	c005408 <_Balloc>
 c00567c:	d8c00717 	ldw	r3,28(sp)
 c005680:	10c00515 	stw	r3,20(r2)
 c005684:	00c00044 	movi	r3,1
 c005688:	10c00415 	stw	r3,16(r2)
 c00568c:	00c00244 	movi	r3,9
 c005690:	1cc0210e 	bge	r3,r19,c005718 <__s2b+0xf8>
 c005694:	80eb883a 	add	r21,r16,r3
 c005698:	a829883a 	mov	r20,r21
 c00569c:	84e1883a 	add	r16,r16,r19
 c0056a0:	a1c00007 	ldb	r7,0(r20)
 c0056a4:	01800284 	movi	r6,10
 c0056a8:	a5000044 	addi	r20,r20,1
 c0056ac:	100b883a 	mov	r5,r2
 c0056b0:	39fff404 	addi	r7,r7,-48
 c0056b4:	8809883a 	mov	r4,r17
 c0056b8:	c0054d80 	call	c0054d8 <__multadd>
 c0056bc:	a43ff81e 	bne	r20,r16,c0056a0 <__alt_data_end+0xfc0056a0>
 c0056c0:	ace1883a 	add	r16,r21,r19
 c0056c4:	843ffe04 	addi	r16,r16,-8
 c0056c8:	9c800a0e 	bge	r19,r18,c0056f4 <__s2b+0xd4>
 c0056cc:	94e5c83a 	sub	r18,r18,r19
 c0056d0:	84a5883a 	add	r18,r16,r18
 c0056d4:	81c00007 	ldb	r7,0(r16)
 c0056d8:	01800284 	movi	r6,10
 c0056dc:	84000044 	addi	r16,r16,1
 c0056e0:	100b883a 	mov	r5,r2
 c0056e4:	39fff404 	addi	r7,r7,-48
 c0056e8:	8809883a 	mov	r4,r17
 c0056ec:	c0054d80 	call	c0054d8 <__multadd>
 c0056f0:	84bff81e 	bne	r16,r18,c0056d4 <__alt_data_end+0xfc0056d4>
 c0056f4:	dfc00617 	ldw	ra,24(sp)
 c0056f8:	dd400517 	ldw	r21,20(sp)
 c0056fc:	dd000417 	ldw	r20,16(sp)
 c005700:	dcc00317 	ldw	r19,12(sp)
 c005704:	dc800217 	ldw	r18,8(sp)
 c005708:	dc400117 	ldw	r17,4(sp)
 c00570c:	dc000017 	ldw	r16,0(sp)
 c005710:	dec00704 	addi	sp,sp,28
 c005714:	f800283a 	ret
 c005718:	84000284 	addi	r16,r16,10
 c00571c:	1827883a 	mov	r19,r3
 c005720:	003fe906 	br	c0056c8 <__alt_data_end+0xfc0056c8>

0c005724 <__hi0bits>:
 c005724:	20bfffec 	andhi	r2,r4,65535
 c005728:	1000141e 	bne	r2,zero,c00577c <__hi0bits+0x58>
 c00572c:	2008943a 	slli	r4,r4,16
 c005730:	00800404 	movi	r2,16
 c005734:	20ffc02c 	andhi	r3,r4,65280
 c005738:	1800021e 	bne	r3,zero,c005744 <__hi0bits+0x20>
 c00573c:	2008923a 	slli	r4,r4,8
 c005740:	10800204 	addi	r2,r2,8
 c005744:	20fc002c 	andhi	r3,r4,61440
 c005748:	1800021e 	bne	r3,zero,c005754 <__hi0bits+0x30>
 c00574c:	2008913a 	slli	r4,r4,4
 c005750:	10800104 	addi	r2,r2,4
 c005754:	20f0002c 	andhi	r3,r4,49152
 c005758:	1800031e 	bne	r3,zero,c005768 <__hi0bits+0x44>
 c00575c:	2109883a 	add	r4,r4,r4
 c005760:	10800084 	addi	r2,r2,2
 c005764:	2109883a 	add	r4,r4,r4
 c005768:	20000316 	blt	r4,zero,c005778 <__hi0bits+0x54>
 c00576c:	2110002c 	andhi	r4,r4,16384
 c005770:	2000041e 	bne	r4,zero,c005784 <__hi0bits+0x60>
 c005774:	00800804 	movi	r2,32
 c005778:	f800283a 	ret
 c00577c:	0005883a 	mov	r2,zero
 c005780:	003fec06 	br	c005734 <__alt_data_end+0xfc005734>
 c005784:	10800044 	addi	r2,r2,1
 c005788:	f800283a 	ret

0c00578c <__lo0bits>:
 c00578c:	20c00017 	ldw	r3,0(r4)
 c005790:	188001cc 	andi	r2,r3,7
 c005794:	10000826 	beq	r2,zero,c0057b8 <__lo0bits+0x2c>
 c005798:	1880004c 	andi	r2,r3,1
 c00579c:	1000211e 	bne	r2,zero,c005824 <__lo0bits+0x98>
 c0057a0:	1880008c 	andi	r2,r3,2
 c0057a4:	1000211e 	bne	r2,zero,c00582c <__lo0bits+0xa0>
 c0057a8:	1806d0ba 	srli	r3,r3,2
 c0057ac:	00800084 	movi	r2,2
 c0057b0:	20c00015 	stw	r3,0(r4)
 c0057b4:	f800283a 	ret
 c0057b8:	18bfffcc 	andi	r2,r3,65535
 c0057bc:	10001326 	beq	r2,zero,c00580c <__lo0bits+0x80>
 c0057c0:	0005883a 	mov	r2,zero
 c0057c4:	19403fcc 	andi	r5,r3,255
 c0057c8:	2800021e 	bne	r5,zero,c0057d4 <__lo0bits+0x48>
 c0057cc:	1806d23a 	srli	r3,r3,8
 c0057d0:	10800204 	addi	r2,r2,8
 c0057d4:	194003cc 	andi	r5,r3,15
 c0057d8:	2800021e 	bne	r5,zero,c0057e4 <__lo0bits+0x58>
 c0057dc:	1806d13a 	srli	r3,r3,4
 c0057e0:	10800104 	addi	r2,r2,4
 c0057e4:	194000cc 	andi	r5,r3,3
 c0057e8:	2800021e 	bne	r5,zero,c0057f4 <__lo0bits+0x68>
 c0057ec:	1806d0ba 	srli	r3,r3,2
 c0057f0:	10800084 	addi	r2,r2,2
 c0057f4:	1940004c 	andi	r5,r3,1
 c0057f8:	2800081e 	bne	r5,zero,c00581c <__lo0bits+0x90>
 c0057fc:	1806d07a 	srli	r3,r3,1
 c005800:	1800051e 	bne	r3,zero,c005818 <__lo0bits+0x8c>
 c005804:	00800804 	movi	r2,32
 c005808:	f800283a 	ret
 c00580c:	1806d43a 	srli	r3,r3,16
 c005810:	00800404 	movi	r2,16
 c005814:	003feb06 	br	c0057c4 <__alt_data_end+0xfc0057c4>
 c005818:	10800044 	addi	r2,r2,1
 c00581c:	20c00015 	stw	r3,0(r4)
 c005820:	f800283a 	ret
 c005824:	0005883a 	mov	r2,zero
 c005828:	f800283a 	ret
 c00582c:	1806d07a 	srli	r3,r3,1
 c005830:	00800044 	movi	r2,1
 c005834:	20c00015 	stw	r3,0(r4)
 c005838:	f800283a 	ret

0c00583c <__i2b>:
 c00583c:	defffd04 	addi	sp,sp,-12
 c005840:	dc000015 	stw	r16,0(sp)
 c005844:	04000044 	movi	r16,1
 c005848:	dc400115 	stw	r17,4(sp)
 c00584c:	2823883a 	mov	r17,r5
 c005850:	800b883a 	mov	r5,r16
 c005854:	dfc00215 	stw	ra,8(sp)
 c005858:	c0054080 	call	c005408 <_Balloc>
 c00585c:	14400515 	stw	r17,20(r2)
 c005860:	14000415 	stw	r16,16(r2)
 c005864:	dfc00217 	ldw	ra,8(sp)
 c005868:	dc400117 	ldw	r17,4(sp)
 c00586c:	dc000017 	ldw	r16,0(sp)
 c005870:	dec00304 	addi	sp,sp,12
 c005874:	f800283a 	ret

0c005878 <__multiply>:
 c005878:	deffef04 	addi	sp,sp,-68
 c00587c:	dc400815 	stw	r17,32(sp)
 c005880:	dc000715 	stw	r16,28(sp)
 c005884:	34400417 	ldw	r17,16(r6)
 c005888:	2c000417 	ldw	r16,16(r5)
 c00588c:	dd800d15 	stw	r22,52(sp)
 c005890:	dc800915 	stw	r18,36(sp)
 c005894:	dfc01015 	stw	ra,64(sp)
 c005898:	df000f15 	stw	fp,60(sp)
 c00589c:	ddc00e15 	stw	r23,56(sp)
 c0058a0:	dd400c15 	stw	r21,48(sp)
 c0058a4:	dd000b15 	stw	r20,44(sp)
 c0058a8:	dcc00a15 	stw	r19,40(sp)
 c0058ac:	2825883a 	mov	r18,r5
 c0058b0:	302d883a 	mov	r22,r6
 c0058b4:	8440050e 	bge	r16,r17,c0058cc <__multiply+0x54>
 c0058b8:	8007883a 	mov	r3,r16
 c0058bc:	3025883a 	mov	r18,r6
 c0058c0:	8821883a 	mov	r16,r17
 c0058c4:	282d883a 	mov	r22,r5
 c0058c8:	1823883a 	mov	r17,r3
 c0058cc:	90800217 	ldw	r2,8(r18)
 c0058d0:	8447883a 	add	r3,r16,r17
 c0058d4:	d8c00215 	stw	r3,8(sp)
 c0058d8:	91400117 	ldw	r5,4(r18)
 c0058dc:	10c0010e 	bge	r2,r3,c0058e4 <__multiply+0x6c>
 c0058e0:	29400044 	addi	r5,r5,1
 c0058e4:	c0054080 	call	c005408 <_Balloc>
 c0058e8:	d8c00217 	ldw	r3,8(sp)
 c0058ec:	d8800615 	stw	r2,24(sp)
 c0058f0:	18eb883a 	add	r21,r3,r3
 c0058f4:	ad6b883a 	add	r21,r21,r21
 c0058f8:	10c00504 	addi	r3,r2,20
 c0058fc:	1d6b883a 	add	r21,r3,r21
 c005900:	d8c00115 	stw	r3,4(sp)
 c005904:	dd400315 	stw	r21,12(sp)
 c005908:	1805883a 	mov	r2,r3
 c00590c:	1d40042e 	bgeu	r3,r21,c005920 <__multiply+0xa8>
 c005910:	d8c00317 	ldw	r3,12(sp)
 c005914:	10000015 	stw	zero,0(r2)
 c005918:	10800104 	addi	r2,r2,4
 c00591c:	10fffc36 	bltu	r2,r3,c005910 <__alt_data_end+0xfc005910>
 c005920:	8c63883a 	add	r17,r17,r17
 c005924:	b5800504 	addi	r22,r22,20
 c005928:	8c63883a 	add	r17,r17,r17
 c00592c:	94800504 	addi	r18,r18,20
 c005930:	8421883a 	add	r16,r16,r16
 c005934:	b463883a 	add	r17,r22,r17
 c005938:	8421883a 	add	r16,r16,r16
 c00593c:	dd800015 	stw	r22,0(sp)
 c005940:	dc800415 	stw	r18,16(sp)
 c005944:	dc400515 	stw	r17,20(sp)
 c005948:	9429883a 	add	r20,r18,r16
 c00594c:	b4404f2e 	bgeu	r22,r17,c005a8c <__multiply+0x214>
 c005950:	d8c00017 	ldw	r3,0(sp)
 c005954:	1c800017 	ldw	r18,0(r3)
 c005958:	947fffcc 	andi	r17,r18,65535
 c00595c:	88001e26 	beq	r17,zero,c0059d8 <__multiply+0x160>
 c005960:	dd800117 	ldw	r22,4(sp)
 c005964:	dd400417 	ldw	r21,16(sp)
 c005968:	0027883a 	mov	r19,zero
 c00596c:	ac800017 	ldw	r18,0(r21)
 c005970:	b4000017 	ldw	r16,0(r22)
 c005974:	880b883a 	mov	r5,r17
 c005978:	913fffcc 	andi	r4,r18,65535
 c00597c:	c000b880 	call	c000b88 <__mulsi3>
 c005980:	9008d43a 	srli	r4,r18,16
 c005984:	84bfffcc 	andi	r18,r16,65535
 c005988:	1485883a 	add	r2,r2,r18
 c00598c:	14e5883a 	add	r18,r2,r19
 c005990:	8020d43a 	srli	r16,r16,16
 c005994:	9026d43a 	srli	r19,r18,16
 c005998:	880b883a 	mov	r5,r17
 c00599c:	c000b880 	call	c000b88 <__mulsi3>
 c0059a0:	1405883a 	add	r2,r2,r16
 c0059a4:	14e1883a 	add	r16,r2,r19
 c0059a8:	90ffffcc 	andi	r3,r18,65535
 c0059ac:	8024943a 	slli	r18,r16,16
 c0059b0:	ad400104 	addi	r21,r21,4
 c0059b4:	b005883a 	mov	r2,r22
 c0059b8:	90c6b03a 	or	r3,r18,r3
 c0059bc:	b0c00015 	stw	r3,0(r22)
 c0059c0:	8026d43a 	srli	r19,r16,16
 c0059c4:	b5800104 	addi	r22,r22,4
 c0059c8:	ad3fe836 	bltu	r21,r20,c00596c <__alt_data_end+0xfc00596c>
 c0059cc:	d8c00017 	ldw	r3,0(sp)
 c0059d0:	14c00115 	stw	r19,4(r2)
 c0059d4:	1c800017 	ldw	r18,0(r3)
 c0059d8:	9024d43a 	srli	r18,r18,16
 c0059dc:	90002226 	beq	r18,zero,c005a68 <__multiply+0x1f0>
 c0059e0:	d8c00117 	ldw	r3,4(sp)
 c0059e4:	dd800417 	ldw	r22,16(sp)
 c0059e8:	002f883a 	mov	r23,zero
 c0059ec:	1f000017 	ldw	fp,0(r3)
 c0059f0:	1823883a 	mov	r17,r3
 c0059f4:	182b883a 	mov	r21,r3
 c0059f8:	e021883a 	mov	r16,fp
 c0059fc:	00000106 	br	c005a04 <__multiply+0x18c>
 c005a00:	982b883a 	mov	r21,r19
 c005a04:	b100000b 	ldhu	r4,0(r22)
 c005a08:	8020d43a 	srli	r16,r16,16
 c005a0c:	900b883a 	mov	r5,r18
 c005a10:	c000b880 	call	c000b88 <__mulsi3>
 c005a14:	1405883a 	add	r2,r2,r16
 c005a18:	15ef883a 	add	r23,r2,r23
 c005a1c:	b804943a 	slli	r2,r23,16
 c005a20:	e0ffffcc 	andi	r3,fp,65535
 c005a24:	8c400104 	addi	r17,r17,4
 c005a28:	10c6b03a 	or	r3,r2,r3
 c005a2c:	88ffff15 	stw	r3,-4(r17)
 c005a30:	b5800104 	addi	r22,r22,4
 c005a34:	b13fff17 	ldw	r4,-4(r22)
 c005a38:	acc00104 	addi	r19,r21,4
 c005a3c:	900b883a 	mov	r5,r18
 c005a40:	2008d43a 	srli	r4,r4,16
 c005a44:	9c000017 	ldw	r16,0(r19)
 c005a48:	c000b880 	call	c000b88 <__mulsi3>
 c005a4c:	b806d43a 	srli	r3,r23,16
 c005a50:	813fffcc 	andi	r4,r16,65535
 c005a54:	1105883a 	add	r2,r2,r4
 c005a58:	10f9883a 	add	fp,r2,r3
 c005a5c:	e02ed43a 	srli	r23,fp,16
 c005a60:	b53fe736 	bltu	r22,r20,c005a00 <__alt_data_end+0xfc005a00>
 c005a64:	af000115 	stw	fp,4(r21)
 c005a68:	d8c00017 	ldw	r3,0(sp)
 c005a6c:	d9000517 	ldw	r4,20(sp)
 c005a70:	18c00104 	addi	r3,r3,4
 c005a74:	d8c00015 	stw	r3,0(sp)
 c005a78:	d8c00117 	ldw	r3,4(sp)
 c005a7c:	18c00104 	addi	r3,r3,4
 c005a80:	d8c00115 	stw	r3,4(sp)
 c005a84:	d8c00017 	ldw	r3,0(sp)
 c005a88:	193fb136 	bltu	r3,r4,c005950 <__alt_data_end+0xfc005950>
 c005a8c:	d8c00217 	ldw	r3,8(sp)
 c005a90:	00c00c0e 	bge	zero,r3,c005ac4 <__multiply+0x24c>
 c005a94:	d8c00317 	ldw	r3,12(sp)
 c005a98:	18bfff17 	ldw	r2,-4(r3)
 c005a9c:	1d7fff04 	addi	r21,r3,-4
 c005aa0:	10000326 	beq	r2,zero,c005ab0 <__multiply+0x238>
 c005aa4:	00000706 	br	c005ac4 <__multiply+0x24c>
 c005aa8:	a8800017 	ldw	r2,0(r21)
 c005aac:	1000051e 	bne	r2,zero,c005ac4 <__multiply+0x24c>
 c005ab0:	d8c00217 	ldw	r3,8(sp)
 c005ab4:	ad7fff04 	addi	r21,r21,-4
 c005ab8:	18ffffc4 	addi	r3,r3,-1
 c005abc:	d8c00215 	stw	r3,8(sp)
 c005ac0:	183ff91e 	bne	r3,zero,c005aa8 <__alt_data_end+0xfc005aa8>
 c005ac4:	d8c00617 	ldw	r3,24(sp)
 c005ac8:	d9000217 	ldw	r4,8(sp)
 c005acc:	1805883a 	mov	r2,r3
 c005ad0:	19000415 	stw	r4,16(r3)
 c005ad4:	dfc01017 	ldw	ra,64(sp)
 c005ad8:	df000f17 	ldw	fp,60(sp)
 c005adc:	ddc00e17 	ldw	r23,56(sp)
 c005ae0:	dd800d17 	ldw	r22,52(sp)
 c005ae4:	dd400c17 	ldw	r21,48(sp)
 c005ae8:	dd000b17 	ldw	r20,44(sp)
 c005aec:	dcc00a17 	ldw	r19,40(sp)
 c005af0:	dc800917 	ldw	r18,36(sp)
 c005af4:	dc400817 	ldw	r17,32(sp)
 c005af8:	dc000717 	ldw	r16,28(sp)
 c005afc:	dec01104 	addi	sp,sp,68
 c005b00:	f800283a 	ret

0c005b04 <__pow5mult>:
 c005b04:	defffa04 	addi	sp,sp,-24
 c005b08:	dcc00315 	stw	r19,12(sp)
 c005b0c:	dc000015 	stw	r16,0(sp)
 c005b10:	dfc00515 	stw	ra,20(sp)
 c005b14:	dd000415 	stw	r20,16(sp)
 c005b18:	dc800215 	stw	r18,8(sp)
 c005b1c:	dc400115 	stw	r17,4(sp)
 c005b20:	308000cc 	andi	r2,r6,3
 c005b24:	3021883a 	mov	r16,r6
 c005b28:	2027883a 	mov	r19,r4
 c005b2c:	10002f1e 	bne	r2,zero,c005bec <__pow5mult+0xe8>
 c005b30:	2825883a 	mov	r18,r5
 c005b34:	8021d0ba 	srai	r16,r16,2
 c005b38:	80001a26 	beq	r16,zero,c005ba4 <__pow5mult+0xa0>
 c005b3c:	9c401217 	ldw	r17,72(r19)
 c005b40:	8800061e 	bne	r17,zero,c005b5c <__pow5mult+0x58>
 c005b44:	00003406 	br	c005c18 <__pow5mult+0x114>
 c005b48:	8021d07a 	srai	r16,r16,1
 c005b4c:	80001526 	beq	r16,zero,c005ba4 <__pow5mult+0xa0>
 c005b50:	88800017 	ldw	r2,0(r17)
 c005b54:	10001c26 	beq	r2,zero,c005bc8 <__pow5mult+0xc4>
 c005b58:	1023883a 	mov	r17,r2
 c005b5c:	8080004c 	andi	r2,r16,1
 c005b60:	103ff926 	beq	r2,zero,c005b48 <__alt_data_end+0xfc005b48>
 c005b64:	880d883a 	mov	r6,r17
 c005b68:	900b883a 	mov	r5,r18
 c005b6c:	9809883a 	mov	r4,r19
 c005b70:	c0058780 	call	c005878 <__multiply>
 c005b74:	90001b26 	beq	r18,zero,c005be4 <__pow5mult+0xe0>
 c005b78:	91000117 	ldw	r4,4(r18)
 c005b7c:	98c01317 	ldw	r3,76(r19)
 c005b80:	8021d07a 	srai	r16,r16,1
 c005b84:	2109883a 	add	r4,r4,r4
 c005b88:	2109883a 	add	r4,r4,r4
 c005b8c:	1907883a 	add	r3,r3,r4
 c005b90:	19000017 	ldw	r4,0(r3)
 c005b94:	91000015 	stw	r4,0(r18)
 c005b98:	1c800015 	stw	r18,0(r3)
 c005b9c:	1025883a 	mov	r18,r2
 c005ba0:	803feb1e 	bne	r16,zero,c005b50 <__alt_data_end+0xfc005b50>
 c005ba4:	9005883a 	mov	r2,r18
 c005ba8:	dfc00517 	ldw	ra,20(sp)
 c005bac:	dd000417 	ldw	r20,16(sp)
 c005bb0:	dcc00317 	ldw	r19,12(sp)
 c005bb4:	dc800217 	ldw	r18,8(sp)
 c005bb8:	dc400117 	ldw	r17,4(sp)
 c005bbc:	dc000017 	ldw	r16,0(sp)
 c005bc0:	dec00604 	addi	sp,sp,24
 c005bc4:	f800283a 	ret
 c005bc8:	880d883a 	mov	r6,r17
 c005bcc:	880b883a 	mov	r5,r17
 c005bd0:	9809883a 	mov	r4,r19
 c005bd4:	c0058780 	call	c005878 <__multiply>
 c005bd8:	88800015 	stw	r2,0(r17)
 c005bdc:	10000015 	stw	zero,0(r2)
 c005be0:	003fdd06 	br	c005b58 <__alt_data_end+0xfc005b58>
 c005be4:	1025883a 	mov	r18,r2
 c005be8:	003fd706 	br	c005b48 <__alt_data_end+0xfc005b48>
 c005bec:	10bfffc4 	addi	r2,r2,-1
 c005bf0:	1085883a 	add	r2,r2,r2
 c005bf4:	00c30074 	movhi	r3,3073
 c005bf8:	18f8b404 	addi	r3,r3,-7472
 c005bfc:	1085883a 	add	r2,r2,r2
 c005c00:	1885883a 	add	r2,r3,r2
 c005c04:	11800017 	ldw	r6,0(r2)
 c005c08:	000f883a 	mov	r7,zero
 c005c0c:	c0054d80 	call	c0054d8 <__multadd>
 c005c10:	1025883a 	mov	r18,r2
 c005c14:	003fc706 	br	c005b34 <__alt_data_end+0xfc005b34>
 c005c18:	05000044 	movi	r20,1
 c005c1c:	a00b883a 	mov	r5,r20
 c005c20:	9809883a 	mov	r4,r19
 c005c24:	c0054080 	call	c005408 <_Balloc>
 c005c28:	1023883a 	mov	r17,r2
 c005c2c:	00809c44 	movi	r2,625
 c005c30:	88800515 	stw	r2,20(r17)
 c005c34:	8d000415 	stw	r20,16(r17)
 c005c38:	9c401215 	stw	r17,72(r19)
 c005c3c:	88000015 	stw	zero,0(r17)
 c005c40:	003fc606 	br	c005b5c <__alt_data_end+0xfc005b5c>

0c005c44 <__lshift>:
 c005c44:	defff904 	addi	sp,sp,-28
 c005c48:	dd400515 	stw	r21,20(sp)
 c005c4c:	dcc00315 	stw	r19,12(sp)
 c005c50:	302bd17a 	srai	r21,r6,5
 c005c54:	2cc00417 	ldw	r19,16(r5)
 c005c58:	28800217 	ldw	r2,8(r5)
 c005c5c:	dd000415 	stw	r20,16(sp)
 c005c60:	ace7883a 	add	r19,r21,r19
 c005c64:	dc800215 	stw	r18,8(sp)
 c005c68:	dc400115 	stw	r17,4(sp)
 c005c6c:	dc000015 	stw	r16,0(sp)
 c005c70:	dfc00615 	stw	ra,24(sp)
 c005c74:	9c000044 	addi	r16,r19,1
 c005c78:	2823883a 	mov	r17,r5
 c005c7c:	3029883a 	mov	r20,r6
 c005c80:	2025883a 	mov	r18,r4
 c005c84:	29400117 	ldw	r5,4(r5)
 c005c88:	1400030e 	bge	r2,r16,c005c98 <__lshift+0x54>
 c005c8c:	1085883a 	add	r2,r2,r2
 c005c90:	29400044 	addi	r5,r5,1
 c005c94:	143ffd16 	blt	r2,r16,c005c8c <__alt_data_end+0xfc005c8c>
 c005c98:	9009883a 	mov	r4,r18
 c005c9c:	c0054080 	call	c005408 <_Balloc>
 c005ca0:	10c00504 	addi	r3,r2,20
 c005ca4:	0540070e 	bge	zero,r21,c005cc4 <__lshift+0x80>
 c005ca8:	ad6b883a 	add	r21,r21,r21
 c005cac:	ad6b883a 	add	r21,r21,r21
 c005cb0:	1809883a 	mov	r4,r3
 c005cb4:	1d47883a 	add	r3,r3,r21
 c005cb8:	20000015 	stw	zero,0(r4)
 c005cbc:	21000104 	addi	r4,r4,4
 c005cc0:	193ffd1e 	bne	r3,r4,c005cb8 <__alt_data_end+0xfc005cb8>
 c005cc4:	8a000417 	ldw	r8,16(r17)
 c005cc8:	89000504 	addi	r4,r17,20
 c005ccc:	a18007cc 	andi	r6,r20,31
 c005cd0:	4211883a 	add	r8,r8,r8
 c005cd4:	4211883a 	add	r8,r8,r8
 c005cd8:	2211883a 	add	r8,r4,r8
 c005cdc:	30002326 	beq	r6,zero,c005d6c <__lshift+0x128>
 c005ce0:	02400804 	movi	r9,32
 c005ce4:	4993c83a 	sub	r9,r9,r6
 c005ce8:	000b883a 	mov	r5,zero
 c005cec:	21c00017 	ldw	r7,0(r4)
 c005cf0:	1815883a 	mov	r10,r3
 c005cf4:	18c00104 	addi	r3,r3,4
 c005cf8:	398e983a 	sll	r7,r7,r6
 c005cfc:	21000104 	addi	r4,r4,4
 c005d00:	394ab03a 	or	r5,r7,r5
 c005d04:	197fff15 	stw	r5,-4(r3)
 c005d08:	217fff17 	ldw	r5,-4(r4)
 c005d0c:	2a4ad83a 	srl	r5,r5,r9
 c005d10:	223ff636 	bltu	r4,r8,c005cec <__alt_data_end+0xfc005cec>
 c005d14:	51400115 	stw	r5,4(r10)
 c005d18:	28001a1e 	bne	r5,zero,c005d84 <__lshift+0x140>
 c005d1c:	843fffc4 	addi	r16,r16,-1
 c005d20:	14000415 	stw	r16,16(r2)
 c005d24:	88000826 	beq	r17,zero,c005d48 <__lshift+0x104>
 c005d28:	89000117 	ldw	r4,4(r17)
 c005d2c:	90c01317 	ldw	r3,76(r18)
 c005d30:	2109883a 	add	r4,r4,r4
 c005d34:	2109883a 	add	r4,r4,r4
 c005d38:	1907883a 	add	r3,r3,r4
 c005d3c:	19000017 	ldw	r4,0(r3)
 c005d40:	89000015 	stw	r4,0(r17)
 c005d44:	1c400015 	stw	r17,0(r3)
 c005d48:	dfc00617 	ldw	ra,24(sp)
 c005d4c:	dd400517 	ldw	r21,20(sp)
 c005d50:	dd000417 	ldw	r20,16(sp)
 c005d54:	dcc00317 	ldw	r19,12(sp)
 c005d58:	dc800217 	ldw	r18,8(sp)
 c005d5c:	dc400117 	ldw	r17,4(sp)
 c005d60:	dc000017 	ldw	r16,0(sp)
 c005d64:	dec00704 	addi	sp,sp,28
 c005d68:	f800283a 	ret
 c005d6c:	21400017 	ldw	r5,0(r4)
 c005d70:	18c00104 	addi	r3,r3,4
 c005d74:	21000104 	addi	r4,r4,4
 c005d78:	197fff15 	stw	r5,-4(r3)
 c005d7c:	223ffb36 	bltu	r4,r8,c005d6c <__alt_data_end+0xfc005d6c>
 c005d80:	003fe606 	br	c005d1c <__alt_data_end+0xfc005d1c>
 c005d84:	9c000084 	addi	r16,r19,2
 c005d88:	003fe406 	br	c005d1c <__alt_data_end+0xfc005d1c>

0c005d8c <__mcmp>:
 c005d8c:	20800417 	ldw	r2,16(r4)
 c005d90:	28c00417 	ldw	r3,16(r5)
 c005d94:	10c5c83a 	sub	r2,r2,r3
 c005d98:	1000111e 	bne	r2,zero,c005de0 <__mcmp+0x54>
 c005d9c:	18c7883a 	add	r3,r3,r3
 c005da0:	18c7883a 	add	r3,r3,r3
 c005da4:	21000504 	addi	r4,r4,20
 c005da8:	29400504 	addi	r5,r5,20
 c005dac:	20c5883a 	add	r2,r4,r3
 c005db0:	28cb883a 	add	r5,r5,r3
 c005db4:	00000106 	br	c005dbc <__mcmp+0x30>
 c005db8:	20800a2e 	bgeu	r4,r2,c005de4 <__mcmp+0x58>
 c005dbc:	10bfff04 	addi	r2,r2,-4
 c005dc0:	297fff04 	addi	r5,r5,-4
 c005dc4:	11800017 	ldw	r6,0(r2)
 c005dc8:	28c00017 	ldw	r3,0(r5)
 c005dcc:	30fffa26 	beq	r6,r3,c005db8 <__alt_data_end+0xfc005db8>
 c005dd0:	30c00236 	bltu	r6,r3,c005ddc <__mcmp+0x50>
 c005dd4:	00800044 	movi	r2,1
 c005dd8:	f800283a 	ret
 c005ddc:	00bfffc4 	movi	r2,-1
 c005de0:	f800283a 	ret
 c005de4:	0005883a 	mov	r2,zero
 c005de8:	f800283a 	ret

0c005dec <__mdiff>:
 c005dec:	28c00417 	ldw	r3,16(r5)
 c005df0:	30800417 	ldw	r2,16(r6)
 c005df4:	defffa04 	addi	sp,sp,-24
 c005df8:	dcc00315 	stw	r19,12(sp)
 c005dfc:	dc800215 	stw	r18,8(sp)
 c005e00:	dfc00515 	stw	ra,20(sp)
 c005e04:	dd000415 	stw	r20,16(sp)
 c005e08:	dc400115 	stw	r17,4(sp)
 c005e0c:	dc000015 	stw	r16,0(sp)
 c005e10:	1887c83a 	sub	r3,r3,r2
 c005e14:	2825883a 	mov	r18,r5
 c005e18:	3027883a 	mov	r19,r6
 c005e1c:	1800141e 	bne	r3,zero,c005e70 <__mdiff+0x84>
 c005e20:	1085883a 	add	r2,r2,r2
 c005e24:	1085883a 	add	r2,r2,r2
 c005e28:	2a000504 	addi	r8,r5,20
 c005e2c:	34000504 	addi	r16,r6,20
 c005e30:	4087883a 	add	r3,r8,r2
 c005e34:	8085883a 	add	r2,r16,r2
 c005e38:	00000106 	br	c005e40 <__mdiff+0x54>
 c005e3c:	40c0592e 	bgeu	r8,r3,c005fa4 <__mdiff+0x1b8>
 c005e40:	18ffff04 	addi	r3,r3,-4
 c005e44:	10bfff04 	addi	r2,r2,-4
 c005e48:	19c00017 	ldw	r7,0(r3)
 c005e4c:	11400017 	ldw	r5,0(r2)
 c005e50:	397ffa26 	beq	r7,r5,c005e3c <__alt_data_end+0xfc005e3c>
 c005e54:	3940592e 	bgeu	r7,r5,c005fbc <__mdiff+0x1d0>
 c005e58:	9005883a 	mov	r2,r18
 c005e5c:	4023883a 	mov	r17,r8
 c005e60:	9825883a 	mov	r18,r19
 c005e64:	05000044 	movi	r20,1
 c005e68:	1027883a 	mov	r19,r2
 c005e6c:	00000406 	br	c005e80 <__mdiff+0x94>
 c005e70:	18005616 	blt	r3,zero,c005fcc <__mdiff+0x1e0>
 c005e74:	34400504 	addi	r17,r6,20
 c005e78:	2c000504 	addi	r16,r5,20
 c005e7c:	0029883a 	mov	r20,zero
 c005e80:	91400117 	ldw	r5,4(r18)
 c005e84:	c0054080 	call	c005408 <_Balloc>
 c005e88:	92400417 	ldw	r9,16(r18)
 c005e8c:	9b000417 	ldw	r12,16(r19)
 c005e90:	12c00504 	addi	r11,r2,20
 c005e94:	4a51883a 	add	r8,r9,r9
 c005e98:	6319883a 	add	r12,r12,r12
 c005e9c:	4211883a 	add	r8,r8,r8
 c005ea0:	6319883a 	add	r12,r12,r12
 c005ea4:	15000315 	stw	r20,12(r2)
 c005ea8:	8211883a 	add	r8,r16,r8
 c005eac:	8b19883a 	add	r12,r17,r12
 c005eb0:	0007883a 	mov	r3,zero
 c005eb4:	81400017 	ldw	r5,0(r16)
 c005eb8:	89c00017 	ldw	r7,0(r17)
 c005ebc:	59800104 	addi	r6,r11,4
 c005ec0:	293fffcc 	andi	r4,r5,65535
 c005ec4:	20c7883a 	add	r3,r4,r3
 c005ec8:	393fffcc 	andi	r4,r7,65535
 c005ecc:	1909c83a 	sub	r4,r3,r4
 c005ed0:	280ad43a 	srli	r5,r5,16
 c005ed4:	380ed43a 	srli	r7,r7,16
 c005ed8:	2007d43a 	srai	r3,r4,16
 c005edc:	213fffcc 	andi	r4,r4,65535
 c005ee0:	29cbc83a 	sub	r5,r5,r7
 c005ee4:	28c7883a 	add	r3,r5,r3
 c005ee8:	180a943a 	slli	r5,r3,16
 c005eec:	8c400104 	addi	r17,r17,4
 c005ef0:	84000104 	addi	r16,r16,4
 c005ef4:	2908b03a 	or	r4,r5,r4
 c005ef8:	59000015 	stw	r4,0(r11)
 c005efc:	1807d43a 	srai	r3,r3,16
 c005f00:	3015883a 	mov	r10,r6
 c005f04:	3017883a 	mov	r11,r6
 c005f08:	8b3fea36 	bltu	r17,r12,c005eb4 <__alt_data_end+0xfc005eb4>
 c005f0c:	8200162e 	bgeu	r16,r8,c005f68 <__mdiff+0x17c>
 c005f10:	8017883a 	mov	r11,r16
 c005f14:	59400017 	ldw	r5,0(r11)
 c005f18:	31800104 	addi	r6,r6,4
 c005f1c:	5ac00104 	addi	r11,r11,4
 c005f20:	293fffcc 	andi	r4,r5,65535
 c005f24:	20c7883a 	add	r3,r4,r3
 c005f28:	280ed43a 	srli	r7,r5,16
 c005f2c:	180bd43a 	srai	r5,r3,16
 c005f30:	193fffcc 	andi	r4,r3,65535
 c005f34:	3947883a 	add	r3,r7,r5
 c005f38:	180a943a 	slli	r5,r3,16
 c005f3c:	1807d43a 	srai	r3,r3,16
 c005f40:	2908b03a 	or	r4,r5,r4
 c005f44:	313fff15 	stw	r4,-4(r6)
 c005f48:	5a3ff236 	bltu	r11,r8,c005f14 <__alt_data_end+0xfc005f14>
 c005f4c:	0406303a 	nor	r3,zero,r16
 c005f50:	1a07883a 	add	r3,r3,r8
 c005f54:	1806d0ba 	srli	r3,r3,2
 c005f58:	18c00044 	addi	r3,r3,1
 c005f5c:	18c7883a 	add	r3,r3,r3
 c005f60:	18c7883a 	add	r3,r3,r3
 c005f64:	50d5883a 	add	r10,r10,r3
 c005f68:	50ffff04 	addi	r3,r10,-4
 c005f6c:	2000041e 	bne	r4,zero,c005f80 <__mdiff+0x194>
 c005f70:	18ffff04 	addi	r3,r3,-4
 c005f74:	19000017 	ldw	r4,0(r3)
 c005f78:	4a7fffc4 	addi	r9,r9,-1
 c005f7c:	203ffc26 	beq	r4,zero,c005f70 <__alt_data_end+0xfc005f70>
 c005f80:	12400415 	stw	r9,16(r2)
 c005f84:	dfc00517 	ldw	ra,20(sp)
 c005f88:	dd000417 	ldw	r20,16(sp)
 c005f8c:	dcc00317 	ldw	r19,12(sp)
 c005f90:	dc800217 	ldw	r18,8(sp)
 c005f94:	dc400117 	ldw	r17,4(sp)
 c005f98:	dc000017 	ldw	r16,0(sp)
 c005f9c:	dec00604 	addi	sp,sp,24
 c005fa0:	f800283a 	ret
 c005fa4:	000b883a 	mov	r5,zero
 c005fa8:	c0054080 	call	c005408 <_Balloc>
 c005fac:	00c00044 	movi	r3,1
 c005fb0:	10c00415 	stw	r3,16(r2)
 c005fb4:	10000515 	stw	zero,20(r2)
 c005fb8:	003ff206 	br	c005f84 <__alt_data_end+0xfc005f84>
 c005fbc:	8023883a 	mov	r17,r16
 c005fc0:	0029883a 	mov	r20,zero
 c005fc4:	4021883a 	mov	r16,r8
 c005fc8:	003fad06 	br	c005e80 <__alt_data_end+0xfc005e80>
 c005fcc:	9005883a 	mov	r2,r18
 c005fd0:	94400504 	addi	r17,r18,20
 c005fd4:	9c000504 	addi	r16,r19,20
 c005fd8:	9825883a 	mov	r18,r19
 c005fdc:	05000044 	movi	r20,1
 c005fe0:	1027883a 	mov	r19,r2
 c005fe4:	003fa606 	br	c005e80 <__alt_data_end+0xfc005e80>

0c005fe8 <__ulp>:
 c005fe8:	295ffc2c 	andhi	r5,r5,32752
 c005fec:	00bf3034 	movhi	r2,64704
 c005ff0:	2887883a 	add	r3,r5,r2
 c005ff4:	00c0020e 	bge	zero,r3,c006000 <__ulp+0x18>
 c005ff8:	0005883a 	mov	r2,zero
 c005ffc:	f800283a 	ret
 c006000:	00c7c83a 	sub	r3,zero,r3
 c006004:	1807d53a 	srai	r3,r3,20
 c006008:	008004c4 	movi	r2,19
 c00600c:	10c00b0e 	bge	r2,r3,c00603c <__ulp+0x54>
 c006010:	18bffb04 	addi	r2,r3,-20
 c006014:	01000784 	movi	r4,30
 c006018:	0007883a 	mov	r3,zero
 c00601c:	20800516 	blt	r4,r2,c006034 <__ulp+0x4c>
 c006020:	010007c4 	movi	r4,31
 c006024:	2089c83a 	sub	r4,r4,r2
 c006028:	00800044 	movi	r2,1
 c00602c:	1104983a 	sll	r2,r2,r4
 c006030:	f800283a 	ret
 c006034:	00800044 	movi	r2,1
 c006038:	f800283a 	ret
 c00603c:	01400234 	movhi	r5,8
 c006040:	28c7d83a 	sra	r3,r5,r3
 c006044:	0005883a 	mov	r2,zero
 c006048:	f800283a 	ret

0c00604c <__b2d>:
 c00604c:	defffa04 	addi	sp,sp,-24
 c006050:	dc000015 	stw	r16,0(sp)
 c006054:	24000417 	ldw	r16,16(r4)
 c006058:	dc400115 	stw	r17,4(sp)
 c00605c:	24400504 	addi	r17,r4,20
 c006060:	8421883a 	add	r16,r16,r16
 c006064:	8421883a 	add	r16,r16,r16
 c006068:	8c21883a 	add	r16,r17,r16
 c00606c:	dc800215 	stw	r18,8(sp)
 c006070:	84bfff17 	ldw	r18,-4(r16)
 c006074:	dd000415 	stw	r20,16(sp)
 c006078:	dcc00315 	stw	r19,12(sp)
 c00607c:	9009883a 	mov	r4,r18
 c006080:	2829883a 	mov	r20,r5
 c006084:	dfc00515 	stw	ra,20(sp)
 c006088:	c0057240 	call	c005724 <__hi0bits>
 c00608c:	00c00804 	movi	r3,32
 c006090:	1889c83a 	sub	r4,r3,r2
 c006094:	a1000015 	stw	r4,0(r20)
 c006098:	01000284 	movi	r4,10
 c00609c:	84ffff04 	addi	r19,r16,-4
 c0060a0:	20801216 	blt	r4,r2,c0060ec <__b2d+0xa0>
 c0060a4:	018002c4 	movi	r6,11
 c0060a8:	308dc83a 	sub	r6,r6,r2
 c0060ac:	9186d83a 	srl	r3,r18,r6
 c0060b0:	18cffc34 	orhi	r3,r3,16368
 c0060b4:	8cc0212e 	bgeu	r17,r19,c00613c <__b2d+0xf0>
 c0060b8:	813ffe17 	ldw	r4,-8(r16)
 c0060bc:	218cd83a 	srl	r6,r4,r6
 c0060c0:	10800544 	addi	r2,r2,21
 c0060c4:	9084983a 	sll	r2,r18,r2
 c0060c8:	1184b03a 	or	r2,r2,r6
 c0060cc:	dfc00517 	ldw	ra,20(sp)
 c0060d0:	dd000417 	ldw	r20,16(sp)
 c0060d4:	dcc00317 	ldw	r19,12(sp)
 c0060d8:	dc800217 	ldw	r18,8(sp)
 c0060dc:	dc400117 	ldw	r17,4(sp)
 c0060e0:	dc000017 	ldw	r16,0(sp)
 c0060e4:	dec00604 	addi	sp,sp,24
 c0060e8:	f800283a 	ret
 c0060ec:	8cc00f2e 	bgeu	r17,r19,c00612c <__b2d+0xe0>
 c0060f0:	117ffd44 	addi	r5,r2,-11
 c0060f4:	80bffe17 	ldw	r2,-8(r16)
 c0060f8:	28000e26 	beq	r5,zero,c006134 <__b2d+0xe8>
 c0060fc:	1949c83a 	sub	r4,r3,r5
 c006100:	9164983a 	sll	r18,r18,r5
 c006104:	1106d83a 	srl	r3,r2,r4
 c006108:	81bffe04 	addi	r6,r16,-8
 c00610c:	948ffc34 	orhi	r18,r18,16368
 c006110:	90c6b03a 	or	r3,r18,r3
 c006114:	89800e2e 	bgeu	r17,r6,c006150 <__b2d+0x104>
 c006118:	81bffd17 	ldw	r6,-12(r16)
 c00611c:	1144983a 	sll	r2,r2,r5
 c006120:	310ad83a 	srl	r5,r6,r4
 c006124:	2884b03a 	or	r2,r5,r2
 c006128:	003fe806 	br	c0060cc <__alt_data_end+0xfc0060cc>
 c00612c:	10bffd44 	addi	r2,r2,-11
 c006130:	1000041e 	bne	r2,zero,c006144 <__b2d+0xf8>
 c006134:	90cffc34 	orhi	r3,r18,16368
 c006138:	003fe406 	br	c0060cc <__alt_data_end+0xfc0060cc>
 c00613c:	000d883a 	mov	r6,zero
 c006140:	003fdf06 	br	c0060c0 <__alt_data_end+0xfc0060c0>
 c006144:	90a4983a 	sll	r18,r18,r2
 c006148:	0005883a 	mov	r2,zero
 c00614c:	003ff906 	br	c006134 <__alt_data_end+0xfc006134>
 c006150:	1144983a 	sll	r2,r2,r5
 c006154:	003fdd06 	br	c0060cc <__alt_data_end+0xfc0060cc>

0c006158 <__d2b>:
 c006158:	defff804 	addi	sp,sp,-32
 c00615c:	dc000215 	stw	r16,8(sp)
 c006160:	3021883a 	mov	r16,r6
 c006164:	dc400315 	stw	r17,12(sp)
 c006168:	8022907a 	slli	r17,r16,1
 c00616c:	dd000615 	stw	r20,24(sp)
 c006170:	2829883a 	mov	r20,r5
 c006174:	01400044 	movi	r5,1
 c006178:	dcc00515 	stw	r19,20(sp)
 c00617c:	dc800415 	stw	r18,16(sp)
 c006180:	dfc00715 	stw	ra,28(sp)
 c006184:	3825883a 	mov	r18,r7
 c006188:	8822d57a 	srli	r17,r17,21
 c00618c:	c0054080 	call	c005408 <_Balloc>
 c006190:	1027883a 	mov	r19,r2
 c006194:	00800434 	movhi	r2,16
 c006198:	10bfffc4 	addi	r2,r2,-1
 c00619c:	808c703a 	and	r6,r16,r2
 c0061a0:	88000126 	beq	r17,zero,c0061a8 <__d2b+0x50>
 c0061a4:	31800434 	orhi	r6,r6,16
 c0061a8:	d9800015 	stw	r6,0(sp)
 c0061ac:	a0002426 	beq	r20,zero,c006240 <__d2b+0xe8>
 c0061b0:	d9000104 	addi	r4,sp,4
 c0061b4:	dd000115 	stw	r20,4(sp)
 c0061b8:	c00578c0 	call	c00578c <__lo0bits>
 c0061bc:	d8c00017 	ldw	r3,0(sp)
 c0061c0:	10002f1e 	bne	r2,zero,c006280 <__d2b+0x128>
 c0061c4:	d9000117 	ldw	r4,4(sp)
 c0061c8:	99000515 	stw	r4,20(r19)
 c0061cc:	1821003a 	cmpeq	r16,r3,zero
 c0061d0:	01000084 	movi	r4,2
 c0061d4:	2421c83a 	sub	r16,r4,r16
 c0061d8:	98c00615 	stw	r3,24(r19)
 c0061dc:	9c000415 	stw	r16,16(r19)
 c0061e0:	88001f1e 	bne	r17,zero,c006260 <__d2b+0x108>
 c0061e4:	10bef384 	addi	r2,r2,-1074
 c0061e8:	90800015 	stw	r2,0(r18)
 c0061ec:	00900034 	movhi	r2,16384
 c0061f0:	10bfffc4 	addi	r2,r2,-1
 c0061f4:	8085883a 	add	r2,r16,r2
 c0061f8:	1085883a 	add	r2,r2,r2
 c0061fc:	1085883a 	add	r2,r2,r2
 c006200:	9885883a 	add	r2,r19,r2
 c006204:	11000517 	ldw	r4,20(r2)
 c006208:	8020917a 	slli	r16,r16,5
 c00620c:	c0057240 	call	c005724 <__hi0bits>
 c006210:	d8c00817 	ldw	r3,32(sp)
 c006214:	8085c83a 	sub	r2,r16,r2
 c006218:	18800015 	stw	r2,0(r3)
 c00621c:	9805883a 	mov	r2,r19
 c006220:	dfc00717 	ldw	ra,28(sp)
 c006224:	dd000617 	ldw	r20,24(sp)
 c006228:	dcc00517 	ldw	r19,20(sp)
 c00622c:	dc800417 	ldw	r18,16(sp)
 c006230:	dc400317 	ldw	r17,12(sp)
 c006234:	dc000217 	ldw	r16,8(sp)
 c006238:	dec00804 	addi	sp,sp,32
 c00623c:	f800283a 	ret
 c006240:	d809883a 	mov	r4,sp
 c006244:	c00578c0 	call	c00578c <__lo0bits>
 c006248:	d8c00017 	ldw	r3,0(sp)
 c00624c:	04000044 	movi	r16,1
 c006250:	9c000415 	stw	r16,16(r19)
 c006254:	98c00515 	stw	r3,20(r19)
 c006258:	10800804 	addi	r2,r2,32
 c00625c:	883fe126 	beq	r17,zero,c0061e4 <__alt_data_end+0xfc0061e4>
 c006260:	00c00d44 	movi	r3,53
 c006264:	8c7ef344 	addi	r17,r17,-1075
 c006268:	88a3883a 	add	r17,r17,r2
 c00626c:	1885c83a 	sub	r2,r3,r2
 c006270:	d8c00817 	ldw	r3,32(sp)
 c006274:	94400015 	stw	r17,0(r18)
 c006278:	18800015 	stw	r2,0(r3)
 c00627c:	003fe706 	br	c00621c <__alt_data_end+0xfc00621c>
 c006280:	01000804 	movi	r4,32
 c006284:	2089c83a 	sub	r4,r4,r2
 c006288:	1908983a 	sll	r4,r3,r4
 c00628c:	d9400117 	ldw	r5,4(sp)
 c006290:	1886d83a 	srl	r3,r3,r2
 c006294:	2148b03a 	or	r4,r4,r5
 c006298:	99000515 	stw	r4,20(r19)
 c00629c:	d8c00015 	stw	r3,0(sp)
 c0062a0:	003fca06 	br	c0061cc <__alt_data_end+0xfc0061cc>

0c0062a4 <__ratio>:
 c0062a4:	defff904 	addi	sp,sp,-28
 c0062a8:	dc400315 	stw	r17,12(sp)
 c0062ac:	2823883a 	mov	r17,r5
 c0062b0:	d9400104 	addi	r5,sp,4
 c0062b4:	dfc00615 	stw	ra,24(sp)
 c0062b8:	dcc00515 	stw	r19,20(sp)
 c0062bc:	dc800415 	stw	r18,16(sp)
 c0062c0:	2027883a 	mov	r19,r4
 c0062c4:	dc000215 	stw	r16,8(sp)
 c0062c8:	c00604c0 	call	c00604c <__b2d>
 c0062cc:	d80b883a 	mov	r5,sp
 c0062d0:	8809883a 	mov	r4,r17
 c0062d4:	1025883a 	mov	r18,r2
 c0062d8:	1821883a 	mov	r16,r3
 c0062dc:	c00604c0 	call	c00604c <__b2d>
 c0062e0:	8a000417 	ldw	r8,16(r17)
 c0062e4:	99000417 	ldw	r4,16(r19)
 c0062e8:	d9400117 	ldw	r5,4(sp)
 c0062ec:	2209c83a 	sub	r4,r4,r8
 c0062f0:	2010917a 	slli	r8,r4,5
 c0062f4:	d9000017 	ldw	r4,0(sp)
 c0062f8:	2909c83a 	sub	r4,r5,r4
 c0062fc:	4109883a 	add	r4,r8,r4
 c006300:	01000e0e 	bge	zero,r4,c00633c <__ratio+0x98>
 c006304:	2008953a 	slli	r4,r4,20
 c006308:	2421883a 	add	r16,r4,r16
 c00630c:	100d883a 	mov	r6,r2
 c006310:	180f883a 	mov	r7,r3
 c006314:	9009883a 	mov	r4,r18
 c006318:	800b883a 	mov	r5,r16
 c00631c:	c009e440 	call	c009e44 <__divdf3>
 c006320:	dfc00617 	ldw	ra,24(sp)
 c006324:	dcc00517 	ldw	r19,20(sp)
 c006328:	dc800417 	ldw	r18,16(sp)
 c00632c:	dc400317 	ldw	r17,12(sp)
 c006330:	dc000217 	ldw	r16,8(sp)
 c006334:	dec00704 	addi	sp,sp,28
 c006338:	f800283a 	ret
 c00633c:	2008953a 	slli	r4,r4,20
 c006340:	1907c83a 	sub	r3,r3,r4
 c006344:	003ff106 	br	c00630c <__alt_data_end+0xfc00630c>

0c006348 <_mprec_log10>:
 c006348:	defffe04 	addi	sp,sp,-8
 c00634c:	dc000015 	stw	r16,0(sp)
 c006350:	dfc00115 	stw	ra,4(sp)
 c006354:	008005c4 	movi	r2,23
 c006358:	2021883a 	mov	r16,r4
 c00635c:	11000d0e 	bge	r2,r4,c006394 <_mprec_log10+0x4c>
 c006360:	0005883a 	mov	r2,zero
 c006364:	00cffc34 	movhi	r3,16368
 c006368:	843fffc4 	addi	r16,r16,-1
 c00636c:	000d883a 	mov	r6,zero
 c006370:	01d00934 	movhi	r7,16420
 c006374:	1009883a 	mov	r4,r2
 c006378:	180b883a 	mov	r5,r3
 c00637c:	c00aa6c0 	call	c00aa6c <__muldf3>
 c006380:	803ff91e 	bne	r16,zero,c006368 <__alt_data_end+0xfc006368>
 c006384:	dfc00117 	ldw	ra,4(sp)
 c006388:	dc000017 	ldw	r16,0(sp)
 c00638c:	dec00204 	addi	sp,sp,8
 c006390:	f800283a 	ret
 c006394:	202090fa 	slli	r16,r4,3
 c006398:	00830074 	movhi	r2,3073
 c00639c:	10b8cb04 	addi	r2,r2,-7380
 c0063a0:	1421883a 	add	r16,r2,r16
 c0063a4:	80800017 	ldw	r2,0(r16)
 c0063a8:	80c00117 	ldw	r3,4(r16)
 c0063ac:	dfc00117 	ldw	ra,4(sp)
 c0063b0:	dc000017 	ldw	r16,0(sp)
 c0063b4:	dec00204 	addi	sp,sp,8
 c0063b8:	f800283a 	ret

0c0063bc <__copybits>:
 c0063bc:	297fffc4 	addi	r5,r5,-1
 c0063c0:	280fd17a 	srai	r7,r5,5
 c0063c4:	30c00417 	ldw	r3,16(r6)
 c0063c8:	30800504 	addi	r2,r6,20
 c0063cc:	39c00044 	addi	r7,r7,1
 c0063d0:	18c7883a 	add	r3,r3,r3
 c0063d4:	39cf883a 	add	r7,r7,r7
 c0063d8:	18c7883a 	add	r3,r3,r3
 c0063dc:	39cf883a 	add	r7,r7,r7
 c0063e0:	10c7883a 	add	r3,r2,r3
 c0063e4:	21cf883a 	add	r7,r4,r7
 c0063e8:	10c00d2e 	bgeu	r2,r3,c006420 <__copybits+0x64>
 c0063ec:	200b883a 	mov	r5,r4
 c0063f0:	12000017 	ldw	r8,0(r2)
 c0063f4:	29400104 	addi	r5,r5,4
 c0063f8:	10800104 	addi	r2,r2,4
 c0063fc:	2a3fff15 	stw	r8,-4(r5)
 c006400:	10fffb36 	bltu	r2,r3,c0063f0 <__alt_data_end+0xfc0063f0>
 c006404:	1985c83a 	sub	r2,r3,r6
 c006408:	10bffac4 	addi	r2,r2,-21
 c00640c:	1004d0ba 	srli	r2,r2,2
 c006410:	10800044 	addi	r2,r2,1
 c006414:	1085883a 	add	r2,r2,r2
 c006418:	1085883a 	add	r2,r2,r2
 c00641c:	2089883a 	add	r4,r4,r2
 c006420:	21c0032e 	bgeu	r4,r7,c006430 <__copybits+0x74>
 c006424:	20000015 	stw	zero,0(r4)
 c006428:	21000104 	addi	r4,r4,4
 c00642c:	21fffd36 	bltu	r4,r7,c006424 <__alt_data_end+0xfc006424>
 c006430:	f800283a 	ret

0c006434 <__any_on>:
 c006434:	20c00417 	ldw	r3,16(r4)
 c006438:	2805d17a 	srai	r2,r5,5
 c00643c:	21000504 	addi	r4,r4,20
 c006440:	18800d0e 	bge	r3,r2,c006478 <__any_on+0x44>
 c006444:	18c7883a 	add	r3,r3,r3
 c006448:	18c7883a 	add	r3,r3,r3
 c00644c:	20c7883a 	add	r3,r4,r3
 c006450:	20c0192e 	bgeu	r4,r3,c0064b8 <__any_on+0x84>
 c006454:	18bfff17 	ldw	r2,-4(r3)
 c006458:	18ffff04 	addi	r3,r3,-4
 c00645c:	1000041e 	bne	r2,zero,c006470 <__any_on+0x3c>
 c006460:	20c0142e 	bgeu	r4,r3,c0064b4 <__any_on+0x80>
 c006464:	18ffff04 	addi	r3,r3,-4
 c006468:	19400017 	ldw	r5,0(r3)
 c00646c:	283ffc26 	beq	r5,zero,c006460 <__alt_data_end+0xfc006460>
 c006470:	00800044 	movi	r2,1
 c006474:	f800283a 	ret
 c006478:	10c00a0e 	bge	r2,r3,c0064a4 <__any_on+0x70>
 c00647c:	1085883a 	add	r2,r2,r2
 c006480:	1085883a 	add	r2,r2,r2
 c006484:	294007cc 	andi	r5,r5,31
 c006488:	2087883a 	add	r3,r4,r2
 c00648c:	283ff026 	beq	r5,zero,c006450 <__alt_data_end+0xfc006450>
 c006490:	19800017 	ldw	r6,0(r3)
 c006494:	3144d83a 	srl	r2,r6,r5
 c006498:	114a983a 	sll	r5,r2,r5
 c00649c:	317ff41e 	bne	r6,r5,c006470 <__alt_data_end+0xfc006470>
 c0064a0:	003feb06 	br	c006450 <__alt_data_end+0xfc006450>
 c0064a4:	1085883a 	add	r2,r2,r2
 c0064a8:	1085883a 	add	r2,r2,r2
 c0064ac:	2087883a 	add	r3,r4,r2
 c0064b0:	003fe706 	br	c006450 <__alt_data_end+0xfc006450>
 c0064b4:	f800283a 	ret
 c0064b8:	0005883a 	mov	r2,zero
 c0064bc:	f800283a 	ret

0c0064c0 <__fpclassifyd>:
 c0064c0:	00a00034 	movhi	r2,32768
 c0064c4:	10bfffc4 	addi	r2,r2,-1
 c0064c8:	2884703a 	and	r2,r5,r2
 c0064cc:	10000726 	beq	r2,zero,c0064ec <__fpclassifyd+0x2c>
 c0064d0:	00fffc34 	movhi	r3,65520
 c0064d4:	019ff834 	movhi	r6,32736
 c0064d8:	28c7883a 	add	r3,r5,r3
 c0064dc:	31bfffc4 	addi	r6,r6,-1
 c0064e0:	30c00536 	bltu	r6,r3,c0064f8 <__fpclassifyd+0x38>
 c0064e4:	00800104 	movi	r2,4
 c0064e8:	f800283a 	ret
 c0064ec:	2000021e 	bne	r4,zero,c0064f8 <__fpclassifyd+0x38>
 c0064f0:	00800084 	movi	r2,2
 c0064f4:	f800283a 	ret
 c0064f8:	00dffc34 	movhi	r3,32752
 c0064fc:	019ff834 	movhi	r6,32736
 c006500:	28cb883a 	add	r5,r5,r3
 c006504:	31bfffc4 	addi	r6,r6,-1
 c006508:	317ff62e 	bgeu	r6,r5,c0064e4 <__alt_data_end+0xfc0064e4>
 c00650c:	01400434 	movhi	r5,16
 c006510:	297fffc4 	addi	r5,r5,-1
 c006514:	28800236 	bltu	r5,r2,c006520 <__fpclassifyd+0x60>
 c006518:	008000c4 	movi	r2,3
 c00651c:	f800283a 	ret
 c006520:	10c00226 	beq	r2,r3,c00652c <__fpclassifyd+0x6c>
 c006524:	0005883a 	mov	r2,zero
 c006528:	f800283a 	ret
 c00652c:	2005003a 	cmpeq	r2,r4,zero
 c006530:	f800283a 	ret

0c006534 <_sbrk_r>:
 c006534:	defffd04 	addi	sp,sp,-12
 c006538:	dc000015 	stw	r16,0(sp)
 c00653c:	04030074 	movhi	r16,3073
 c006540:	dc400115 	stw	r17,4(sp)
 c006544:	84084004 	addi	r16,r16,8448
 c006548:	2023883a 	mov	r17,r4
 c00654c:	2809883a 	mov	r4,r5
 c006550:	dfc00215 	stw	ra,8(sp)
 c006554:	80000015 	stw	zero,0(r16)
 c006558:	c00bfec0 	call	c00bfec <sbrk>
 c00655c:	00ffffc4 	movi	r3,-1
 c006560:	10c00526 	beq	r2,r3,c006578 <_sbrk_r+0x44>
 c006564:	dfc00217 	ldw	ra,8(sp)
 c006568:	dc400117 	ldw	r17,4(sp)
 c00656c:	dc000017 	ldw	r16,0(sp)
 c006570:	dec00304 	addi	sp,sp,12
 c006574:	f800283a 	ret
 c006578:	80c00017 	ldw	r3,0(r16)
 c00657c:	183ff926 	beq	r3,zero,c006564 <__alt_data_end+0xfc006564>
 c006580:	88c00015 	stw	r3,0(r17)
 c006584:	003ff706 	br	c006564 <__alt_data_end+0xfc006564>

0c006588 <strcmp>:
 c006588:	2144b03a 	or	r2,r4,r5
 c00658c:	108000cc 	andi	r2,r2,3
 c006590:	1000171e 	bne	r2,zero,c0065f0 <strcmp+0x68>
 c006594:	20800017 	ldw	r2,0(r4)
 c006598:	28c00017 	ldw	r3,0(r5)
 c00659c:	10c0141e 	bne	r2,r3,c0065f0 <strcmp+0x68>
 c0065a0:	027fbff4 	movhi	r9,65279
 c0065a4:	4a7fbfc4 	addi	r9,r9,-257
 c0065a8:	0086303a 	nor	r3,zero,r2
 c0065ac:	02202074 	movhi	r8,32897
 c0065b0:	1245883a 	add	r2,r2,r9
 c0065b4:	42202004 	addi	r8,r8,-32640
 c0065b8:	10c4703a 	and	r2,r2,r3
 c0065bc:	1204703a 	and	r2,r2,r8
 c0065c0:	10000226 	beq	r2,zero,c0065cc <strcmp+0x44>
 c0065c4:	00002306 	br	c006654 <strcmp+0xcc>
 c0065c8:	1000221e 	bne	r2,zero,c006654 <strcmp+0xcc>
 c0065cc:	21000104 	addi	r4,r4,4
 c0065d0:	20c00017 	ldw	r3,0(r4)
 c0065d4:	29400104 	addi	r5,r5,4
 c0065d8:	29800017 	ldw	r6,0(r5)
 c0065dc:	1a4f883a 	add	r7,r3,r9
 c0065e0:	00c4303a 	nor	r2,zero,r3
 c0065e4:	3884703a 	and	r2,r7,r2
 c0065e8:	1204703a 	and	r2,r2,r8
 c0065ec:	19bff626 	beq	r3,r6,c0065c8 <__alt_data_end+0xfc0065c8>
 c0065f0:	20800003 	ldbu	r2,0(r4)
 c0065f4:	10c03fcc 	andi	r3,r2,255
 c0065f8:	18c0201c 	xori	r3,r3,128
 c0065fc:	18ffe004 	addi	r3,r3,-128
 c006600:	18000c26 	beq	r3,zero,c006634 <strcmp+0xac>
 c006604:	29800007 	ldb	r6,0(r5)
 c006608:	19800326 	beq	r3,r6,c006618 <strcmp+0x90>
 c00660c:	00001306 	br	c00665c <strcmp+0xd4>
 c006610:	29800007 	ldb	r6,0(r5)
 c006614:	11800b1e 	bne	r2,r6,c006644 <strcmp+0xbc>
 c006618:	21000044 	addi	r4,r4,1
 c00661c:	20c00003 	ldbu	r3,0(r4)
 c006620:	29400044 	addi	r5,r5,1
 c006624:	18803fcc 	andi	r2,r3,255
 c006628:	1080201c 	xori	r2,r2,128
 c00662c:	10bfe004 	addi	r2,r2,-128
 c006630:	103ff71e 	bne	r2,zero,c006610 <__alt_data_end+0xfc006610>
 c006634:	0007883a 	mov	r3,zero
 c006638:	28800003 	ldbu	r2,0(r5)
 c00663c:	1885c83a 	sub	r2,r3,r2
 c006640:	f800283a 	ret
 c006644:	28800003 	ldbu	r2,0(r5)
 c006648:	18c03fcc 	andi	r3,r3,255
 c00664c:	1885c83a 	sub	r2,r3,r2
 c006650:	f800283a 	ret
 c006654:	0005883a 	mov	r2,zero
 c006658:	f800283a 	ret
 c00665c:	10c03fcc 	andi	r3,r2,255
 c006660:	003ff506 	br	c006638 <__alt_data_end+0xfc006638>

0c006664 <__ssprint_r>:
 c006664:	30800217 	ldw	r2,8(r6)
 c006668:	defff604 	addi	sp,sp,-40
 c00666c:	dc800215 	stw	r18,8(sp)
 c006670:	dfc00915 	stw	ra,36(sp)
 c006674:	df000815 	stw	fp,32(sp)
 c006678:	ddc00715 	stw	r23,28(sp)
 c00667c:	dd800615 	stw	r22,24(sp)
 c006680:	dd400515 	stw	r21,20(sp)
 c006684:	dd000415 	stw	r20,16(sp)
 c006688:	dcc00315 	stw	r19,12(sp)
 c00668c:	dc400115 	stw	r17,4(sp)
 c006690:	dc000015 	stw	r16,0(sp)
 c006694:	3025883a 	mov	r18,r6
 c006698:	10005826 	beq	r2,zero,c0067fc <__ssprint_r+0x198>
 c00669c:	2027883a 	mov	r19,r4
 c0066a0:	35c00017 	ldw	r23,0(r6)
 c0066a4:	29000017 	ldw	r4,0(r5)
 c0066a8:	28800217 	ldw	r2,8(r5)
 c0066ac:	2823883a 	mov	r17,r5
 c0066b0:	0039883a 	mov	fp,zero
 c0066b4:	0021883a 	mov	r16,zero
 c0066b8:	80003926 	beq	r16,zero,c0067a0 <__ssprint_r+0x13c>
 c0066bc:	102b883a 	mov	r21,r2
 c0066c0:	102d883a 	mov	r22,r2
 c0066c4:	80803a36 	bltu	r16,r2,c0067b0 <__ssprint_r+0x14c>
 c0066c8:	88c0030b 	ldhu	r3,12(r17)
 c0066cc:	1881200c 	andi	r2,r3,1152
 c0066d0:	10002626 	beq	r2,zero,c00676c <__ssprint_r+0x108>
 c0066d4:	88800517 	ldw	r2,20(r17)
 c0066d8:	89400417 	ldw	r5,16(r17)
 c0066dc:	81800044 	addi	r6,r16,1
 c0066e0:	108f883a 	add	r7,r2,r2
 c0066e4:	3885883a 	add	r2,r7,r2
 c0066e8:	100ed7fa 	srli	r7,r2,31
 c0066ec:	216dc83a 	sub	r22,r4,r5
 c0066f0:	3589883a 	add	r4,r6,r22
 c0066f4:	3885883a 	add	r2,r7,r2
 c0066f8:	102bd07a 	srai	r21,r2,1
 c0066fc:	a80d883a 	mov	r6,r21
 c006700:	a900022e 	bgeu	r21,r4,c00670c <__ssprint_r+0xa8>
 c006704:	202b883a 	mov	r21,r4
 c006708:	200d883a 	mov	r6,r4
 c00670c:	18c1000c 	andi	r3,r3,1024
 c006710:	18002a26 	beq	r3,zero,c0067bc <__ssprint_r+0x158>
 c006714:	300b883a 	mov	r5,r6
 c006718:	9809883a 	mov	r4,r19
 c00671c:	c0049d00 	call	c0049d0 <_malloc_r>
 c006720:	1029883a 	mov	r20,r2
 c006724:	10002c26 	beq	r2,zero,c0067d8 <__ssprint_r+0x174>
 c006728:	89400417 	ldw	r5,16(r17)
 c00672c:	b00d883a 	mov	r6,r22
 c006730:	1009883a 	mov	r4,r2
 c006734:	c0052c00 	call	c0052c0 <memcpy>
 c006738:	8880030b 	ldhu	r2,12(r17)
 c00673c:	00fedfc4 	movi	r3,-1153
 c006740:	10c4703a 	and	r2,r2,r3
 c006744:	10802014 	ori	r2,r2,128
 c006748:	8880030d 	sth	r2,12(r17)
 c00674c:	a589883a 	add	r4,r20,r22
 c006750:	adadc83a 	sub	r22,r21,r22
 c006754:	8d400515 	stw	r21,20(r17)
 c006758:	8d800215 	stw	r22,8(r17)
 c00675c:	8d000415 	stw	r20,16(r17)
 c006760:	89000015 	stw	r4,0(r17)
 c006764:	802b883a 	mov	r21,r16
 c006768:	802d883a 	mov	r22,r16
 c00676c:	b00d883a 	mov	r6,r22
 c006770:	e00b883a 	mov	r5,fp
 c006774:	c0080e40 	call	c0080e4 <memmove>
 c006778:	88800217 	ldw	r2,8(r17)
 c00677c:	89000017 	ldw	r4,0(r17)
 c006780:	90c00217 	ldw	r3,8(r18)
 c006784:	1545c83a 	sub	r2,r2,r21
 c006788:	2589883a 	add	r4,r4,r22
 c00678c:	88800215 	stw	r2,8(r17)
 c006790:	89000015 	stw	r4,0(r17)
 c006794:	1c21c83a 	sub	r16,r3,r16
 c006798:	94000215 	stw	r16,8(r18)
 c00679c:	80001726 	beq	r16,zero,c0067fc <__ssprint_r+0x198>
 c0067a0:	bf000017 	ldw	fp,0(r23)
 c0067a4:	bc000117 	ldw	r16,4(r23)
 c0067a8:	bdc00204 	addi	r23,r23,8
 c0067ac:	003fc206 	br	c0066b8 <__alt_data_end+0xfc0066b8>
 c0067b0:	802b883a 	mov	r21,r16
 c0067b4:	802d883a 	mov	r22,r16
 c0067b8:	003fec06 	br	c00676c <__alt_data_end+0xfc00676c>
 c0067bc:	9809883a 	mov	r4,r19
 c0067c0:	c0083680 	call	c008368 <_realloc_r>
 c0067c4:	1029883a 	mov	r20,r2
 c0067c8:	103fe01e 	bne	r2,zero,c00674c <__alt_data_end+0xfc00674c>
 c0067cc:	89400417 	ldw	r5,16(r17)
 c0067d0:	9809883a 	mov	r4,r19
 c0067d4:	c007dd40 	call	c007dd4 <_free_r>
 c0067d8:	88c0030b 	ldhu	r3,12(r17)
 c0067dc:	00800304 	movi	r2,12
 c0067e0:	98800015 	stw	r2,0(r19)
 c0067e4:	18c01014 	ori	r3,r3,64
 c0067e8:	88c0030d 	sth	r3,12(r17)
 c0067ec:	00bfffc4 	movi	r2,-1
 c0067f0:	90000215 	stw	zero,8(r18)
 c0067f4:	90000115 	stw	zero,4(r18)
 c0067f8:	00000206 	br	c006804 <__ssprint_r+0x1a0>
 c0067fc:	90000115 	stw	zero,4(r18)
 c006800:	0005883a 	mov	r2,zero
 c006804:	dfc00917 	ldw	ra,36(sp)
 c006808:	df000817 	ldw	fp,32(sp)
 c00680c:	ddc00717 	ldw	r23,28(sp)
 c006810:	dd800617 	ldw	r22,24(sp)
 c006814:	dd400517 	ldw	r21,20(sp)
 c006818:	dd000417 	ldw	r20,16(sp)
 c00681c:	dcc00317 	ldw	r19,12(sp)
 c006820:	dc800217 	ldw	r18,8(sp)
 c006824:	dc400117 	ldw	r17,4(sp)
 c006828:	dc000017 	ldw	r16,0(sp)
 c00682c:	dec00a04 	addi	sp,sp,40
 c006830:	f800283a 	ret

0c006834 <___svfiprintf_internal_r>:
 c006834:	2880030b 	ldhu	r2,12(r5)
 c006838:	deffc804 	addi	sp,sp,-224
 c00683c:	dcc03115 	stw	r19,196(sp)
 c006840:	dfc03715 	stw	ra,220(sp)
 c006844:	df003615 	stw	fp,216(sp)
 c006848:	ddc03515 	stw	r23,212(sp)
 c00684c:	dd803415 	stw	r22,208(sp)
 c006850:	dd403315 	stw	r21,204(sp)
 c006854:	dd003215 	stw	r20,200(sp)
 c006858:	dc803015 	stw	r18,192(sp)
 c00685c:	dc402f15 	stw	r17,188(sp)
 c006860:	dc002e15 	stw	r16,184(sp)
 c006864:	d9402315 	stw	r5,140(sp)
 c006868:	d9002715 	stw	r4,156(sp)
 c00686c:	1080200c 	andi	r2,r2,128
 c006870:	d9c02415 	stw	r7,144(sp)
 c006874:	3027883a 	mov	r19,r6
 c006878:	10000226 	beq	r2,zero,c006884 <___svfiprintf_internal_r+0x50>
 c00687c:	28800417 	ldw	r2,16(r5)
 c006880:	10046d26 	beq	r2,zero,c007a38 <___svfiprintf_internal_r+0x1204>
 c006884:	d8801a04 	addi	r2,sp,104
 c006888:	d8c019c4 	addi	r3,sp,103
 c00688c:	05830074 	movhi	r22,3073
 c006890:	10c9c83a 	sub	r4,r2,r3
 c006894:	b5b8fd04 	addi	r22,r22,-7180
 c006898:	d8801e15 	stw	r2,120(sp)
 c00689c:	d8c01f15 	stw	r3,124(sp)
 c0068a0:	dec01a15 	stw	sp,104(sp)
 c0068a4:	d8001c15 	stw	zero,112(sp)
 c0068a8:	d8001b15 	stw	zero,108(sp)
 c0068ac:	d811883a 	mov	r8,sp
 c0068b0:	d8002915 	stw	zero,164(sp)
 c0068b4:	d8002615 	stw	zero,152(sp)
 c0068b8:	d9002c15 	stw	r4,176(sp)
 c0068bc:	98800007 	ldb	r2,0(r19)
 c0068c0:	10031426 	beq	r2,zero,c007514 <___svfiprintf_internal_r+0xce0>
 c0068c4:	00c00944 	movi	r3,37
 c0068c8:	9825883a 	mov	r18,r19
 c0068cc:	10c0021e 	bne	r2,r3,c0068d8 <___svfiprintf_internal_r+0xa4>
 c0068d0:	00001406 	br	c006924 <___svfiprintf_internal_r+0xf0>
 c0068d4:	10c00326 	beq	r2,r3,c0068e4 <___svfiprintf_internal_r+0xb0>
 c0068d8:	94800044 	addi	r18,r18,1
 c0068dc:	90800007 	ldb	r2,0(r18)
 c0068e0:	103ffc1e 	bne	r2,zero,c0068d4 <__alt_data_end+0xfc0068d4>
 c0068e4:	94e1c83a 	sub	r16,r18,r19
 c0068e8:	80000e26 	beq	r16,zero,c006924 <___svfiprintf_internal_r+0xf0>
 c0068ec:	d8c01c17 	ldw	r3,112(sp)
 c0068f0:	d8801b17 	ldw	r2,108(sp)
 c0068f4:	44c00015 	stw	r19,0(r8)
 c0068f8:	1c07883a 	add	r3,r3,r16
 c0068fc:	10800044 	addi	r2,r2,1
 c006900:	d8c01c15 	stw	r3,112(sp)
 c006904:	44000115 	stw	r16,4(r8)
 c006908:	d8801b15 	stw	r2,108(sp)
 c00690c:	00c001c4 	movi	r3,7
 c006910:	18835c16 	blt	r3,r2,c007684 <___svfiprintf_internal_r+0xe50>
 c006914:	42000204 	addi	r8,r8,8
 c006918:	d9402617 	ldw	r5,152(sp)
 c00691c:	2c0b883a 	add	r5,r5,r16
 c006920:	d9402615 	stw	r5,152(sp)
 c006924:	90800007 	ldb	r2,0(r18)
 c006928:	1002fc26 	beq	r2,zero,c00751c <___svfiprintf_internal_r+0xce8>
 c00692c:	0023883a 	mov	r17,zero
 c006930:	00bfffc4 	movi	r2,-1
 c006934:	0021883a 	mov	r16,zero
 c006938:	94c00044 	addi	r19,r18,1
 c00693c:	90c00047 	ldb	r3,1(r18)
 c006940:	dc402105 	stb	r17,132(sp)
 c006944:	d8001d85 	stb	zero,118(sp)
 c006948:	002b883a 	mov	r21,zero
 c00694c:	d8802015 	stw	r2,128(sp)
 c006950:	d8002515 	stw	zero,148(sp)
 c006954:	04801604 	movi	r18,88
 c006958:	05000244 	movi	r20,9
 c00695c:	402f883a 	mov	r23,r8
 c006960:	8023883a 	mov	r17,r16
 c006964:	9cc00044 	addi	r19,r19,1
 c006968:	18bff804 	addi	r2,r3,-32
 c00696c:	9081fb36 	bltu	r18,r2,c00715c <___svfiprintf_internal_r+0x928>
 c006970:	100490ba 	slli	r2,r2,2
 c006974:	01030034 	movhi	r4,3072
 c006978:	211a6204 	addi	r4,r4,27016
 c00697c:	1105883a 	add	r2,r2,r4
 c006980:	10800017 	ldw	r2,0(r2)
 c006984:	1000683a 	jmp	r2
 c006988:	0c006b88 	cmpgei	r16,at,430
 c00698c:	0c00715c 	xori	r16,at,453
 c006990:	0c00715c 	xori	r16,at,453
 c006994:	0c006b7c 	xorhi	r16,at,429
 c006998:	0c00715c 	xori	r16,at,453
 c00699c:	0c00715c 	xori	r16,at,453
 c0069a0:	0c00715c 	xori	r16,at,453
 c0069a4:	0c00715c 	xori	r16,at,453
 c0069a8:	0c00715c 	xori	r16,at,453
 c0069ac:	0c00715c 	xori	r16,at,453
 c0069b0:	0c006aec 	andhi	r16,at,427
 c0069b4:	0c006ce8 	cmpgeui	r16,at,435
 c0069b8:	0c00715c 	xori	r16,at,453
 c0069bc:	0c006b14 	ori	r16,at,428
 c0069c0:	0c007198 	cmpnei	r16,at,454
 c0069c4:	0c00715c 	xori	r16,at,453
 c0069c8:	0c00718c 	andi	r16,at,454
 c0069cc:	0c007120 	cmpeqi	r16,at,452
 c0069d0:	0c007120 	cmpeqi	r16,at,452
 c0069d4:	0c007120 	cmpeqi	r16,at,452
 c0069d8:	0c007120 	cmpeqi	r16,at,452
 c0069dc:	0c007120 	cmpeqi	r16,at,452
 c0069e0:	0c007120 	cmpeqi	r16,at,452
 c0069e4:	0c007120 	cmpeqi	r16,at,452
 c0069e8:	0c007120 	cmpeqi	r16,at,452
 c0069ec:	0c007120 	cmpeqi	r16,at,452
 c0069f0:	0c00715c 	xori	r16,at,453
 c0069f4:	0c00715c 	xori	r16,at,453
 c0069f8:	0c00715c 	xori	r16,at,453
 c0069fc:	0c00715c 	xori	r16,at,453
 c006a00:	0c00715c 	xori	r16,at,453
 c006a04:	0c00715c 	xori	r16,at,453
 c006a08:	0c00715c 	xori	r16,at,453
 c006a0c:	0c00715c 	xori	r16,at,453
 c006a10:	0c00715c 	xori	r16,at,453
 c006a14:	0c00715c 	xori	r16,at,453
 c006a18:	0c0070a4 	muli	r16,at,450
 c006a1c:	0c00715c 	xori	r16,at,453
 c006a20:	0c00715c 	xori	r16,at,453
 c006a24:	0c00715c 	xori	r16,at,453
 c006a28:	0c00715c 	xori	r16,at,453
 c006a2c:	0c00715c 	xori	r16,at,453
 c006a30:	0c00715c 	xori	r16,at,453
 c006a34:	0c00715c 	xori	r16,at,453
 c006a38:	0c00715c 	xori	r16,at,453
 c006a3c:	0c00715c 	xori	r16,at,453
 c006a40:	0c00715c 	xori	r16,at,453
 c006a44:	0c007254 	ori	r16,at,457
 c006a48:	0c00715c 	xori	r16,at,453
 c006a4c:	0c00715c 	xori	r16,at,453
 c006a50:	0c00715c 	xori	r16,at,453
 c006a54:	0c00715c 	xori	r16,at,453
 c006a58:	0c00715c 	xori	r16,at,453
 c006a5c:	0c0071e0 	cmpeqi	r16,at,455
 c006a60:	0c00715c 	xori	r16,at,453
 c006a64:	0c00715c 	xori	r16,at,453
 c006a68:	0c006ee0 	cmpeqi	r16,at,443
 c006a6c:	0c00715c 	xori	r16,at,453
 c006a70:	0c00715c 	xori	r16,at,453
 c006a74:	0c00715c 	xori	r16,at,453
 c006a78:	0c00715c 	xori	r16,at,453
 c006a7c:	0c00715c 	xori	r16,at,453
 c006a80:	0c00715c 	xori	r16,at,453
 c006a84:	0c00715c 	xori	r16,at,453
 c006a88:	0c00715c 	xori	r16,at,453
 c006a8c:	0c00715c 	xori	r16,at,453
 c006a90:	0c00715c 	xori	r16,at,453
 c006a94:	0c006dac 	andhi	r16,at,438
 c006a98:	0c006f90 	cmplti	r16,at,446
 c006a9c:	0c00715c 	xori	r16,at,453
 c006aa0:	0c00715c 	xori	r16,at,453
 c006aa4:	0c00715c 	xori	r16,at,453
 c006aa8:	0c006f84 	addi	r16,at,446
 c006aac:	0c006f90 	cmplti	r16,at,446
 c006ab0:	0c00715c 	xori	r16,at,453
 c006ab4:	0c00715c 	xori	r16,at,453
 c006ab8:	0c006f70 	cmpltui	r16,at,445
 c006abc:	0c00715c 	xori	r16,at,453
 c006ac0:	0c006f30 	cmpltui	r16,at,444
 c006ac4:	0c006cfc 	xorhi	r16,at,435
 c006ac8:	0c006b20 	cmpeqi	r16,at,428
 c006acc:	0c007098 	cmpnei	r16,at,450
 c006ad0:	0c00715c 	xori	r16,at,453
 c006ad4:	0c007044 	addi	r16,at,449
 c006ad8:	0c00715c 	xori	r16,at,453
 c006adc:	0c006c60 	cmpeqi	r16,at,433
 c006ae0:	0c00715c 	xori	r16,at,453
 c006ae4:	0c00715c 	xori	r16,at,453
 c006ae8:	0c006bac 	andhi	r16,at,430
 c006aec:	d9002417 	ldw	r4,144(sp)
 c006af0:	d9402417 	ldw	r5,144(sp)
 c006af4:	21000017 	ldw	r4,0(r4)
 c006af8:	28800104 	addi	r2,r5,4
 c006afc:	d9002515 	stw	r4,148(sp)
 c006b00:	20032b0e 	bge	r4,zero,c0077b0 <___svfiprintf_internal_r+0xf7c>
 c006b04:	d8c02517 	ldw	r3,148(sp)
 c006b08:	d8802415 	stw	r2,144(sp)
 c006b0c:	00c7c83a 	sub	r3,zero,r3
 c006b10:	d8c02515 	stw	r3,148(sp)
 c006b14:	8c400114 	ori	r17,r17,4
 c006b18:	98c00007 	ldb	r3,0(r19)
 c006b1c:	003f9106 	br	c006964 <__alt_data_end+0xfc006964>
 c006b20:	00800c04 	movi	r2,48
 c006b24:	d9402417 	ldw	r5,144(sp)
 c006b28:	d9002017 	ldw	r4,128(sp)
 c006b2c:	d8801d05 	stb	r2,116(sp)
 c006b30:	00801e04 	movi	r2,120
 c006b34:	d8801d45 	stb	r2,117(sp)
 c006b38:	d8001d85 	stb	zero,118(sp)
 c006b3c:	b811883a 	mov	r8,r23
 c006b40:	28c00104 	addi	r3,r5,4
 c006b44:	2c800017 	ldw	r18,0(r5)
 c006b48:	0029883a 	mov	r20,zero
 c006b4c:	88800094 	ori	r2,r17,2
 c006b50:	20036316 	blt	r4,zero,c0078e0 <___svfiprintf_internal_r+0x10ac>
 c006b54:	00bfdfc4 	movi	r2,-129
 c006b58:	88a0703a 	and	r16,r17,r2
 c006b5c:	d8c02415 	stw	r3,144(sp)
 c006b60:	84000094 	ori	r16,r16,2
 c006b64:	90031c26 	beq	r18,zero,c0077d8 <___svfiprintf_internal_r+0xfa4>
 c006b68:	01430074 	movhi	r5,3073
 c006b6c:	29789c04 	addi	r5,r5,-7568
 c006b70:	002b883a 	mov	r21,zero
 c006b74:	d9402915 	stw	r5,164(sp)
 c006b78:	00002906 	br	c006c20 <___svfiprintf_internal_r+0x3ec>
 c006b7c:	8c400054 	ori	r17,r17,1
 c006b80:	98c00007 	ldb	r3,0(r19)
 c006b84:	003f7706 	br	c006964 <__alt_data_end+0xfc006964>
 c006b88:	a8803fcc 	andi	r2,r21,255
 c006b8c:	1080201c 	xori	r2,r2,128
 c006b90:	10bfe004 	addi	r2,r2,-128
 c006b94:	10032a1e 	bne	r2,zero,c007840 <___svfiprintf_internal_r+0x100c>
 c006b98:	00c00044 	movi	r3,1
 c006b9c:	d8c02105 	stb	r3,132(sp)
 c006ba0:	05400804 	movi	r21,32
 c006ba4:	98c00007 	ldb	r3,0(r19)
 c006ba8:	003f6e06 	br	c006964 <__alt_data_end+0xfc006964>
 c006bac:	8821883a 	mov	r16,r17
 c006bb0:	dc402103 	ldbu	r17,132(sp)
 c006bb4:	b811883a 	mov	r8,r23
 c006bb8:	8c403fcc 	andi	r17,r17,255
 c006bbc:	8803f01e 	bne	r17,zero,c007b80 <___svfiprintf_internal_r+0x134c>
 c006bc0:	00830074 	movhi	r2,3073
 c006bc4:	10b89c04 	addi	r2,r2,-7568
 c006bc8:	d8802915 	stw	r2,164(sp)
 c006bcc:	8080080c 	andi	r2,r16,32
 c006bd0:	1000cd26 	beq	r2,zero,c006f08 <___svfiprintf_internal_r+0x6d4>
 c006bd4:	d9002417 	ldw	r4,144(sp)
 c006bd8:	24800017 	ldw	r18,0(r4)
 c006bdc:	25000117 	ldw	r20,4(r4)
 c006be0:	21000204 	addi	r4,r4,8
 c006be4:	d9002415 	stw	r4,144(sp)
 c006be8:	8080004c 	andi	r2,r16,1
 c006bec:	1002c726 	beq	r2,zero,c00770c <___svfiprintf_internal_r+0xed8>
 c006bf0:	9504b03a 	or	r2,r18,r20
 c006bf4:	1003061e 	bne	r2,zero,c007810 <___svfiprintf_internal_r+0xfdc>
 c006bf8:	d9002017 	ldw	r4,128(sp)
 c006bfc:	d8001d85 	stb	zero,118(sp)
 c006c00:	20033e16 	blt	r4,zero,c0078fc <___svfiprintf_internal_r+0x10c8>
 c006c04:	00bfdfc4 	movi	r2,-129
 c006c08:	80a0703a 	and	r16,r16,r2
 c006c0c:	d9402017 	ldw	r5,128(sp)
 c006c10:	002b883a 	mov	r21,zero
 c006c14:	28002826 	beq	r5,zero,c006cb8 <___svfiprintf_internal_r+0x484>
 c006c18:	0025883a 	mov	r18,zero
 c006c1c:	0029883a 	mov	r20,zero
 c006c20:	d9002917 	ldw	r4,164(sp)
 c006c24:	dc401a04 	addi	r17,sp,104
 c006c28:	908003cc 	andi	r2,r18,15
 c006c2c:	a006973a 	slli	r3,r20,28
 c006c30:	2085883a 	add	r2,r4,r2
 c006c34:	9024d13a 	srli	r18,r18,4
 c006c38:	10800003 	ldbu	r2,0(r2)
 c006c3c:	a028d13a 	srli	r20,r20,4
 c006c40:	8c7fffc4 	addi	r17,r17,-1
 c006c44:	1ca4b03a 	or	r18,r3,r18
 c006c48:	88800005 	stb	r2,0(r17)
 c006c4c:	9504b03a 	or	r2,r18,r20
 c006c50:	103ff51e 	bne	r2,zero,c006c28 <__alt_data_end+0xfc006c28>
 c006c54:	d8801e17 	ldw	r2,120(sp)
 c006c58:	1469c83a 	sub	r20,r2,r17
 c006c5c:	00001906 	br	c006cc4 <___svfiprintf_internal_r+0x490>
 c006c60:	8821883a 	mov	r16,r17
 c006c64:	dc402103 	ldbu	r17,132(sp)
 c006c68:	b811883a 	mov	r8,r23
 c006c6c:	8c403fcc 	andi	r17,r17,255
 c006c70:	8803d01e 	bne	r17,zero,c007bb4 <___svfiprintf_internal_r+0x1380>
 c006c74:	8080080c 	andi	r2,r16,32
 c006c78:	10016126 	beq	r2,zero,c007200 <___svfiprintf_internal_r+0x9cc>
 c006c7c:	d9002417 	ldw	r4,144(sp)
 c006c80:	d9402017 	ldw	r5,128(sp)
 c006c84:	d8001d85 	stb	zero,118(sp)
 c006c88:	20c00204 	addi	r3,r4,8
 c006c8c:	24800017 	ldw	r18,0(r4)
 c006c90:	25000117 	ldw	r20,4(r4)
 c006c94:	28030f16 	blt	r5,zero,c0078d4 <___svfiprintf_internal_r+0x10a0>
 c006c98:	013fdfc4 	movi	r4,-129
 c006c9c:	9504b03a 	or	r2,r18,r20
 c006ca0:	d8c02415 	stw	r3,144(sp)
 c006ca4:	8120703a 	and	r16,r16,r4
 c006ca8:	002b883a 	mov	r21,zero
 c006cac:	1000cd1e 	bne	r2,zero,c006fe4 <___svfiprintf_internal_r+0x7b0>
 c006cb0:	d8c02017 	ldw	r3,128(sp)
 c006cb4:	1803141e 	bne	r3,zero,c007908 <___svfiprintf_internal_r+0x10d4>
 c006cb8:	d8002015 	stw	zero,128(sp)
 c006cbc:	0029883a 	mov	r20,zero
 c006cc0:	dc401a04 	addi	r17,sp,104
 c006cc4:	dc802017 	ldw	r18,128(sp)
 c006cc8:	9500010e 	bge	r18,r20,c006cd0 <___svfiprintf_internal_r+0x49c>
 c006ccc:	a025883a 	mov	r18,r20
 c006cd0:	ad403fcc 	andi	r21,r21,255
 c006cd4:	ad40201c 	xori	r21,r21,128
 c006cd8:	ad7fe004 	addi	r21,r21,-128
 c006cdc:	a8003f26 	beq	r21,zero,c006ddc <___svfiprintf_internal_r+0x5a8>
 c006ce0:	94800044 	addi	r18,r18,1
 c006ce4:	00003d06 	br	c006ddc <___svfiprintf_internal_r+0x5a8>
 c006ce8:	00c00044 	movi	r3,1
 c006cec:	d8c02105 	stb	r3,132(sp)
 c006cf0:	05400ac4 	movi	r21,43
 c006cf4:	98c00007 	ldb	r3,0(r19)
 c006cf8:	003f1a06 	br	c006964 <__alt_data_end+0xfc006964>
 c006cfc:	8821883a 	mov	r16,r17
 c006d00:	dc402103 	ldbu	r17,132(sp)
 c006d04:	b811883a 	mov	r8,r23
 c006d08:	8c403fcc 	andi	r17,r17,255
 c006d0c:	8803a71e 	bne	r17,zero,c007bac <___svfiprintf_internal_r+0x1378>
 c006d10:	8080080c 	andi	r2,r16,32
 c006d14:	10015726 	beq	r2,zero,c007274 <___svfiprintf_internal_r+0xa40>
 c006d18:	d8c02417 	ldw	r3,144(sp)
 c006d1c:	d9002017 	ldw	r4,128(sp)
 c006d20:	d8001d85 	stb	zero,118(sp)
 c006d24:	18800204 	addi	r2,r3,8
 c006d28:	1c800017 	ldw	r18,0(r3)
 c006d2c:	1d000117 	ldw	r20,4(r3)
 c006d30:	2002db16 	blt	r4,zero,c0078a0 <___svfiprintf_internal_r+0x106c>
 c006d34:	013fdfc4 	movi	r4,-129
 c006d38:	9506b03a 	or	r3,r18,r20
 c006d3c:	d8802415 	stw	r2,144(sp)
 c006d40:	8120703a 	and	r16,r16,r4
 c006d44:	18015826 	beq	r3,zero,c0072a8 <___svfiprintf_internal_r+0xa74>
 c006d48:	002b883a 	mov	r21,zero
 c006d4c:	dc401a04 	addi	r17,sp,104
 c006d50:	9006d0fa 	srli	r3,r18,3
 c006d54:	a008977a 	slli	r4,r20,29
 c006d58:	a028d0fa 	srli	r20,r20,3
 c006d5c:	948001cc 	andi	r18,r18,7
 c006d60:	90800c04 	addi	r2,r18,48
 c006d64:	8c7fffc4 	addi	r17,r17,-1
 c006d68:	20e4b03a 	or	r18,r4,r3
 c006d6c:	88800005 	stb	r2,0(r17)
 c006d70:	9506b03a 	or	r3,r18,r20
 c006d74:	183ff61e 	bne	r3,zero,c006d50 <__alt_data_end+0xfc006d50>
 c006d78:	80c0004c 	andi	r3,r16,1
 c006d7c:	18028926 	beq	r3,zero,c0077a4 <___svfiprintf_internal_r+0xf70>
 c006d80:	10803fcc 	andi	r2,r2,255
 c006d84:	1080201c 	xori	r2,r2,128
 c006d88:	10bfe004 	addi	r2,r2,-128
 c006d8c:	00c00c04 	movi	r3,48
 c006d90:	10ffb026 	beq	r2,r3,c006c54 <__alt_data_end+0xfc006c54>
 c006d94:	88ffffc5 	stb	r3,-1(r17)
 c006d98:	d8c01e17 	ldw	r3,120(sp)
 c006d9c:	88bfffc4 	addi	r2,r17,-1
 c006da0:	1023883a 	mov	r17,r2
 c006da4:	18a9c83a 	sub	r20,r3,r2
 c006da8:	003fc606 	br	c006cc4 <__alt_data_end+0xfc006cc4>
 c006dac:	d8c02417 	ldw	r3,144(sp)
 c006db0:	04800044 	movi	r18,1
 c006db4:	8821883a 	mov	r16,r17
 c006db8:	18800017 	ldw	r2,0(r3)
 c006dbc:	18c00104 	addi	r3,r3,4
 c006dc0:	b811883a 	mov	r8,r23
 c006dc4:	d8001d85 	stb	zero,118(sp)
 c006dc8:	d8801005 	stb	r2,64(sp)
 c006dcc:	d8c02415 	stw	r3,144(sp)
 c006dd0:	9029883a 	mov	r20,r18
 c006dd4:	dc401004 	addi	r17,sp,64
 c006dd8:	d8002015 	stw	zero,128(sp)
 c006ddc:	80c0008c 	andi	r3,r16,2
 c006de0:	d8c02115 	stw	r3,132(sp)
 c006de4:	18000126 	beq	r3,zero,c006dec <___svfiprintf_internal_r+0x5b8>
 c006de8:	94800084 	addi	r18,r18,2
 c006dec:	80c0210c 	andi	r3,r16,132
 c006df0:	d8c02215 	stw	r3,136(sp)
 c006df4:	1801321e 	bne	r3,zero,c0072c0 <___svfiprintf_internal_r+0xa8c>
 c006df8:	d9002517 	ldw	r4,148(sp)
 c006dfc:	24b9c83a 	sub	fp,r4,r18
 c006e00:	07012f0e 	bge	zero,fp,c0072c0 <___svfiprintf_internal_r+0xa8c>
 c006e04:	02400404 	movi	r9,16
 c006e08:	d8c01c17 	ldw	r3,112(sp)
 c006e0c:	d8801b17 	ldw	r2,108(sp)
 c006e10:	4f03250e 	bge	r9,fp,c007aa8 <___svfiprintf_internal_r+0x1274>
 c006e14:	01030074 	movhi	r4,3073
 c006e18:	21390104 	addi	r4,r4,-7164
 c006e1c:	dc002a15 	stw	r16,168(sp)
 c006e20:	dc402b15 	stw	r17,172(sp)
 c006e24:	d9002815 	stw	r4,160(sp)
 c006e28:	e023883a 	mov	r17,fp
 c006e2c:	482f883a 	mov	r23,r9
 c006e30:	9839883a 	mov	fp,r19
 c006e34:	054001c4 	movi	r21,7
 c006e38:	9027883a 	mov	r19,r18
 c006e3c:	dc002717 	ldw	r16,156(sp)
 c006e40:	dc802317 	ldw	r18,140(sp)
 c006e44:	00000306 	br	c006e54 <___svfiprintf_internal_r+0x620>
 c006e48:	8c7ffc04 	addi	r17,r17,-16
 c006e4c:	42000204 	addi	r8,r8,8
 c006e50:	bc40130e 	bge	r23,r17,c006ea0 <___svfiprintf_internal_r+0x66c>
 c006e54:	01430074 	movhi	r5,3073
 c006e58:	18c00404 	addi	r3,r3,16
 c006e5c:	10800044 	addi	r2,r2,1
 c006e60:	29790104 	addi	r5,r5,-7164
 c006e64:	41400015 	stw	r5,0(r8)
 c006e68:	45c00115 	stw	r23,4(r8)
 c006e6c:	d8c01c15 	stw	r3,112(sp)
 c006e70:	d8801b15 	stw	r2,108(sp)
 c006e74:	a8bff40e 	bge	r21,r2,c006e48 <__alt_data_end+0xfc006e48>
 c006e78:	d9801a04 	addi	r6,sp,104
 c006e7c:	900b883a 	mov	r5,r18
 c006e80:	8009883a 	mov	r4,r16
 c006e84:	c0066640 	call	c006664 <__ssprint_r>
 c006e88:	1001aa1e 	bne	r2,zero,c007534 <___svfiprintf_internal_r+0xd00>
 c006e8c:	8c7ffc04 	addi	r17,r17,-16
 c006e90:	d8c01c17 	ldw	r3,112(sp)
 c006e94:	d8801b17 	ldw	r2,108(sp)
 c006e98:	d811883a 	mov	r8,sp
 c006e9c:	bc7fed16 	blt	r23,r17,c006e54 <__alt_data_end+0xfc006e54>
 c006ea0:	9825883a 	mov	r18,r19
 c006ea4:	dc002a17 	ldw	r16,168(sp)
 c006ea8:	e027883a 	mov	r19,fp
 c006eac:	8839883a 	mov	fp,r17
 c006eb0:	dc402b17 	ldw	r17,172(sp)
 c006eb4:	d9002817 	ldw	r4,160(sp)
 c006eb8:	e0c7883a 	add	r3,fp,r3
 c006ebc:	10800044 	addi	r2,r2,1
 c006ec0:	41000015 	stw	r4,0(r8)
 c006ec4:	47000115 	stw	fp,4(r8)
 c006ec8:	d8c01c15 	stw	r3,112(sp)
 c006ecc:	d8801b15 	stw	r2,108(sp)
 c006ed0:	010001c4 	movi	r4,7
 c006ed4:	20821616 	blt	r4,r2,c007730 <___svfiprintf_internal_r+0xefc>
 c006ed8:	42000204 	addi	r8,r8,8
 c006edc:	0000fa06 	br	c0072c8 <___svfiprintf_internal_r+0xa94>
 c006ee0:	8821883a 	mov	r16,r17
 c006ee4:	dc402103 	ldbu	r17,132(sp)
 c006ee8:	b811883a 	mov	r8,r23
 c006eec:	8c403fcc 	andi	r17,r17,255
 c006ef0:	8803361e 	bne	r17,zero,c007bcc <___svfiprintf_internal_r+0x1398>
 c006ef4:	01430074 	movhi	r5,3073
 c006ef8:	29789704 	addi	r5,r5,-7588
 c006efc:	d9402915 	stw	r5,164(sp)
 c006f00:	8080080c 	andi	r2,r16,32
 c006f04:	103f331e 	bne	r2,zero,c006bd4 <__alt_data_end+0xfc006bd4>
 c006f08:	8080040c 	andi	r2,r16,16
 c006f0c:	1002551e 	bne	r2,zero,c007864 <___svfiprintf_internal_r+0x1030>
 c006f10:	8080100c 	andi	r2,r16,64
 c006f14:	1002a626 	beq	r2,zero,c0079b0 <___svfiprintf_internal_r+0x117c>
 c006f18:	d8802417 	ldw	r2,144(sp)
 c006f1c:	0029883a 	mov	r20,zero
 c006f20:	1480000b 	ldhu	r18,0(r2)
 c006f24:	10800104 	addi	r2,r2,4
 c006f28:	d8802415 	stw	r2,144(sp)
 c006f2c:	003f2e06 	br	c006be8 <__alt_data_end+0xfc006be8>
 c006f30:	8821883a 	mov	r16,r17
 c006f34:	dc402103 	ldbu	r17,132(sp)
 c006f38:	b811883a 	mov	r8,r23
 c006f3c:	8c403fcc 	andi	r17,r17,255
 c006f40:	88030b1e 	bne	r17,zero,c007b70 <___svfiprintf_internal_r+0x133c>
 c006f44:	8080080c 	andi	r2,r16,32
 c006f48:	1002271e 	bne	r2,zero,c0077e8 <___svfiprintf_internal_r+0xfb4>
 c006f4c:	8080040c 	andi	r2,r16,16
 c006f50:	10028e26 	beq	r2,zero,c00798c <___svfiprintf_internal_r+0x1158>
 c006f54:	d8c02417 	ldw	r3,144(sp)
 c006f58:	d9002617 	ldw	r4,152(sp)
 c006f5c:	18800017 	ldw	r2,0(r3)
 c006f60:	18c00104 	addi	r3,r3,4
 c006f64:	d8c02415 	stw	r3,144(sp)
 c006f68:	11000015 	stw	r4,0(r2)
 c006f6c:	003e5306 	br	c0068bc <__alt_data_end+0xfc0068bc>
 c006f70:	98c00007 	ldb	r3,0(r19)
 c006f74:	01401b04 	movi	r5,108
 c006f78:	19424f26 	beq	r3,r5,c0078b8 <___svfiprintf_internal_r+0x1084>
 c006f7c:	8c400414 	ori	r17,r17,16
 c006f80:	003e7806 	br	c006964 <__alt_data_end+0xfc006964>
 c006f84:	8c401014 	ori	r17,r17,64
 c006f88:	98c00007 	ldb	r3,0(r19)
 c006f8c:	003e7506 	br	c006964 <__alt_data_end+0xfc006964>
 c006f90:	8821883a 	mov	r16,r17
 c006f94:	dc402103 	ldbu	r17,132(sp)
 c006f98:	b811883a 	mov	r8,r23
 c006f9c:	8c403fcc 	andi	r17,r17,255
 c006fa0:	8802fe1e 	bne	r17,zero,c007b9c <___svfiprintf_internal_r+0x1368>
 c006fa4:	8080080c 	andi	r2,r16,32
 c006fa8:	10004626 	beq	r2,zero,c0070c4 <___svfiprintf_internal_r+0x890>
 c006fac:	d9002417 	ldw	r4,144(sp)
 c006fb0:	20800117 	ldw	r2,4(r4)
 c006fb4:	24800017 	ldw	r18,0(r4)
 c006fb8:	21000204 	addi	r4,r4,8
 c006fbc:	d9002415 	stw	r4,144(sp)
 c006fc0:	1029883a 	mov	r20,r2
 c006fc4:	10004a16 	blt	r2,zero,c0070f0 <___svfiprintf_internal_r+0x8bc>
 c006fc8:	d9002017 	ldw	r4,128(sp)
 c006fcc:	dd401d83 	ldbu	r21,118(sp)
 c006fd0:	2001eb16 	blt	r4,zero,c007780 <___svfiprintf_internal_r+0xf4c>
 c006fd4:	00ffdfc4 	movi	r3,-129
 c006fd8:	9504b03a 	or	r2,r18,r20
 c006fdc:	80e0703a 	and	r16,r16,r3
 c006fe0:	103f3326 	beq	r2,zero,c006cb0 <__alt_data_end+0xfc006cb0>
 c006fe4:	a0009426 	beq	r20,zero,c007238 <___svfiprintf_internal_r+0xa04>
 c006fe8:	dc401a04 	addi	r17,sp,104
 c006fec:	402f883a 	mov	r23,r8
 c006ff0:	9009883a 	mov	r4,r18
 c006ff4:	a00b883a 	mov	r5,r20
 c006ff8:	01800284 	movi	r6,10
 c006ffc:	000f883a 	mov	r7,zero
 c007000:	c008fd40 	call	c008fd4 <__umoddi3>
 c007004:	10800c04 	addi	r2,r2,48
 c007008:	8c7fffc4 	addi	r17,r17,-1
 c00700c:	9009883a 	mov	r4,r18
 c007010:	a00b883a 	mov	r5,r20
 c007014:	88800005 	stb	r2,0(r17)
 c007018:	01800284 	movi	r6,10
 c00701c:	000f883a 	mov	r7,zero
 c007020:	c0089d80 	call	c0089d8 <__udivdi3>
 c007024:	1025883a 	mov	r18,r2
 c007028:	10c4b03a 	or	r2,r2,r3
 c00702c:	1829883a 	mov	r20,r3
 c007030:	103fef1e 	bne	r2,zero,c006ff0 <__alt_data_end+0xfc006ff0>
 c007034:	d9001e17 	ldw	r4,120(sp)
 c007038:	b811883a 	mov	r8,r23
 c00703c:	2469c83a 	sub	r20,r4,r17
 c007040:	003f2006 	br	c006cc4 <__alt_data_end+0xfc006cc4>
 c007044:	d8802417 	ldw	r2,144(sp)
 c007048:	8821883a 	mov	r16,r17
 c00704c:	d8001d85 	stb	zero,118(sp)
 c007050:	14400017 	ldw	r17,0(r2)
 c007054:	b811883a 	mov	r8,r23
 c007058:	15c00104 	addi	r23,r2,4
 c00705c:	88026c26 	beq	r17,zero,c007a10 <___svfiprintf_internal_r+0x11dc>
 c007060:	d8c02017 	ldw	r3,128(sp)
 c007064:	18025f16 	blt	r3,zero,c0079e4 <___svfiprintf_internal_r+0x11b0>
 c007068:	180d883a 	mov	r6,r3
 c00706c:	000b883a 	mov	r5,zero
 c007070:	8809883a 	mov	r4,r17
 c007074:	da002d15 	stw	r8,180(sp)
 c007078:	c0051dc0 	call	c0051dc <memchr>
 c00707c:	da002d17 	ldw	r8,180(sp)
 c007080:	1002a526 	beq	r2,zero,c007b18 <___svfiprintf_internal_r+0x12e4>
 c007084:	1469c83a 	sub	r20,r2,r17
 c007088:	dd401d83 	ldbu	r21,118(sp)
 c00708c:	ddc02415 	stw	r23,144(sp)
 c007090:	d8002015 	stw	zero,128(sp)
 c007094:	003f0b06 	br	c006cc4 <__alt_data_end+0xfc006cc4>
 c007098:	8c400814 	ori	r17,r17,32
 c00709c:	98c00007 	ldb	r3,0(r19)
 c0070a0:	003e3006 	br	c006964 <__alt_data_end+0xfc006964>
 c0070a4:	8821883a 	mov	r16,r17
 c0070a8:	dc402103 	ldbu	r17,132(sp)
 c0070ac:	b811883a 	mov	r8,r23
 c0070b0:	8c403fcc 	andi	r17,r17,255
 c0070b4:	8802b01e 	bne	r17,zero,c007b78 <___svfiprintf_internal_r+0x1344>
 c0070b8:	84000414 	ori	r16,r16,16
 c0070bc:	8080080c 	andi	r2,r16,32
 c0070c0:	103fba1e 	bne	r2,zero,c006fac <__alt_data_end+0xfc006fac>
 c0070c4:	8080040c 	andi	r2,r16,16
 c0070c8:	1001df1e 	bne	r2,zero,c007848 <___svfiprintf_internal_r+0x1014>
 c0070cc:	8080100c 	andi	r2,r16,64
 c0070d0:	10023d26 	beq	r2,zero,c0079c8 <___svfiprintf_internal_r+0x1194>
 c0070d4:	d8802417 	ldw	r2,144(sp)
 c0070d8:	1480000f 	ldh	r18,0(r2)
 c0070dc:	10800104 	addi	r2,r2,4
 c0070e0:	d8802415 	stw	r2,144(sp)
 c0070e4:	9029d7fa 	srai	r20,r18,31
 c0070e8:	a005883a 	mov	r2,r20
 c0070ec:	103fb60e 	bge	r2,zero,c006fc8 <__alt_data_end+0xfc006fc8>
 c0070f0:	d9402017 	ldw	r5,128(sp)
 c0070f4:	04a5c83a 	sub	r18,zero,r18
 c0070f8:	05400b44 	movi	r21,45
 c0070fc:	9004c03a 	cmpne	r2,r18,zero
 c007100:	0529c83a 	sub	r20,zero,r20
 c007104:	dd401d85 	stb	r21,118(sp)
 c007108:	a0a9c83a 	sub	r20,r20,r2
 c00710c:	28026c16 	blt	r5,zero,c007ac0 <___svfiprintf_internal_r+0x128c>
 c007110:	00bfdfc4 	movi	r2,-129
 c007114:	80a0703a 	and	r16,r16,r2
 c007118:	a03fb31e 	bne	r20,zero,c006fe8 <__alt_data_end+0xfc006fe8>
 c00711c:	00004606 	br	c007238 <___svfiprintf_internal_r+0xa04>
 c007120:	9839883a 	mov	fp,r19
 c007124:	d8002515 	stw	zero,148(sp)
 c007128:	1c3ff404 	addi	r16,r3,-48
 c00712c:	0009883a 	mov	r4,zero
 c007130:	01400284 	movi	r5,10
 c007134:	c000b880 	call	c000b88 <__mulsi3>
 c007138:	e0c00007 	ldb	r3,0(fp)
 c00713c:	8089883a 	add	r4,r16,r2
 c007140:	9cc00044 	addi	r19,r19,1
 c007144:	1c3ff404 	addi	r16,r3,-48
 c007148:	9839883a 	mov	fp,r19
 c00714c:	a43ff82e 	bgeu	r20,r16,c007130 <__alt_data_end+0xfc007130>
 c007150:	d9002515 	stw	r4,148(sp)
 c007154:	18bff804 	addi	r2,r3,-32
 c007158:	90be052e 	bgeu	r18,r2,c006970 <__alt_data_end+0xfc006970>
 c00715c:	8821883a 	mov	r16,r17
 c007160:	dc402103 	ldbu	r17,132(sp)
 c007164:	b811883a 	mov	r8,r23
 c007168:	8c403fcc 	andi	r17,r17,255
 c00716c:	88028d1e 	bne	r17,zero,c007ba4 <___svfiprintf_internal_r+0x1370>
 c007170:	1800ea26 	beq	r3,zero,c00751c <___svfiprintf_internal_r+0xce8>
 c007174:	04800044 	movi	r18,1
 c007178:	d8c01005 	stb	r3,64(sp)
 c00717c:	d8001d85 	stb	zero,118(sp)
 c007180:	9029883a 	mov	r20,r18
 c007184:	dc401004 	addi	r17,sp,64
 c007188:	003f1306 	br	c006dd8 <__alt_data_end+0xfc006dd8>
 c00718c:	8c402014 	ori	r17,r17,128
 c007190:	98c00007 	ldb	r3,0(r19)
 c007194:	003df306 	br	c006964 <__alt_data_end+0xfc006964>
 c007198:	98c00007 	ldb	r3,0(r19)
 c00719c:	01000a84 	movi	r4,42
 c0071a0:	9f000044 	addi	fp,r19,1
 c0071a4:	19026326 	beq	r3,r4,c007b34 <___svfiprintf_internal_r+0x1300>
 c0071a8:	1c3ff404 	addi	r16,r3,-48
 c0071ac:	0009883a 	mov	r4,zero
 c0071b0:	a4025636 	bltu	r20,r16,c007b0c <___svfiprintf_internal_r+0x12d8>
 c0071b4:	01400284 	movi	r5,10
 c0071b8:	c000b880 	call	c000b88 <__mulsi3>
 c0071bc:	e0c00007 	ldb	r3,0(fp)
 c0071c0:	1409883a 	add	r4,r2,r16
 c0071c4:	e4c00044 	addi	r19,fp,1
 c0071c8:	1c3ff404 	addi	r16,r3,-48
 c0071cc:	9839883a 	mov	fp,r19
 c0071d0:	a43ff82e 	bgeu	r20,r16,c0071b4 <__alt_data_end+0xfc0071b4>
 c0071d4:	20020c16 	blt	r4,zero,c007a08 <___svfiprintf_internal_r+0x11d4>
 c0071d8:	d9002015 	stw	r4,128(sp)
 c0071dc:	003de206 	br	c006968 <__alt_data_end+0xfc006968>
 c0071e0:	8821883a 	mov	r16,r17
 c0071e4:	dc402103 	ldbu	r17,132(sp)
 c0071e8:	b811883a 	mov	r8,r23
 c0071ec:	8c403fcc 	andi	r17,r17,255
 c0071f0:	8802721e 	bne	r17,zero,c007bbc <___svfiprintf_internal_r+0x1388>
 c0071f4:	84000414 	ori	r16,r16,16
 c0071f8:	8080080c 	andi	r2,r16,32
 c0071fc:	103e9f1e 	bne	r2,zero,c006c7c <__alt_data_end+0xfc006c7c>
 c007200:	8080040c 	andi	r2,r16,16
 c007204:	10015326 	beq	r2,zero,c007754 <___svfiprintf_internal_r+0xf20>
 c007208:	d8c02417 	ldw	r3,144(sp)
 c00720c:	d9002017 	ldw	r4,128(sp)
 c007210:	d8001d85 	stb	zero,118(sp)
 c007214:	18800104 	addi	r2,r3,4
 c007218:	1c800017 	ldw	r18,0(r3)
 c00721c:	0029883a 	mov	r20,zero
 c007220:	20015516 	blt	r4,zero,c007778 <___svfiprintf_internal_r+0xf44>
 c007224:	00ffdfc4 	movi	r3,-129
 c007228:	d8802415 	stw	r2,144(sp)
 c00722c:	80e0703a 	and	r16,r16,r3
 c007230:	002b883a 	mov	r21,zero
 c007234:	903e9e26 	beq	r18,zero,c006cb0 <__alt_data_end+0xfc006cb0>
 c007238:	00800244 	movi	r2,9
 c00723c:	14bf6a36 	bltu	r2,r18,c006fe8 <__alt_data_end+0xfc006fe8>
 c007240:	94800c04 	addi	r18,r18,48
 c007244:	dc8019c5 	stb	r18,103(sp)
 c007248:	dd002c17 	ldw	r20,176(sp)
 c00724c:	dc4019c4 	addi	r17,sp,103
 c007250:	003e9c06 	br	c006cc4 <__alt_data_end+0xfc006cc4>
 c007254:	8821883a 	mov	r16,r17
 c007258:	dc402103 	ldbu	r17,132(sp)
 c00725c:	b811883a 	mov	r8,r23
 c007260:	8c403fcc 	andi	r17,r17,255
 c007264:	8802571e 	bne	r17,zero,c007bc4 <___svfiprintf_internal_r+0x1390>
 c007268:	84000414 	ori	r16,r16,16
 c00726c:	8080080c 	andi	r2,r16,32
 c007270:	103ea91e 	bne	r2,zero,c006d18 <__alt_data_end+0xfc006d18>
 c007274:	8080040c 	andi	r2,r16,16
 c007278:	10018026 	beq	r2,zero,c00787c <___svfiprintf_internal_r+0x1048>
 c00727c:	d9402417 	ldw	r5,144(sp)
 c007280:	d8c02017 	ldw	r3,128(sp)
 c007284:	d8001d85 	stb	zero,118(sp)
 c007288:	28800104 	addi	r2,r5,4
 c00728c:	2c800017 	ldw	r18,0(r5)
 c007290:	0029883a 	mov	r20,zero
 c007294:	18018216 	blt	r3,zero,c0078a0 <___svfiprintf_internal_r+0x106c>
 c007298:	00ffdfc4 	movi	r3,-129
 c00729c:	d8802415 	stw	r2,144(sp)
 c0072a0:	80e0703a 	and	r16,r16,r3
 c0072a4:	903ea81e 	bne	r18,zero,c006d48 <__alt_data_end+0xfc006d48>
 c0072a8:	d8802017 	ldw	r2,128(sp)
 c0072ac:	002b883a 	mov	r21,zero
 c0072b0:	1001f226 	beq	r2,zero,c007a7c <___svfiprintf_internal_r+0x1248>
 c0072b4:	0025883a 	mov	r18,zero
 c0072b8:	0029883a 	mov	r20,zero
 c0072bc:	003ea306 	br	c006d4c <__alt_data_end+0xfc006d4c>
 c0072c0:	d8c01c17 	ldw	r3,112(sp)
 c0072c4:	d8801b17 	ldw	r2,108(sp)
 c0072c8:	d9001d87 	ldb	r4,118(sp)
 c0072cc:	20000b26 	beq	r4,zero,c0072fc <___svfiprintf_internal_r+0xac8>
 c0072d0:	d9001d84 	addi	r4,sp,118
 c0072d4:	18c00044 	addi	r3,r3,1
 c0072d8:	10800044 	addi	r2,r2,1
 c0072dc:	41000015 	stw	r4,0(r8)
 c0072e0:	01000044 	movi	r4,1
 c0072e4:	41000115 	stw	r4,4(r8)
 c0072e8:	d8c01c15 	stw	r3,112(sp)
 c0072ec:	d8801b15 	stw	r2,108(sp)
 c0072f0:	010001c4 	movi	r4,7
 c0072f4:	2080f316 	blt	r4,r2,c0076c4 <___svfiprintf_internal_r+0xe90>
 c0072f8:	42000204 	addi	r8,r8,8
 c0072fc:	d9402117 	ldw	r5,132(sp)
 c007300:	28000b26 	beq	r5,zero,c007330 <___svfiprintf_internal_r+0xafc>
 c007304:	d9001d04 	addi	r4,sp,116
 c007308:	18c00084 	addi	r3,r3,2
 c00730c:	10800044 	addi	r2,r2,1
 c007310:	41000015 	stw	r4,0(r8)
 c007314:	01000084 	movi	r4,2
 c007318:	41000115 	stw	r4,4(r8)
 c00731c:	d8c01c15 	stw	r3,112(sp)
 c007320:	d8801b15 	stw	r2,108(sp)
 c007324:	010001c4 	movi	r4,7
 c007328:	2080ef16 	blt	r4,r2,c0076e8 <___svfiprintf_internal_r+0xeb4>
 c00732c:	42000204 	addi	r8,r8,8
 c007330:	d9402217 	ldw	r5,136(sp)
 c007334:	01002004 	movi	r4,128
 c007338:	29008f26 	beq	r5,r4,c007578 <___svfiprintf_internal_r+0xd44>
 c00733c:	d9002017 	ldw	r4,128(sp)
 c007340:	252fc83a 	sub	r23,r4,r20
 c007344:	05c0310e 	bge	zero,r23,c00740c <___svfiprintf_internal_r+0xbd8>
 c007348:	07000404 	movi	fp,16
 c00734c:	e5c17d0e 	bge	fp,r23,c007944 <___svfiprintf_internal_r+0x1110>
 c007350:	01030074 	movhi	r4,3073
 c007354:	2138fd04 	addi	r4,r4,-7180
 c007358:	dc002015 	stw	r16,128(sp)
 c00735c:	dc402215 	stw	r17,136(sp)
 c007360:	d9002115 	stw	r4,132(sp)
 c007364:	b823883a 	mov	r17,r23
 c007368:	054001c4 	movi	r21,7
 c00736c:	982f883a 	mov	r23,r19
 c007370:	dc002717 	ldw	r16,156(sp)
 c007374:	9027883a 	mov	r19,r18
 c007378:	dc802317 	ldw	r18,140(sp)
 c00737c:	00000306 	br	c00738c <___svfiprintf_internal_r+0xb58>
 c007380:	8c7ffc04 	addi	r17,r17,-16
 c007384:	42000204 	addi	r8,r8,8
 c007388:	e440110e 	bge	fp,r17,c0073d0 <___svfiprintf_internal_r+0xb9c>
 c00738c:	18c00404 	addi	r3,r3,16
 c007390:	10800044 	addi	r2,r2,1
 c007394:	45800015 	stw	r22,0(r8)
 c007398:	47000115 	stw	fp,4(r8)
 c00739c:	d8c01c15 	stw	r3,112(sp)
 c0073a0:	d8801b15 	stw	r2,108(sp)
 c0073a4:	a8bff60e 	bge	r21,r2,c007380 <__alt_data_end+0xfc007380>
 c0073a8:	d9801a04 	addi	r6,sp,104
 c0073ac:	900b883a 	mov	r5,r18
 c0073b0:	8009883a 	mov	r4,r16
 c0073b4:	c0066640 	call	c006664 <__ssprint_r>
 c0073b8:	10005e1e 	bne	r2,zero,c007534 <___svfiprintf_internal_r+0xd00>
 c0073bc:	8c7ffc04 	addi	r17,r17,-16
 c0073c0:	d8c01c17 	ldw	r3,112(sp)
 c0073c4:	d8801b17 	ldw	r2,108(sp)
 c0073c8:	d811883a 	mov	r8,sp
 c0073cc:	e47fef16 	blt	fp,r17,c00738c <__alt_data_end+0xfc00738c>
 c0073d0:	9825883a 	mov	r18,r19
 c0073d4:	dc002017 	ldw	r16,128(sp)
 c0073d8:	b827883a 	mov	r19,r23
 c0073dc:	882f883a 	mov	r23,r17
 c0073e0:	dc402217 	ldw	r17,136(sp)
 c0073e4:	d9402117 	ldw	r5,132(sp)
 c0073e8:	1dc7883a 	add	r3,r3,r23
 c0073ec:	10800044 	addi	r2,r2,1
 c0073f0:	41400015 	stw	r5,0(r8)
 c0073f4:	45c00115 	stw	r23,4(r8)
 c0073f8:	d8c01c15 	stw	r3,112(sp)
 c0073fc:	d8801b15 	stw	r2,108(sp)
 c007400:	010001c4 	movi	r4,7
 c007404:	2080a616 	blt	r4,r2,c0076a0 <___svfiprintf_internal_r+0xe6c>
 c007408:	42000204 	addi	r8,r8,8
 c00740c:	a0c7883a 	add	r3,r20,r3
 c007410:	10800044 	addi	r2,r2,1
 c007414:	44400015 	stw	r17,0(r8)
 c007418:	45000115 	stw	r20,4(r8)
 c00741c:	d8c01c15 	stw	r3,112(sp)
 c007420:	d8801b15 	stw	r2,108(sp)
 c007424:	010001c4 	movi	r4,7
 c007428:	20808816 	blt	r4,r2,c00764c <___svfiprintf_internal_r+0xe18>
 c00742c:	42000204 	addi	r8,r8,8
 c007430:	8400010c 	andi	r16,r16,4
 c007434:	80002c26 	beq	r16,zero,c0074e8 <___svfiprintf_internal_r+0xcb4>
 c007438:	d8802517 	ldw	r2,148(sp)
 c00743c:	14a1c83a 	sub	r16,r2,r18
 c007440:	0400290e 	bge	zero,r16,c0074e8 <___svfiprintf_internal_r+0xcb4>
 c007444:	04400404 	movi	r17,16
 c007448:	d8801b17 	ldw	r2,108(sp)
 c00744c:	8c01a70e 	bge	r17,r16,c007aec <___svfiprintf_internal_r+0x12b8>
 c007450:	01430074 	movhi	r5,3073
 c007454:	29790104 	addi	r5,r5,-7164
 c007458:	d9402815 	stw	r5,160(sp)
 c00745c:	050001c4 	movi	r20,7
 c007460:	dd402717 	ldw	r21,156(sp)
 c007464:	ddc02317 	ldw	r23,140(sp)
 c007468:	00000306 	br	c007478 <___svfiprintf_internal_r+0xc44>
 c00746c:	843ffc04 	addi	r16,r16,-16
 c007470:	42000204 	addi	r8,r8,8
 c007474:	8c00130e 	bge	r17,r16,c0074c4 <___svfiprintf_internal_r+0xc90>
 c007478:	01030074 	movhi	r4,3073
 c00747c:	18c00404 	addi	r3,r3,16
 c007480:	10800044 	addi	r2,r2,1
 c007484:	21390104 	addi	r4,r4,-7164
 c007488:	41000015 	stw	r4,0(r8)
 c00748c:	44400115 	stw	r17,4(r8)
 c007490:	d8c01c15 	stw	r3,112(sp)
 c007494:	d8801b15 	stw	r2,108(sp)
 c007498:	a0bff40e 	bge	r20,r2,c00746c <__alt_data_end+0xfc00746c>
 c00749c:	d9801a04 	addi	r6,sp,104
 c0074a0:	b80b883a 	mov	r5,r23
 c0074a4:	a809883a 	mov	r4,r21
 c0074a8:	c0066640 	call	c006664 <__ssprint_r>
 c0074ac:	1000211e 	bne	r2,zero,c007534 <___svfiprintf_internal_r+0xd00>
 c0074b0:	843ffc04 	addi	r16,r16,-16
 c0074b4:	d8c01c17 	ldw	r3,112(sp)
 c0074b8:	d8801b17 	ldw	r2,108(sp)
 c0074bc:	d811883a 	mov	r8,sp
 c0074c0:	8c3fed16 	blt	r17,r16,c007478 <__alt_data_end+0xfc007478>
 c0074c4:	d9402817 	ldw	r5,160(sp)
 c0074c8:	1c07883a 	add	r3,r3,r16
 c0074cc:	10800044 	addi	r2,r2,1
 c0074d0:	41400015 	stw	r5,0(r8)
 c0074d4:	44000115 	stw	r16,4(r8)
 c0074d8:	d8c01c15 	stw	r3,112(sp)
 c0074dc:	d8801b15 	stw	r2,108(sp)
 c0074e0:	010001c4 	movi	r4,7
 c0074e4:	2080b516 	blt	r4,r2,c0077bc <___svfiprintf_internal_r+0xf88>
 c0074e8:	d8802517 	ldw	r2,148(sp)
 c0074ec:	1480010e 	bge	r2,r18,c0074f4 <___svfiprintf_internal_r+0xcc0>
 c0074f0:	9005883a 	mov	r2,r18
 c0074f4:	d9002617 	ldw	r4,152(sp)
 c0074f8:	2089883a 	add	r4,r4,r2
 c0074fc:	d9002615 	stw	r4,152(sp)
 c007500:	18005a1e 	bne	r3,zero,c00766c <___svfiprintf_internal_r+0xe38>
 c007504:	98800007 	ldb	r2,0(r19)
 c007508:	d8001b15 	stw	zero,108(sp)
 c00750c:	d811883a 	mov	r8,sp
 c007510:	103cec1e 	bne	r2,zero,c0068c4 <__alt_data_end+0xfc0068c4>
 c007514:	9825883a 	mov	r18,r19
 c007518:	003d0206 	br	c006924 <__alt_data_end+0xfc006924>
 c00751c:	d8801c17 	ldw	r2,112(sp)
 c007520:	10000426 	beq	r2,zero,c007534 <___svfiprintf_internal_r+0xd00>
 c007524:	d9402317 	ldw	r5,140(sp)
 c007528:	d9002717 	ldw	r4,156(sp)
 c00752c:	d9801a04 	addi	r6,sp,104
 c007530:	c0066640 	call	c006664 <__ssprint_r>
 c007534:	d9402317 	ldw	r5,140(sp)
 c007538:	d8802617 	ldw	r2,152(sp)
 c00753c:	28c0030b 	ldhu	r3,12(r5)
 c007540:	18c0100c 	andi	r3,r3,64
 c007544:	18015c1e 	bne	r3,zero,c007ab8 <___svfiprintf_internal_r+0x1284>
 c007548:	dfc03717 	ldw	ra,220(sp)
 c00754c:	df003617 	ldw	fp,216(sp)
 c007550:	ddc03517 	ldw	r23,212(sp)
 c007554:	dd803417 	ldw	r22,208(sp)
 c007558:	dd403317 	ldw	r21,204(sp)
 c00755c:	dd003217 	ldw	r20,200(sp)
 c007560:	dcc03117 	ldw	r19,196(sp)
 c007564:	dc803017 	ldw	r18,192(sp)
 c007568:	dc402f17 	ldw	r17,188(sp)
 c00756c:	dc002e17 	ldw	r16,184(sp)
 c007570:	dec03804 	addi	sp,sp,224
 c007574:	f800283a 	ret
 c007578:	d9002517 	ldw	r4,148(sp)
 c00757c:	24afc83a 	sub	r23,r4,r18
 c007580:	05ff6e0e 	bge	zero,r23,c00733c <__alt_data_end+0xfc00733c>
 c007584:	07000404 	movi	fp,16
 c007588:	e5c15c0e 	bge	fp,r23,c007afc <___svfiprintf_internal_r+0x12c8>
 c00758c:	01030074 	movhi	r4,3073
 c007590:	2138fd04 	addi	r4,r4,-7180
 c007594:	dc002215 	stw	r16,136(sp)
 c007598:	dc402815 	stw	r17,160(sp)
 c00759c:	d9002115 	stw	r4,132(sp)
 c0075a0:	b823883a 	mov	r17,r23
 c0075a4:	054001c4 	movi	r21,7
 c0075a8:	982f883a 	mov	r23,r19
 c0075ac:	dc002717 	ldw	r16,156(sp)
 c0075b0:	9027883a 	mov	r19,r18
 c0075b4:	dc802317 	ldw	r18,140(sp)
 c0075b8:	00000306 	br	c0075c8 <___svfiprintf_internal_r+0xd94>
 c0075bc:	8c7ffc04 	addi	r17,r17,-16
 c0075c0:	42000204 	addi	r8,r8,8
 c0075c4:	e440110e 	bge	fp,r17,c00760c <___svfiprintf_internal_r+0xdd8>
 c0075c8:	18c00404 	addi	r3,r3,16
 c0075cc:	10800044 	addi	r2,r2,1
 c0075d0:	45800015 	stw	r22,0(r8)
 c0075d4:	47000115 	stw	fp,4(r8)
 c0075d8:	d8c01c15 	stw	r3,112(sp)
 c0075dc:	d8801b15 	stw	r2,108(sp)
 c0075e0:	a8bff60e 	bge	r21,r2,c0075bc <__alt_data_end+0xfc0075bc>
 c0075e4:	d9801a04 	addi	r6,sp,104
 c0075e8:	900b883a 	mov	r5,r18
 c0075ec:	8009883a 	mov	r4,r16
 c0075f0:	c0066640 	call	c006664 <__ssprint_r>
 c0075f4:	103fcf1e 	bne	r2,zero,c007534 <__alt_data_end+0xfc007534>
 c0075f8:	8c7ffc04 	addi	r17,r17,-16
 c0075fc:	d8c01c17 	ldw	r3,112(sp)
 c007600:	d8801b17 	ldw	r2,108(sp)
 c007604:	d811883a 	mov	r8,sp
 c007608:	e47fef16 	blt	fp,r17,c0075c8 <__alt_data_end+0xfc0075c8>
 c00760c:	9825883a 	mov	r18,r19
 c007610:	dc002217 	ldw	r16,136(sp)
 c007614:	b827883a 	mov	r19,r23
 c007618:	882f883a 	mov	r23,r17
 c00761c:	dc402817 	ldw	r17,160(sp)
 c007620:	d9402117 	ldw	r5,132(sp)
 c007624:	1dc7883a 	add	r3,r3,r23
 c007628:	10800044 	addi	r2,r2,1
 c00762c:	41400015 	stw	r5,0(r8)
 c007630:	45c00115 	stw	r23,4(r8)
 c007634:	d8c01c15 	stw	r3,112(sp)
 c007638:	d8801b15 	stw	r2,108(sp)
 c00763c:	010001c4 	movi	r4,7
 c007640:	2080b716 	blt	r4,r2,c007920 <___svfiprintf_internal_r+0x10ec>
 c007644:	42000204 	addi	r8,r8,8
 c007648:	003f3c06 	br	c00733c <__alt_data_end+0xfc00733c>
 c00764c:	d9402317 	ldw	r5,140(sp)
 c007650:	d9002717 	ldw	r4,156(sp)
 c007654:	d9801a04 	addi	r6,sp,104
 c007658:	c0066640 	call	c006664 <__ssprint_r>
 c00765c:	103fb51e 	bne	r2,zero,c007534 <__alt_data_end+0xfc007534>
 c007660:	d8c01c17 	ldw	r3,112(sp)
 c007664:	d811883a 	mov	r8,sp
 c007668:	003f7106 	br	c007430 <__alt_data_end+0xfc007430>
 c00766c:	d9402317 	ldw	r5,140(sp)
 c007670:	d9002717 	ldw	r4,156(sp)
 c007674:	d9801a04 	addi	r6,sp,104
 c007678:	c0066640 	call	c006664 <__ssprint_r>
 c00767c:	103fa126 	beq	r2,zero,c007504 <__alt_data_end+0xfc007504>
 c007680:	003fac06 	br	c007534 <__alt_data_end+0xfc007534>
 c007684:	d9402317 	ldw	r5,140(sp)
 c007688:	d9002717 	ldw	r4,156(sp)
 c00768c:	d9801a04 	addi	r6,sp,104
 c007690:	c0066640 	call	c006664 <__ssprint_r>
 c007694:	103fa71e 	bne	r2,zero,c007534 <__alt_data_end+0xfc007534>
 c007698:	d811883a 	mov	r8,sp
 c00769c:	003c9e06 	br	c006918 <__alt_data_end+0xfc006918>
 c0076a0:	d9402317 	ldw	r5,140(sp)
 c0076a4:	d9002717 	ldw	r4,156(sp)
 c0076a8:	d9801a04 	addi	r6,sp,104
 c0076ac:	c0066640 	call	c006664 <__ssprint_r>
 c0076b0:	103fa01e 	bne	r2,zero,c007534 <__alt_data_end+0xfc007534>
 c0076b4:	d8c01c17 	ldw	r3,112(sp)
 c0076b8:	d8801b17 	ldw	r2,108(sp)
 c0076bc:	d811883a 	mov	r8,sp
 c0076c0:	003f5206 	br	c00740c <__alt_data_end+0xfc00740c>
 c0076c4:	d9402317 	ldw	r5,140(sp)
 c0076c8:	d9002717 	ldw	r4,156(sp)
 c0076cc:	d9801a04 	addi	r6,sp,104
 c0076d0:	c0066640 	call	c006664 <__ssprint_r>
 c0076d4:	103f971e 	bne	r2,zero,c007534 <__alt_data_end+0xfc007534>
 c0076d8:	d8c01c17 	ldw	r3,112(sp)
 c0076dc:	d8801b17 	ldw	r2,108(sp)
 c0076e0:	d811883a 	mov	r8,sp
 c0076e4:	003f0506 	br	c0072fc <__alt_data_end+0xfc0072fc>
 c0076e8:	d9402317 	ldw	r5,140(sp)
 c0076ec:	d9002717 	ldw	r4,156(sp)
 c0076f0:	d9801a04 	addi	r6,sp,104
 c0076f4:	c0066640 	call	c006664 <__ssprint_r>
 c0076f8:	103f8e1e 	bne	r2,zero,c007534 <__alt_data_end+0xfc007534>
 c0076fc:	d8c01c17 	ldw	r3,112(sp)
 c007700:	d8801b17 	ldw	r2,108(sp)
 c007704:	d811883a 	mov	r8,sp
 c007708:	003f0906 	br	c007330 <__alt_data_end+0xfc007330>
 c00770c:	d9402017 	ldw	r5,128(sp)
 c007710:	d8001d85 	stb	zero,118(sp)
 c007714:	28007716 	blt	r5,zero,c0078f4 <___svfiprintf_internal_r+0x10c0>
 c007718:	00ffdfc4 	movi	r3,-129
 c00771c:	9504b03a 	or	r2,r18,r20
 c007720:	80e0703a 	and	r16,r16,r3
 c007724:	103d3926 	beq	r2,zero,c006c0c <__alt_data_end+0xfc006c0c>
 c007728:	002b883a 	mov	r21,zero
 c00772c:	003d3c06 	br	c006c20 <__alt_data_end+0xfc006c20>
 c007730:	d9402317 	ldw	r5,140(sp)
 c007734:	d9002717 	ldw	r4,156(sp)
 c007738:	d9801a04 	addi	r6,sp,104
 c00773c:	c0066640 	call	c006664 <__ssprint_r>
 c007740:	103f7c1e 	bne	r2,zero,c007534 <__alt_data_end+0xfc007534>
 c007744:	d8c01c17 	ldw	r3,112(sp)
 c007748:	d8801b17 	ldw	r2,108(sp)
 c00774c:	d811883a 	mov	r8,sp
 c007750:	003edd06 	br	c0072c8 <__alt_data_end+0xfc0072c8>
 c007754:	8080100c 	andi	r2,r16,64
 c007758:	d8001d85 	stb	zero,118(sp)
 c00775c:	10008426 	beq	r2,zero,c007970 <___svfiprintf_internal_r+0x113c>
 c007760:	d9402417 	ldw	r5,144(sp)
 c007764:	d8c02017 	ldw	r3,128(sp)
 c007768:	0029883a 	mov	r20,zero
 c00776c:	28800104 	addi	r2,r5,4
 c007770:	2c80000b 	ldhu	r18,0(r5)
 c007774:	183eab0e 	bge	r3,zero,c007224 <__alt_data_end+0xfc007224>
 c007778:	d8802415 	stw	r2,144(sp)
 c00777c:	002b883a 	mov	r21,zero
 c007780:	9504b03a 	or	r2,r18,r20
 c007784:	103e171e 	bne	r2,zero,c006fe4 <__alt_data_end+0xfc006fe4>
 c007788:	00800044 	movi	r2,1
 c00778c:	10803fcc 	andi	r2,r2,255
 c007790:	00c00044 	movi	r3,1
 c007794:	10c05c26 	beq	r2,r3,c007908 <___svfiprintf_internal_r+0x10d4>
 c007798:	00c00084 	movi	r3,2
 c00779c:	10fd1e26 	beq	r2,r3,c006c18 <__alt_data_end+0xfc006c18>
 c0077a0:	003ec406 	br	c0072b4 <__alt_data_end+0xfc0072b4>
 c0077a4:	d9401e17 	ldw	r5,120(sp)
 c0077a8:	2c69c83a 	sub	r20,r5,r17
 c0077ac:	003d4506 	br	c006cc4 <__alt_data_end+0xfc006cc4>
 c0077b0:	d8802415 	stw	r2,144(sp)
 c0077b4:	98c00007 	ldb	r3,0(r19)
 c0077b8:	003c6a06 	br	c006964 <__alt_data_end+0xfc006964>
 c0077bc:	d9402317 	ldw	r5,140(sp)
 c0077c0:	d9002717 	ldw	r4,156(sp)
 c0077c4:	d9801a04 	addi	r6,sp,104
 c0077c8:	c0066640 	call	c006664 <__ssprint_r>
 c0077cc:	103f591e 	bne	r2,zero,c007534 <__alt_data_end+0xfc007534>
 c0077d0:	d8c01c17 	ldw	r3,112(sp)
 c0077d4:	003f4406 	br	c0074e8 <__alt_data_end+0xfc0074e8>
 c0077d8:	01430074 	movhi	r5,3073
 c0077dc:	29789c04 	addi	r5,r5,-7568
 c0077e0:	d9402915 	stw	r5,164(sp)
 c0077e4:	003d0906 	br	c006c0c <__alt_data_end+0xfc006c0c>
 c0077e8:	d8c02417 	ldw	r3,144(sp)
 c0077ec:	d9002617 	ldw	r4,152(sp)
 c0077f0:	d9402417 	ldw	r5,144(sp)
 c0077f4:	18800017 	ldw	r2,0(r3)
 c0077f8:	2007d7fa 	srai	r3,r4,31
 c0077fc:	29400104 	addi	r5,r5,4
 c007800:	d9402415 	stw	r5,144(sp)
 c007804:	11000015 	stw	r4,0(r2)
 c007808:	10c00115 	stw	r3,4(r2)
 c00780c:	003c2b06 	br	c0068bc <__alt_data_end+0xfc0068bc>
 c007810:	d8c01d45 	stb	r3,117(sp)
 c007814:	d8c02017 	ldw	r3,128(sp)
 c007818:	00800c04 	movi	r2,48
 c00781c:	d8801d05 	stb	r2,116(sp)
 c007820:	d8001d85 	stb	zero,118(sp)
 c007824:	80800094 	ori	r2,r16,2
 c007828:	1800ac16 	blt	r3,zero,c007adc <___svfiprintf_internal_r+0x12a8>
 c00782c:	00bfdfc4 	movi	r2,-129
 c007830:	80a0703a 	and	r16,r16,r2
 c007834:	84000094 	ori	r16,r16,2
 c007838:	002b883a 	mov	r21,zero
 c00783c:	003cf806 	br	c006c20 <__alt_data_end+0xfc006c20>
 c007840:	98c00007 	ldb	r3,0(r19)
 c007844:	003c4706 	br	c006964 <__alt_data_end+0xfc006964>
 c007848:	d9402417 	ldw	r5,144(sp)
 c00784c:	2c800017 	ldw	r18,0(r5)
 c007850:	29400104 	addi	r5,r5,4
 c007854:	d9402415 	stw	r5,144(sp)
 c007858:	9029d7fa 	srai	r20,r18,31
 c00785c:	a005883a 	mov	r2,r20
 c007860:	003dd806 	br	c006fc4 <__alt_data_end+0xfc006fc4>
 c007864:	d9402417 	ldw	r5,144(sp)
 c007868:	0029883a 	mov	r20,zero
 c00786c:	2c800017 	ldw	r18,0(r5)
 c007870:	29400104 	addi	r5,r5,4
 c007874:	d9402415 	stw	r5,144(sp)
 c007878:	003cdb06 	br	c006be8 <__alt_data_end+0xfc006be8>
 c00787c:	8080100c 	andi	r2,r16,64
 c007880:	d8001d85 	stb	zero,118(sp)
 c007884:	10003326 	beq	r2,zero,c007954 <___svfiprintf_internal_r+0x1120>
 c007888:	d9002417 	ldw	r4,144(sp)
 c00788c:	d9402017 	ldw	r5,128(sp)
 c007890:	0029883a 	mov	r20,zero
 c007894:	20800104 	addi	r2,r4,4
 c007898:	2480000b 	ldhu	r18,0(r4)
 c00789c:	283e7e0e 	bge	r5,zero,c007298 <__alt_data_end+0xfc007298>
 c0078a0:	9506b03a 	or	r3,r18,r20
 c0078a4:	d8802415 	stw	r2,144(sp)
 c0078a8:	183d271e 	bne	r3,zero,c006d48 <__alt_data_end+0xfc006d48>
 c0078ac:	002b883a 	mov	r21,zero
 c0078b0:	0005883a 	mov	r2,zero
 c0078b4:	003fb506 	br	c00778c <__alt_data_end+0xfc00778c>
 c0078b8:	98c00043 	ldbu	r3,1(r19)
 c0078bc:	8c400814 	ori	r17,r17,32
 c0078c0:	9cc00044 	addi	r19,r19,1
 c0078c4:	18c03fcc 	andi	r3,r3,255
 c0078c8:	18c0201c 	xori	r3,r3,128
 c0078cc:	18ffe004 	addi	r3,r3,-128
 c0078d0:	003c2406 	br	c006964 <__alt_data_end+0xfc006964>
 c0078d4:	d8c02415 	stw	r3,144(sp)
 c0078d8:	002b883a 	mov	r21,zero
 c0078dc:	003fa806 	br	c007780 <__alt_data_end+0xfc007780>
 c0078e0:	01030074 	movhi	r4,3073
 c0078e4:	21389c04 	addi	r4,r4,-7568
 c0078e8:	d9002915 	stw	r4,164(sp)
 c0078ec:	d8c02415 	stw	r3,144(sp)
 c0078f0:	1021883a 	mov	r16,r2
 c0078f4:	9504b03a 	or	r2,r18,r20
 c0078f8:	103f8b1e 	bne	r2,zero,c007728 <__alt_data_end+0xfc007728>
 c0078fc:	002b883a 	mov	r21,zero
 c007900:	00800084 	movi	r2,2
 c007904:	003fa106 	br	c00778c <__alt_data_end+0xfc00778c>
 c007908:	0025883a 	mov	r18,zero
 c00790c:	94800c04 	addi	r18,r18,48
 c007910:	dc8019c5 	stb	r18,103(sp)
 c007914:	dd002c17 	ldw	r20,176(sp)
 c007918:	dc4019c4 	addi	r17,sp,103
 c00791c:	003ce906 	br	c006cc4 <__alt_data_end+0xfc006cc4>
 c007920:	d9402317 	ldw	r5,140(sp)
 c007924:	d9002717 	ldw	r4,156(sp)
 c007928:	d9801a04 	addi	r6,sp,104
 c00792c:	c0066640 	call	c006664 <__ssprint_r>
 c007930:	103f001e 	bne	r2,zero,c007534 <__alt_data_end+0xfc007534>
 c007934:	d8c01c17 	ldw	r3,112(sp)
 c007938:	d8801b17 	ldw	r2,108(sp)
 c00793c:	d811883a 	mov	r8,sp
 c007940:	003e7e06 	br	c00733c <__alt_data_end+0xfc00733c>
 c007944:	01430074 	movhi	r5,3073
 c007948:	2978fd04 	addi	r5,r5,-7180
 c00794c:	d9402115 	stw	r5,132(sp)
 c007950:	003ea406 	br	c0073e4 <__alt_data_end+0xfc0073e4>
 c007954:	d8c02417 	ldw	r3,144(sp)
 c007958:	d9002017 	ldw	r4,128(sp)
 c00795c:	0029883a 	mov	r20,zero
 c007960:	18800104 	addi	r2,r3,4
 c007964:	1c800017 	ldw	r18,0(r3)
 c007968:	203e4b0e 	bge	r4,zero,c007298 <__alt_data_end+0xfc007298>
 c00796c:	003fcc06 	br	c0078a0 <__alt_data_end+0xfc0078a0>
 c007970:	d9002417 	ldw	r4,144(sp)
 c007974:	d9402017 	ldw	r5,128(sp)
 c007978:	0029883a 	mov	r20,zero
 c00797c:	20800104 	addi	r2,r4,4
 c007980:	24800017 	ldw	r18,0(r4)
 c007984:	283e270e 	bge	r5,zero,c007224 <__alt_data_end+0xfc007224>
 c007988:	003f7b06 	br	c007778 <__alt_data_end+0xfc007778>
 c00798c:	8400100c 	andi	r16,r16,64
 c007990:	80003326 	beq	r16,zero,c007a60 <___svfiprintf_internal_r+0x122c>
 c007994:	d9402417 	ldw	r5,144(sp)
 c007998:	d8c02617 	ldw	r3,152(sp)
 c00799c:	28800017 	ldw	r2,0(r5)
 c0079a0:	29400104 	addi	r5,r5,4
 c0079a4:	d9402415 	stw	r5,144(sp)
 c0079a8:	10c0000d 	sth	r3,0(r2)
 c0079ac:	003bc306 	br	c0068bc <__alt_data_end+0xfc0068bc>
 c0079b0:	d9002417 	ldw	r4,144(sp)
 c0079b4:	0029883a 	mov	r20,zero
 c0079b8:	24800017 	ldw	r18,0(r4)
 c0079bc:	21000104 	addi	r4,r4,4
 c0079c0:	d9002415 	stw	r4,144(sp)
 c0079c4:	003c8806 	br	c006be8 <__alt_data_end+0xfc006be8>
 c0079c8:	d8c02417 	ldw	r3,144(sp)
 c0079cc:	1c800017 	ldw	r18,0(r3)
 c0079d0:	18c00104 	addi	r3,r3,4
 c0079d4:	d8c02415 	stw	r3,144(sp)
 c0079d8:	9029d7fa 	srai	r20,r18,31
 c0079dc:	a005883a 	mov	r2,r20
 c0079e0:	003d7806 	br	c006fc4 <__alt_data_end+0xfc006fc4>
 c0079e4:	8809883a 	mov	r4,r17
 c0079e8:	da002d15 	stw	r8,180(sp)
 c0079ec:	c000cf00 	call	c000cf0 <strlen>
 c0079f0:	1029883a 	mov	r20,r2
 c0079f4:	dd401d83 	ldbu	r21,118(sp)
 c0079f8:	ddc02415 	stw	r23,144(sp)
 c0079fc:	d8002015 	stw	zero,128(sp)
 c007a00:	da002d17 	ldw	r8,180(sp)
 c007a04:	003caf06 	br	c006cc4 <__alt_data_end+0xfc006cc4>
 c007a08:	013fffc4 	movi	r4,-1
 c007a0c:	003df206 	br	c0071d8 <__alt_data_end+0xfc0071d8>
 c007a10:	dd002017 	ldw	r20,128(sp)
 c007a14:	00800184 	movi	r2,6
 c007a18:	1500012e 	bgeu	r2,r20,c007a20 <___svfiprintf_internal_r+0x11ec>
 c007a1c:	1029883a 	mov	r20,r2
 c007a20:	a025883a 	mov	r18,r20
 c007a24:	a0004116 	blt	r20,zero,c007b2c <___svfiprintf_internal_r+0x12f8>
 c007a28:	04430074 	movhi	r17,3073
 c007a2c:	ddc02415 	stw	r23,144(sp)
 c007a30:	8c78a104 	addi	r17,r17,-7548
 c007a34:	003ce806 	br	c006dd8 <__alt_data_end+0xfc006dd8>
 c007a38:	04001004 	movi	r16,64
 c007a3c:	800b883a 	mov	r5,r16
 c007a40:	c0049d00 	call	c0049d0 <_malloc_r>
 c007a44:	d8c02317 	ldw	r3,140(sp)
 c007a48:	18800015 	stw	r2,0(r3)
 c007a4c:	18800415 	stw	r2,16(r3)
 c007a50:	10004d26 	beq	r2,zero,c007b88 <___svfiprintf_internal_r+0x1354>
 c007a54:	d9402317 	ldw	r5,140(sp)
 c007a58:	2c000515 	stw	r16,20(r5)
 c007a5c:	003b8906 	br	c006884 <__alt_data_end+0xfc006884>
 c007a60:	d9002417 	ldw	r4,144(sp)
 c007a64:	d9402617 	ldw	r5,152(sp)
 c007a68:	20800017 	ldw	r2,0(r4)
 c007a6c:	21000104 	addi	r4,r4,4
 c007a70:	d9002415 	stw	r4,144(sp)
 c007a74:	11400015 	stw	r5,0(r2)
 c007a78:	003b9006 	br	c0068bc <__alt_data_end+0xfc0068bc>
 c007a7c:	8080004c 	andi	r2,r16,1
 c007a80:	002b883a 	mov	r21,zero
 c007a84:	10000526 	beq	r2,zero,c007a9c <___svfiprintf_internal_r+0x1268>
 c007a88:	00800c04 	movi	r2,48
 c007a8c:	d88019c5 	stb	r2,103(sp)
 c007a90:	dd002c17 	ldw	r20,176(sp)
 c007a94:	dc4019c4 	addi	r17,sp,103
 c007a98:	003c8a06 	br	c006cc4 <__alt_data_end+0xfc006cc4>
 c007a9c:	0029883a 	mov	r20,zero
 c007aa0:	dc401a04 	addi	r17,sp,104
 c007aa4:	003c8706 	br	c006cc4 <__alt_data_end+0xfc006cc4>
 c007aa8:	01430074 	movhi	r5,3073
 c007aac:	29790104 	addi	r5,r5,-7164
 c007ab0:	d9402815 	stw	r5,160(sp)
 c007ab4:	003cff06 	br	c006eb4 <__alt_data_end+0xfc006eb4>
 c007ab8:	00bfffc4 	movi	r2,-1
 c007abc:	003ea206 	br	c007548 <__alt_data_end+0xfc007548>
 c007ac0:	00800044 	movi	r2,1
 c007ac4:	10803fcc 	andi	r2,r2,255
 c007ac8:	00c00044 	movi	r3,1
 c007acc:	10fd4526 	beq	r2,r3,c006fe4 <__alt_data_end+0xfc006fe4>
 c007ad0:	00c00084 	movi	r3,2
 c007ad4:	10fc5226 	beq	r2,r3,c006c20 <__alt_data_end+0xfc006c20>
 c007ad8:	003c9c06 	br	c006d4c <__alt_data_end+0xfc006d4c>
 c007adc:	1021883a 	mov	r16,r2
 c007ae0:	002b883a 	mov	r21,zero
 c007ae4:	00800084 	movi	r2,2
 c007ae8:	003ff606 	br	c007ac4 <__alt_data_end+0xfc007ac4>
 c007aec:	01030074 	movhi	r4,3073
 c007af0:	21390104 	addi	r4,r4,-7164
 c007af4:	d9002815 	stw	r4,160(sp)
 c007af8:	003e7206 	br	c0074c4 <__alt_data_end+0xfc0074c4>
 c007afc:	01430074 	movhi	r5,3073
 c007b00:	2978fd04 	addi	r5,r5,-7180
 c007b04:	d9402115 	stw	r5,132(sp)
 c007b08:	003ec506 	br	c007620 <__alt_data_end+0xfc007620>
 c007b0c:	e027883a 	mov	r19,fp
 c007b10:	d8002015 	stw	zero,128(sp)
 c007b14:	003b9406 	br	c006968 <__alt_data_end+0xfc006968>
 c007b18:	dd002017 	ldw	r20,128(sp)
 c007b1c:	dd401d83 	ldbu	r21,118(sp)
 c007b20:	ddc02415 	stw	r23,144(sp)
 c007b24:	d8002015 	stw	zero,128(sp)
 c007b28:	003c6606 	br	c006cc4 <__alt_data_end+0xfc006cc4>
 c007b2c:	0025883a 	mov	r18,zero
 c007b30:	003fbd06 	br	c007a28 <__alt_data_end+0xfc007a28>
 c007b34:	d9402417 	ldw	r5,144(sp)
 c007b38:	d8c02417 	ldw	r3,144(sp)
 c007b3c:	29400017 	ldw	r5,0(r5)
 c007b40:	19000104 	addi	r4,r3,4
 c007b44:	d9002415 	stw	r4,144(sp)
 c007b48:	d9402015 	stw	r5,128(sp)
 c007b4c:	98c00043 	ldbu	r3,1(r19)
 c007b50:	e027883a 	mov	r19,fp
 c007b54:	283f5b0e 	bge	r5,zero,c0078c4 <__alt_data_end+0xfc0078c4>
 c007b58:	18c03fcc 	andi	r3,r3,255
 c007b5c:	013fffc4 	movi	r4,-1
 c007b60:	18c0201c 	xori	r3,r3,128
 c007b64:	d9002015 	stw	r4,128(sp)
 c007b68:	18ffe004 	addi	r3,r3,-128
 c007b6c:	003b7d06 	br	c006964 <__alt_data_end+0xfc006964>
 c007b70:	dd401d85 	stb	r21,118(sp)
 c007b74:	003cf306 	br	c006f44 <__alt_data_end+0xfc006f44>
 c007b78:	dd401d85 	stb	r21,118(sp)
 c007b7c:	003d4e06 	br	c0070b8 <__alt_data_end+0xfc0070b8>
 c007b80:	dd401d85 	stb	r21,118(sp)
 c007b84:	003c0e06 	br	c006bc0 <__alt_data_end+0xfc006bc0>
 c007b88:	d9002717 	ldw	r4,156(sp)
 c007b8c:	00800304 	movi	r2,12
 c007b90:	20800015 	stw	r2,0(r4)
 c007b94:	00bfffc4 	movi	r2,-1
 c007b98:	003e6b06 	br	c007548 <__alt_data_end+0xfc007548>
 c007b9c:	dd401d85 	stb	r21,118(sp)
 c007ba0:	003d0006 	br	c006fa4 <__alt_data_end+0xfc006fa4>
 c007ba4:	dd401d85 	stb	r21,118(sp)
 c007ba8:	003d7106 	br	c007170 <__alt_data_end+0xfc007170>
 c007bac:	dd401d85 	stb	r21,118(sp)
 c007bb0:	003c5706 	br	c006d10 <__alt_data_end+0xfc006d10>
 c007bb4:	dd401d85 	stb	r21,118(sp)
 c007bb8:	003c2e06 	br	c006c74 <__alt_data_end+0xfc006c74>
 c007bbc:	dd401d85 	stb	r21,118(sp)
 c007bc0:	003d8c06 	br	c0071f4 <__alt_data_end+0xfc0071f4>
 c007bc4:	dd401d85 	stb	r21,118(sp)
 c007bc8:	003da706 	br	c007268 <__alt_data_end+0xfc007268>
 c007bcc:	dd401d85 	stb	r21,118(sp)
 c007bd0:	003cc806 	br	c006ef4 <__alt_data_end+0xfc006ef4>

0c007bd4 <_calloc_r>:
 c007bd4:	defffe04 	addi	sp,sp,-8
 c007bd8:	2805883a 	mov	r2,r5
 c007bdc:	dc000015 	stw	r16,0(sp)
 c007be0:	300b883a 	mov	r5,r6
 c007be4:	2021883a 	mov	r16,r4
 c007be8:	1009883a 	mov	r4,r2
 c007bec:	dfc00115 	stw	ra,4(sp)
 c007bf0:	c000b880 	call	c000b88 <__mulsi3>
 c007bf4:	100b883a 	mov	r5,r2
 c007bf8:	8009883a 	mov	r4,r16
 c007bfc:	c0049d00 	call	c0049d0 <_malloc_r>
 c007c00:	10002926 	beq	r2,zero,c007ca8 <_calloc_r+0xd4>
 c007c04:	11bfff17 	ldw	r6,-4(r2)
 c007c08:	1021883a 	mov	r16,r2
 c007c0c:	00bfff04 	movi	r2,-4
 c007c10:	308c703a 	and	r6,r6,r2
 c007c14:	00c00904 	movi	r3,36
 c007c18:	308d883a 	add	r6,r6,r2
 c007c1c:	19801636 	bltu	r3,r6,c007c78 <_calloc_r+0xa4>
 c007c20:	008004c4 	movi	r2,19
 c007c24:	11800b2e 	bgeu	r2,r6,c007c54 <_calloc_r+0x80>
 c007c28:	80000015 	stw	zero,0(r16)
 c007c2c:	80000115 	stw	zero,4(r16)
 c007c30:	008006c4 	movi	r2,27
 c007c34:	11801a2e 	bgeu	r2,r6,c007ca0 <_calloc_r+0xcc>
 c007c38:	80000215 	stw	zero,8(r16)
 c007c3c:	80000315 	stw	zero,12(r16)
 c007c40:	30c0151e 	bne	r6,r3,c007c98 <_calloc_r+0xc4>
 c007c44:	80000415 	stw	zero,16(r16)
 c007c48:	80800604 	addi	r2,r16,24
 c007c4c:	80000515 	stw	zero,20(r16)
 c007c50:	00000106 	br	c007c58 <_calloc_r+0x84>
 c007c54:	8005883a 	mov	r2,r16
 c007c58:	10000015 	stw	zero,0(r2)
 c007c5c:	10000115 	stw	zero,4(r2)
 c007c60:	10000215 	stw	zero,8(r2)
 c007c64:	8005883a 	mov	r2,r16
 c007c68:	dfc00117 	ldw	ra,4(sp)
 c007c6c:	dc000017 	ldw	r16,0(sp)
 c007c70:	dec00204 	addi	sp,sp,8
 c007c74:	f800283a 	ret
 c007c78:	000b883a 	mov	r5,zero
 c007c7c:	8009883a 	mov	r4,r16
 c007c80:	c0082400 	call	c008240 <memset>
 c007c84:	8005883a 	mov	r2,r16
 c007c88:	dfc00117 	ldw	ra,4(sp)
 c007c8c:	dc000017 	ldw	r16,0(sp)
 c007c90:	dec00204 	addi	sp,sp,8
 c007c94:	f800283a 	ret
 c007c98:	80800404 	addi	r2,r16,16
 c007c9c:	003fee06 	br	c007c58 <__alt_data_end+0xfc007c58>
 c007ca0:	80800204 	addi	r2,r16,8
 c007ca4:	003fec06 	br	c007c58 <__alt_data_end+0xfc007c58>
 c007ca8:	0005883a 	mov	r2,zero
 c007cac:	003fee06 	br	c007c68 <__alt_data_end+0xfc007c68>

0c007cb0 <_malloc_trim_r>:
 c007cb0:	defffb04 	addi	sp,sp,-20
 c007cb4:	dcc00315 	stw	r19,12(sp)
 c007cb8:	04c30074 	movhi	r19,3073
 c007cbc:	dc800215 	stw	r18,8(sp)
 c007cc0:	dc400115 	stw	r17,4(sp)
 c007cc4:	dc000015 	stw	r16,0(sp)
 c007cc8:	dfc00415 	stw	ra,16(sp)
 c007ccc:	2821883a 	mov	r16,r5
 c007cd0:	9cfb3104 	addi	r19,r19,-4924
 c007cd4:	2025883a 	mov	r18,r4
 c007cd8:	c00bfa40 	call	c00bfa4 <__malloc_lock>
 c007cdc:	98800217 	ldw	r2,8(r19)
 c007ce0:	14400117 	ldw	r17,4(r2)
 c007ce4:	00bfff04 	movi	r2,-4
 c007ce8:	88a2703a 	and	r17,r17,r2
 c007cec:	8c21c83a 	sub	r16,r17,r16
 c007cf0:	8403fbc4 	addi	r16,r16,4079
 c007cf4:	8020d33a 	srli	r16,r16,12
 c007cf8:	0083ffc4 	movi	r2,4095
 c007cfc:	843fffc4 	addi	r16,r16,-1
 c007d00:	8020933a 	slli	r16,r16,12
 c007d04:	1400060e 	bge	r2,r16,c007d20 <_malloc_trim_r+0x70>
 c007d08:	000b883a 	mov	r5,zero
 c007d0c:	9009883a 	mov	r4,r18
 c007d10:	c0065340 	call	c006534 <_sbrk_r>
 c007d14:	98c00217 	ldw	r3,8(r19)
 c007d18:	1c47883a 	add	r3,r3,r17
 c007d1c:	10c00a26 	beq	r2,r3,c007d48 <_malloc_trim_r+0x98>
 c007d20:	9009883a 	mov	r4,r18
 c007d24:	c00bfc80 	call	c00bfc8 <__malloc_unlock>
 c007d28:	0005883a 	mov	r2,zero
 c007d2c:	dfc00417 	ldw	ra,16(sp)
 c007d30:	dcc00317 	ldw	r19,12(sp)
 c007d34:	dc800217 	ldw	r18,8(sp)
 c007d38:	dc400117 	ldw	r17,4(sp)
 c007d3c:	dc000017 	ldw	r16,0(sp)
 c007d40:	dec00504 	addi	sp,sp,20
 c007d44:	f800283a 	ret
 c007d48:	040bc83a 	sub	r5,zero,r16
 c007d4c:	9009883a 	mov	r4,r18
 c007d50:	c0065340 	call	c006534 <_sbrk_r>
 c007d54:	00ffffc4 	movi	r3,-1
 c007d58:	10c00d26 	beq	r2,r3,c007d90 <_malloc_trim_r+0xe0>
 c007d5c:	00c30074 	movhi	r3,3073
 c007d60:	18c84804 	addi	r3,r3,8480
 c007d64:	18800017 	ldw	r2,0(r3)
 c007d68:	99000217 	ldw	r4,8(r19)
 c007d6c:	8c23c83a 	sub	r17,r17,r16
 c007d70:	8c400054 	ori	r17,r17,1
 c007d74:	1421c83a 	sub	r16,r2,r16
 c007d78:	24400115 	stw	r17,4(r4)
 c007d7c:	9009883a 	mov	r4,r18
 c007d80:	1c000015 	stw	r16,0(r3)
 c007d84:	c00bfc80 	call	c00bfc8 <__malloc_unlock>
 c007d88:	00800044 	movi	r2,1
 c007d8c:	003fe706 	br	c007d2c <__alt_data_end+0xfc007d2c>
 c007d90:	000b883a 	mov	r5,zero
 c007d94:	9009883a 	mov	r4,r18
 c007d98:	c0065340 	call	c006534 <_sbrk_r>
 c007d9c:	99000217 	ldw	r4,8(r19)
 c007da0:	014003c4 	movi	r5,15
 c007da4:	1107c83a 	sub	r3,r2,r4
 c007da8:	28ffdd0e 	bge	r5,r3,c007d20 <__alt_data_end+0xfc007d20>
 c007dac:	01430074 	movhi	r5,3073
 c007db0:	2940ba04 	addi	r5,r5,744
 c007db4:	29400017 	ldw	r5,0(r5)
 c007db8:	18c00054 	ori	r3,r3,1
 c007dbc:	20c00115 	stw	r3,4(r4)
 c007dc0:	00c30074 	movhi	r3,3073
 c007dc4:	1145c83a 	sub	r2,r2,r5
 c007dc8:	18c84804 	addi	r3,r3,8480
 c007dcc:	18800015 	stw	r2,0(r3)
 c007dd0:	003fd306 	br	c007d20 <__alt_data_end+0xfc007d20>

0c007dd4 <_free_r>:
 c007dd4:	28004126 	beq	r5,zero,c007edc <_free_r+0x108>
 c007dd8:	defffd04 	addi	sp,sp,-12
 c007ddc:	dc400115 	stw	r17,4(sp)
 c007de0:	dc000015 	stw	r16,0(sp)
 c007de4:	2023883a 	mov	r17,r4
 c007de8:	2821883a 	mov	r16,r5
 c007dec:	dfc00215 	stw	ra,8(sp)
 c007df0:	c00bfa40 	call	c00bfa4 <__malloc_lock>
 c007df4:	81ffff17 	ldw	r7,-4(r16)
 c007df8:	00bfff84 	movi	r2,-2
 c007dfc:	01030074 	movhi	r4,3073
 c007e00:	81bffe04 	addi	r6,r16,-8
 c007e04:	3884703a 	and	r2,r7,r2
 c007e08:	213b3104 	addi	r4,r4,-4924
 c007e0c:	308b883a 	add	r5,r6,r2
 c007e10:	2a400117 	ldw	r9,4(r5)
 c007e14:	22000217 	ldw	r8,8(r4)
 c007e18:	00ffff04 	movi	r3,-4
 c007e1c:	48c6703a 	and	r3,r9,r3
 c007e20:	2a005726 	beq	r5,r8,c007f80 <_free_r+0x1ac>
 c007e24:	28c00115 	stw	r3,4(r5)
 c007e28:	39c0004c 	andi	r7,r7,1
 c007e2c:	3800091e 	bne	r7,zero,c007e54 <_free_r+0x80>
 c007e30:	823ffe17 	ldw	r8,-8(r16)
 c007e34:	22400204 	addi	r9,r4,8
 c007e38:	320dc83a 	sub	r6,r6,r8
 c007e3c:	31c00217 	ldw	r7,8(r6)
 c007e40:	1205883a 	add	r2,r2,r8
 c007e44:	3a406526 	beq	r7,r9,c007fdc <_free_r+0x208>
 c007e48:	32000317 	ldw	r8,12(r6)
 c007e4c:	3a000315 	stw	r8,12(r7)
 c007e50:	41c00215 	stw	r7,8(r8)
 c007e54:	28cf883a 	add	r7,r5,r3
 c007e58:	39c00117 	ldw	r7,4(r7)
 c007e5c:	39c0004c 	andi	r7,r7,1
 c007e60:	38003a26 	beq	r7,zero,c007f4c <_free_r+0x178>
 c007e64:	10c00054 	ori	r3,r2,1
 c007e68:	30c00115 	stw	r3,4(r6)
 c007e6c:	3087883a 	add	r3,r6,r2
 c007e70:	18800015 	stw	r2,0(r3)
 c007e74:	00c07fc4 	movi	r3,511
 c007e78:	18801936 	bltu	r3,r2,c007ee0 <_free_r+0x10c>
 c007e7c:	1004d0fa 	srli	r2,r2,3
 c007e80:	01c00044 	movi	r7,1
 c007e84:	21400117 	ldw	r5,4(r4)
 c007e88:	10c00044 	addi	r3,r2,1
 c007e8c:	18c7883a 	add	r3,r3,r3
 c007e90:	1005d0ba 	srai	r2,r2,2
 c007e94:	18c7883a 	add	r3,r3,r3
 c007e98:	18c7883a 	add	r3,r3,r3
 c007e9c:	1907883a 	add	r3,r3,r4
 c007ea0:	3884983a 	sll	r2,r7,r2
 c007ea4:	19c00017 	ldw	r7,0(r3)
 c007ea8:	1a3ffe04 	addi	r8,r3,-8
 c007eac:	1144b03a 	or	r2,r2,r5
 c007eb0:	32000315 	stw	r8,12(r6)
 c007eb4:	31c00215 	stw	r7,8(r6)
 c007eb8:	20800115 	stw	r2,4(r4)
 c007ebc:	19800015 	stw	r6,0(r3)
 c007ec0:	39800315 	stw	r6,12(r7)
 c007ec4:	8809883a 	mov	r4,r17
 c007ec8:	dfc00217 	ldw	ra,8(sp)
 c007ecc:	dc400117 	ldw	r17,4(sp)
 c007ed0:	dc000017 	ldw	r16,0(sp)
 c007ed4:	dec00304 	addi	sp,sp,12
 c007ed8:	c00bfc81 	jmpi	c00bfc8 <__malloc_unlock>
 c007edc:	f800283a 	ret
 c007ee0:	100ad27a 	srli	r5,r2,9
 c007ee4:	00c00104 	movi	r3,4
 c007ee8:	19404a36 	bltu	r3,r5,c008014 <_free_r+0x240>
 c007eec:	100ad1ba 	srli	r5,r2,6
 c007ef0:	28c00e44 	addi	r3,r5,57
 c007ef4:	18c7883a 	add	r3,r3,r3
 c007ef8:	29400e04 	addi	r5,r5,56
 c007efc:	18c7883a 	add	r3,r3,r3
 c007f00:	18c7883a 	add	r3,r3,r3
 c007f04:	1909883a 	add	r4,r3,r4
 c007f08:	20c00017 	ldw	r3,0(r4)
 c007f0c:	01c30074 	movhi	r7,3073
 c007f10:	213ffe04 	addi	r4,r4,-8
 c007f14:	39fb3104 	addi	r7,r7,-4924
 c007f18:	20c04426 	beq	r4,r3,c00802c <_free_r+0x258>
 c007f1c:	01ffff04 	movi	r7,-4
 c007f20:	19400117 	ldw	r5,4(r3)
 c007f24:	29ca703a 	and	r5,r5,r7
 c007f28:	1140022e 	bgeu	r2,r5,c007f34 <_free_r+0x160>
 c007f2c:	18c00217 	ldw	r3,8(r3)
 c007f30:	20fffb1e 	bne	r4,r3,c007f20 <__alt_data_end+0xfc007f20>
 c007f34:	19000317 	ldw	r4,12(r3)
 c007f38:	31000315 	stw	r4,12(r6)
 c007f3c:	30c00215 	stw	r3,8(r6)
 c007f40:	21800215 	stw	r6,8(r4)
 c007f44:	19800315 	stw	r6,12(r3)
 c007f48:	003fde06 	br	c007ec4 <__alt_data_end+0xfc007ec4>
 c007f4c:	29c00217 	ldw	r7,8(r5)
 c007f50:	10c5883a 	add	r2,r2,r3
 c007f54:	00c30074 	movhi	r3,3073
 c007f58:	18fb3304 	addi	r3,r3,-4916
 c007f5c:	38c03b26 	beq	r7,r3,c00804c <_free_r+0x278>
 c007f60:	2a000317 	ldw	r8,12(r5)
 c007f64:	11400054 	ori	r5,r2,1
 c007f68:	3087883a 	add	r3,r6,r2
 c007f6c:	3a000315 	stw	r8,12(r7)
 c007f70:	41c00215 	stw	r7,8(r8)
 c007f74:	31400115 	stw	r5,4(r6)
 c007f78:	18800015 	stw	r2,0(r3)
 c007f7c:	003fbd06 	br	c007e74 <__alt_data_end+0xfc007e74>
 c007f80:	39c0004c 	andi	r7,r7,1
 c007f84:	10c5883a 	add	r2,r2,r3
 c007f88:	3800071e 	bne	r7,zero,c007fa8 <_free_r+0x1d4>
 c007f8c:	81fffe17 	ldw	r7,-8(r16)
 c007f90:	31cdc83a 	sub	r6,r6,r7
 c007f94:	30c00317 	ldw	r3,12(r6)
 c007f98:	31400217 	ldw	r5,8(r6)
 c007f9c:	11c5883a 	add	r2,r2,r7
 c007fa0:	28c00315 	stw	r3,12(r5)
 c007fa4:	19400215 	stw	r5,8(r3)
 c007fa8:	10c00054 	ori	r3,r2,1
 c007fac:	30c00115 	stw	r3,4(r6)
 c007fb0:	00c30074 	movhi	r3,3073
 c007fb4:	18c0bb04 	addi	r3,r3,748
 c007fb8:	18c00017 	ldw	r3,0(r3)
 c007fbc:	21800215 	stw	r6,8(r4)
 c007fc0:	10ffc036 	bltu	r2,r3,c007ec4 <__alt_data_end+0xfc007ec4>
 c007fc4:	00830074 	movhi	r2,3073
 c007fc8:	10883f04 	addi	r2,r2,8444
 c007fcc:	11400017 	ldw	r5,0(r2)
 c007fd0:	8809883a 	mov	r4,r17
 c007fd4:	c007cb00 	call	c007cb0 <_malloc_trim_r>
 c007fd8:	003fba06 	br	c007ec4 <__alt_data_end+0xfc007ec4>
 c007fdc:	28c9883a 	add	r4,r5,r3
 c007fe0:	21000117 	ldw	r4,4(r4)
 c007fe4:	2100004c 	andi	r4,r4,1
 c007fe8:	2000391e 	bne	r4,zero,c0080d0 <_free_r+0x2fc>
 c007fec:	29c00217 	ldw	r7,8(r5)
 c007ff0:	29000317 	ldw	r4,12(r5)
 c007ff4:	1885883a 	add	r2,r3,r2
 c007ff8:	10c00054 	ori	r3,r2,1
 c007ffc:	39000315 	stw	r4,12(r7)
 c008000:	21c00215 	stw	r7,8(r4)
 c008004:	30c00115 	stw	r3,4(r6)
 c008008:	308d883a 	add	r6,r6,r2
 c00800c:	30800015 	stw	r2,0(r6)
 c008010:	003fac06 	br	c007ec4 <__alt_data_end+0xfc007ec4>
 c008014:	00c00504 	movi	r3,20
 c008018:	19401536 	bltu	r3,r5,c008070 <_free_r+0x29c>
 c00801c:	28c01704 	addi	r3,r5,92
 c008020:	18c7883a 	add	r3,r3,r3
 c008024:	294016c4 	addi	r5,r5,91
 c008028:	003fb406 	br	c007efc <__alt_data_end+0xfc007efc>
 c00802c:	280bd0ba 	srai	r5,r5,2
 c008030:	00c00044 	movi	r3,1
 c008034:	38800117 	ldw	r2,4(r7)
 c008038:	194a983a 	sll	r5,r3,r5
 c00803c:	2007883a 	mov	r3,r4
 c008040:	2884b03a 	or	r2,r5,r2
 c008044:	38800115 	stw	r2,4(r7)
 c008048:	003fbb06 	br	c007f38 <__alt_data_end+0xfc007f38>
 c00804c:	21800515 	stw	r6,20(r4)
 c008050:	21800415 	stw	r6,16(r4)
 c008054:	10c00054 	ori	r3,r2,1
 c008058:	31c00315 	stw	r7,12(r6)
 c00805c:	31c00215 	stw	r7,8(r6)
 c008060:	30c00115 	stw	r3,4(r6)
 c008064:	308d883a 	add	r6,r6,r2
 c008068:	30800015 	stw	r2,0(r6)
 c00806c:	003f9506 	br	c007ec4 <__alt_data_end+0xfc007ec4>
 c008070:	00c01504 	movi	r3,84
 c008074:	19400536 	bltu	r3,r5,c00808c <_free_r+0x2b8>
 c008078:	100ad33a 	srli	r5,r2,12
 c00807c:	28c01bc4 	addi	r3,r5,111
 c008080:	18c7883a 	add	r3,r3,r3
 c008084:	29401b84 	addi	r5,r5,110
 c008088:	003f9c06 	br	c007efc <__alt_data_end+0xfc007efc>
 c00808c:	00c05504 	movi	r3,340
 c008090:	19400536 	bltu	r3,r5,c0080a8 <_free_r+0x2d4>
 c008094:	100ad3fa 	srli	r5,r2,15
 c008098:	28c01e04 	addi	r3,r5,120
 c00809c:	18c7883a 	add	r3,r3,r3
 c0080a0:	29401dc4 	addi	r5,r5,119
 c0080a4:	003f9506 	br	c007efc <__alt_data_end+0xfc007efc>
 c0080a8:	00c15504 	movi	r3,1364
 c0080ac:	19400536 	bltu	r3,r5,c0080c4 <_free_r+0x2f0>
 c0080b0:	100ad4ba 	srli	r5,r2,18
 c0080b4:	28c01f44 	addi	r3,r5,125
 c0080b8:	18c7883a 	add	r3,r3,r3
 c0080bc:	29401f04 	addi	r5,r5,124
 c0080c0:	003f8e06 	br	c007efc <__alt_data_end+0xfc007efc>
 c0080c4:	00c03f84 	movi	r3,254
 c0080c8:	01401f84 	movi	r5,126
 c0080cc:	003f8b06 	br	c007efc <__alt_data_end+0xfc007efc>
 c0080d0:	10c00054 	ori	r3,r2,1
 c0080d4:	30c00115 	stw	r3,4(r6)
 c0080d8:	308d883a 	add	r6,r6,r2
 c0080dc:	30800015 	stw	r2,0(r6)
 c0080e0:	003f7806 	br	c007ec4 <__alt_data_end+0xfc007ec4>

0c0080e4 <memmove>:
 c0080e4:	2005883a 	mov	r2,r4
 c0080e8:	29000b2e 	bgeu	r5,r4,c008118 <memmove+0x34>
 c0080ec:	298f883a 	add	r7,r5,r6
 c0080f0:	21c0092e 	bgeu	r4,r7,c008118 <memmove+0x34>
 c0080f4:	2187883a 	add	r3,r4,r6
 c0080f8:	198bc83a 	sub	r5,r3,r6
 c0080fc:	30004826 	beq	r6,zero,c008220 <memmove+0x13c>
 c008100:	39ffffc4 	addi	r7,r7,-1
 c008104:	39000003 	ldbu	r4,0(r7)
 c008108:	18ffffc4 	addi	r3,r3,-1
 c00810c:	19000005 	stb	r4,0(r3)
 c008110:	28fffb1e 	bne	r5,r3,c008100 <__alt_data_end+0xfc008100>
 c008114:	f800283a 	ret
 c008118:	00c003c4 	movi	r3,15
 c00811c:	1980412e 	bgeu	r3,r6,c008224 <memmove+0x140>
 c008120:	2886b03a 	or	r3,r5,r2
 c008124:	18c000cc 	andi	r3,r3,3
 c008128:	1800401e 	bne	r3,zero,c00822c <memmove+0x148>
 c00812c:	33fffc04 	addi	r15,r6,-16
 c008130:	781ed13a 	srli	r15,r15,4
 c008134:	28c00104 	addi	r3,r5,4
 c008138:	13400104 	addi	r13,r2,4
 c00813c:	781c913a 	slli	r14,r15,4
 c008140:	2b000204 	addi	r12,r5,8
 c008144:	12c00204 	addi	r11,r2,8
 c008148:	73800504 	addi	r14,r14,20
 c00814c:	2a800304 	addi	r10,r5,12
 c008150:	12400304 	addi	r9,r2,12
 c008154:	2b9d883a 	add	r14,r5,r14
 c008158:	2811883a 	mov	r8,r5
 c00815c:	100f883a 	mov	r7,r2
 c008160:	41000017 	ldw	r4,0(r8)
 c008164:	39c00404 	addi	r7,r7,16
 c008168:	18c00404 	addi	r3,r3,16
 c00816c:	393ffc15 	stw	r4,-16(r7)
 c008170:	193ffc17 	ldw	r4,-16(r3)
 c008174:	6b400404 	addi	r13,r13,16
 c008178:	5ac00404 	addi	r11,r11,16
 c00817c:	693ffc15 	stw	r4,-16(r13)
 c008180:	61000017 	ldw	r4,0(r12)
 c008184:	4a400404 	addi	r9,r9,16
 c008188:	42000404 	addi	r8,r8,16
 c00818c:	593ffc15 	stw	r4,-16(r11)
 c008190:	51000017 	ldw	r4,0(r10)
 c008194:	63000404 	addi	r12,r12,16
 c008198:	52800404 	addi	r10,r10,16
 c00819c:	493ffc15 	stw	r4,-16(r9)
 c0081a0:	1bbfef1e 	bne	r3,r14,c008160 <__alt_data_end+0xfc008160>
 c0081a4:	79000044 	addi	r4,r15,1
 c0081a8:	2008913a 	slli	r4,r4,4
 c0081ac:	328003cc 	andi	r10,r6,15
 c0081b0:	02c000c4 	movi	r11,3
 c0081b4:	1107883a 	add	r3,r2,r4
 c0081b8:	290b883a 	add	r5,r5,r4
 c0081bc:	5a801e2e 	bgeu	r11,r10,c008238 <memmove+0x154>
 c0081c0:	1813883a 	mov	r9,r3
 c0081c4:	2811883a 	mov	r8,r5
 c0081c8:	500f883a 	mov	r7,r10
 c0081cc:	41000017 	ldw	r4,0(r8)
 c0081d0:	4a400104 	addi	r9,r9,4
 c0081d4:	39ffff04 	addi	r7,r7,-4
 c0081d8:	493fff15 	stw	r4,-4(r9)
 c0081dc:	42000104 	addi	r8,r8,4
 c0081e0:	59fffa36 	bltu	r11,r7,c0081cc <__alt_data_end+0xfc0081cc>
 c0081e4:	513fff04 	addi	r4,r10,-4
 c0081e8:	2008d0ba 	srli	r4,r4,2
 c0081ec:	318000cc 	andi	r6,r6,3
 c0081f0:	21000044 	addi	r4,r4,1
 c0081f4:	2109883a 	add	r4,r4,r4
 c0081f8:	2109883a 	add	r4,r4,r4
 c0081fc:	1907883a 	add	r3,r3,r4
 c008200:	290b883a 	add	r5,r5,r4
 c008204:	30000b26 	beq	r6,zero,c008234 <memmove+0x150>
 c008208:	198d883a 	add	r6,r3,r6
 c00820c:	29c00003 	ldbu	r7,0(r5)
 c008210:	18c00044 	addi	r3,r3,1
 c008214:	29400044 	addi	r5,r5,1
 c008218:	19ffffc5 	stb	r7,-1(r3)
 c00821c:	19bffb1e 	bne	r3,r6,c00820c <__alt_data_end+0xfc00820c>
 c008220:	f800283a 	ret
 c008224:	1007883a 	mov	r3,r2
 c008228:	003ff606 	br	c008204 <__alt_data_end+0xfc008204>
 c00822c:	1007883a 	mov	r3,r2
 c008230:	003ff506 	br	c008208 <__alt_data_end+0xfc008208>
 c008234:	f800283a 	ret
 c008238:	500d883a 	mov	r6,r10
 c00823c:	003ff106 	br	c008204 <__alt_data_end+0xfc008204>

0c008240 <memset>:
 c008240:	20c000cc 	andi	r3,r4,3
 c008244:	2005883a 	mov	r2,r4
 c008248:	18004426 	beq	r3,zero,c00835c <memset+0x11c>
 c00824c:	31ffffc4 	addi	r7,r6,-1
 c008250:	30004026 	beq	r6,zero,c008354 <memset+0x114>
 c008254:	2813883a 	mov	r9,r5
 c008258:	200d883a 	mov	r6,r4
 c00825c:	2007883a 	mov	r3,r4
 c008260:	00000406 	br	c008274 <memset+0x34>
 c008264:	3a3fffc4 	addi	r8,r7,-1
 c008268:	31800044 	addi	r6,r6,1
 c00826c:	38003926 	beq	r7,zero,c008354 <memset+0x114>
 c008270:	400f883a 	mov	r7,r8
 c008274:	18c00044 	addi	r3,r3,1
 c008278:	32400005 	stb	r9,0(r6)
 c00827c:	1a0000cc 	andi	r8,r3,3
 c008280:	403ff81e 	bne	r8,zero,c008264 <__alt_data_end+0xfc008264>
 c008284:	010000c4 	movi	r4,3
 c008288:	21c02d2e 	bgeu	r4,r7,c008340 <memset+0x100>
 c00828c:	29003fcc 	andi	r4,r5,255
 c008290:	200c923a 	slli	r6,r4,8
 c008294:	3108b03a 	or	r4,r6,r4
 c008298:	200c943a 	slli	r6,r4,16
 c00829c:	218cb03a 	or	r6,r4,r6
 c0082a0:	010003c4 	movi	r4,15
 c0082a4:	21c0182e 	bgeu	r4,r7,c008308 <memset+0xc8>
 c0082a8:	3b3ffc04 	addi	r12,r7,-16
 c0082ac:	6018d13a 	srli	r12,r12,4
 c0082b0:	1a000104 	addi	r8,r3,4
 c0082b4:	1ac00204 	addi	r11,r3,8
 c0082b8:	6008913a 	slli	r4,r12,4
 c0082bc:	1a800304 	addi	r10,r3,12
 c0082c0:	1813883a 	mov	r9,r3
 c0082c4:	21000504 	addi	r4,r4,20
 c0082c8:	1909883a 	add	r4,r3,r4
 c0082cc:	49800015 	stw	r6,0(r9)
 c0082d0:	41800015 	stw	r6,0(r8)
 c0082d4:	59800015 	stw	r6,0(r11)
 c0082d8:	51800015 	stw	r6,0(r10)
 c0082dc:	42000404 	addi	r8,r8,16
 c0082e0:	4a400404 	addi	r9,r9,16
 c0082e4:	5ac00404 	addi	r11,r11,16
 c0082e8:	52800404 	addi	r10,r10,16
 c0082ec:	413ff71e 	bne	r8,r4,c0082cc <__alt_data_end+0xfc0082cc>
 c0082f0:	63000044 	addi	r12,r12,1
 c0082f4:	6018913a 	slli	r12,r12,4
 c0082f8:	39c003cc 	andi	r7,r7,15
 c0082fc:	010000c4 	movi	r4,3
 c008300:	1b07883a 	add	r3,r3,r12
 c008304:	21c00e2e 	bgeu	r4,r7,c008340 <memset+0x100>
 c008308:	1813883a 	mov	r9,r3
 c00830c:	3811883a 	mov	r8,r7
 c008310:	010000c4 	movi	r4,3
 c008314:	49800015 	stw	r6,0(r9)
 c008318:	423fff04 	addi	r8,r8,-4
 c00831c:	4a400104 	addi	r9,r9,4
 c008320:	223ffc36 	bltu	r4,r8,c008314 <__alt_data_end+0xfc008314>
 c008324:	393fff04 	addi	r4,r7,-4
 c008328:	2008d0ba 	srli	r4,r4,2
 c00832c:	39c000cc 	andi	r7,r7,3
 c008330:	21000044 	addi	r4,r4,1
 c008334:	2109883a 	add	r4,r4,r4
 c008338:	2109883a 	add	r4,r4,r4
 c00833c:	1907883a 	add	r3,r3,r4
 c008340:	38000526 	beq	r7,zero,c008358 <memset+0x118>
 c008344:	19cf883a 	add	r7,r3,r7
 c008348:	19400005 	stb	r5,0(r3)
 c00834c:	18c00044 	addi	r3,r3,1
 c008350:	38fffd1e 	bne	r7,r3,c008348 <__alt_data_end+0xfc008348>
 c008354:	f800283a 	ret
 c008358:	f800283a 	ret
 c00835c:	2007883a 	mov	r3,r4
 c008360:	300f883a 	mov	r7,r6
 c008364:	003fc706 	br	c008284 <__alt_data_end+0xfc008284>

0c008368 <_realloc_r>:
 c008368:	defff604 	addi	sp,sp,-40
 c00836c:	dc800215 	stw	r18,8(sp)
 c008370:	dfc00915 	stw	ra,36(sp)
 c008374:	df000815 	stw	fp,32(sp)
 c008378:	ddc00715 	stw	r23,28(sp)
 c00837c:	dd800615 	stw	r22,24(sp)
 c008380:	dd400515 	stw	r21,20(sp)
 c008384:	dd000415 	stw	r20,16(sp)
 c008388:	dcc00315 	stw	r19,12(sp)
 c00838c:	dc400115 	stw	r17,4(sp)
 c008390:	dc000015 	stw	r16,0(sp)
 c008394:	3025883a 	mov	r18,r6
 c008398:	2800b726 	beq	r5,zero,c008678 <_realloc_r+0x310>
 c00839c:	282b883a 	mov	r21,r5
 c0083a0:	2029883a 	mov	r20,r4
 c0083a4:	c00bfa40 	call	c00bfa4 <__malloc_lock>
 c0083a8:	a8bfff17 	ldw	r2,-4(r21)
 c0083ac:	043fff04 	movi	r16,-4
 c0083b0:	90c002c4 	addi	r3,r18,11
 c0083b4:	01000584 	movi	r4,22
 c0083b8:	acfffe04 	addi	r19,r21,-8
 c0083bc:	1420703a 	and	r16,r2,r16
 c0083c0:	20c0332e 	bgeu	r4,r3,c008490 <_realloc_r+0x128>
 c0083c4:	047ffe04 	movi	r17,-8
 c0083c8:	1c62703a 	and	r17,r3,r17
 c0083cc:	8807883a 	mov	r3,r17
 c0083d0:	88005816 	blt	r17,zero,c008534 <_realloc_r+0x1cc>
 c0083d4:	8c805736 	bltu	r17,r18,c008534 <_realloc_r+0x1cc>
 c0083d8:	80c0300e 	bge	r16,r3,c00849c <_realloc_r+0x134>
 c0083dc:	07030074 	movhi	fp,3073
 c0083e0:	e73b3104 	addi	fp,fp,-4924
 c0083e4:	e1c00217 	ldw	r7,8(fp)
 c0083e8:	9c09883a 	add	r4,r19,r16
 c0083ec:	22000117 	ldw	r8,4(r4)
 c0083f0:	21c06326 	beq	r4,r7,c008580 <_realloc_r+0x218>
 c0083f4:	017fff84 	movi	r5,-2
 c0083f8:	414a703a 	and	r5,r8,r5
 c0083fc:	214b883a 	add	r5,r4,r5
 c008400:	29800117 	ldw	r6,4(r5)
 c008404:	3180004c 	andi	r6,r6,1
 c008408:	30003f26 	beq	r6,zero,c008508 <_realloc_r+0x1a0>
 c00840c:	1080004c 	andi	r2,r2,1
 c008410:	10008326 	beq	r2,zero,c008620 <_realloc_r+0x2b8>
 c008414:	900b883a 	mov	r5,r18
 c008418:	a009883a 	mov	r4,r20
 c00841c:	c0049d00 	call	c0049d0 <_malloc_r>
 c008420:	1025883a 	mov	r18,r2
 c008424:	10011e26 	beq	r2,zero,c0088a0 <_realloc_r+0x538>
 c008428:	a93fff17 	ldw	r4,-4(r21)
 c00842c:	10fffe04 	addi	r3,r2,-8
 c008430:	00bfff84 	movi	r2,-2
 c008434:	2084703a 	and	r2,r4,r2
 c008438:	9885883a 	add	r2,r19,r2
 c00843c:	1880ee26 	beq	r3,r2,c0087f8 <_realloc_r+0x490>
 c008440:	81bfff04 	addi	r6,r16,-4
 c008444:	00800904 	movi	r2,36
 c008448:	1180b836 	bltu	r2,r6,c00872c <_realloc_r+0x3c4>
 c00844c:	00c004c4 	movi	r3,19
 c008450:	19809636 	bltu	r3,r6,c0086ac <_realloc_r+0x344>
 c008454:	9005883a 	mov	r2,r18
 c008458:	a807883a 	mov	r3,r21
 c00845c:	19000017 	ldw	r4,0(r3)
 c008460:	11000015 	stw	r4,0(r2)
 c008464:	19000117 	ldw	r4,4(r3)
 c008468:	11000115 	stw	r4,4(r2)
 c00846c:	18c00217 	ldw	r3,8(r3)
 c008470:	10c00215 	stw	r3,8(r2)
 c008474:	a80b883a 	mov	r5,r21
 c008478:	a009883a 	mov	r4,r20
 c00847c:	c007dd40 	call	c007dd4 <_free_r>
 c008480:	a009883a 	mov	r4,r20
 c008484:	c00bfc80 	call	c00bfc8 <__malloc_unlock>
 c008488:	9005883a 	mov	r2,r18
 c00848c:	00001206 	br	c0084d8 <_realloc_r+0x170>
 c008490:	00c00404 	movi	r3,16
 c008494:	1823883a 	mov	r17,r3
 c008498:	003fce06 	br	c0083d4 <__alt_data_end+0xfc0083d4>
 c00849c:	a825883a 	mov	r18,r21
 c0084a0:	8445c83a 	sub	r2,r16,r17
 c0084a4:	00c003c4 	movi	r3,15
 c0084a8:	18802636 	bltu	r3,r2,c008544 <_realloc_r+0x1dc>
 c0084ac:	99800117 	ldw	r6,4(r19)
 c0084b0:	9c07883a 	add	r3,r19,r16
 c0084b4:	3180004c 	andi	r6,r6,1
 c0084b8:	3420b03a 	or	r16,r6,r16
 c0084bc:	9c000115 	stw	r16,4(r19)
 c0084c0:	18800117 	ldw	r2,4(r3)
 c0084c4:	10800054 	ori	r2,r2,1
 c0084c8:	18800115 	stw	r2,4(r3)
 c0084cc:	a009883a 	mov	r4,r20
 c0084d0:	c00bfc80 	call	c00bfc8 <__malloc_unlock>
 c0084d4:	9005883a 	mov	r2,r18
 c0084d8:	dfc00917 	ldw	ra,36(sp)
 c0084dc:	df000817 	ldw	fp,32(sp)
 c0084e0:	ddc00717 	ldw	r23,28(sp)
 c0084e4:	dd800617 	ldw	r22,24(sp)
 c0084e8:	dd400517 	ldw	r21,20(sp)
 c0084ec:	dd000417 	ldw	r20,16(sp)
 c0084f0:	dcc00317 	ldw	r19,12(sp)
 c0084f4:	dc800217 	ldw	r18,8(sp)
 c0084f8:	dc400117 	ldw	r17,4(sp)
 c0084fc:	dc000017 	ldw	r16,0(sp)
 c008500:	dec00a04 	addi	sp,sp,40
 c008504:	f800283a 	ret
 c008508:	017fff04 	movi	r5,-4
 c00850c:	414a703a 	and	r5,r8,r5
 c008510:	814d883a 	add	r6,r16,r5
 c008514:	30c01f16 	blt	r6,r3,c008594 <_realloc_r+0x22c>
 c008518:	20800317 	ldw	r2,12(r4)
 c00851c:	20c00217 	ldw	r3,8(r4)
 c008520:	a825883a 	mov	r18,r21
 c008524:	3021883a 	mov	r16,r6
 c008528:	18800315 	stw	r2,12(r3)
 c00852c:	10c00215 	stw	r3,8(r2)
 c008530:	003fdb06 	br	c0084a0 <__alt_data_end+0xfc0084a0>
 c008534:	00800304 	movi	r2,12
 c008538:	a0800015 	stw	r2,0(r20)
 c00853c:	0005883a 	mov	r2,zero
 c008540:	003fe506 	br	c0084d8 <__alt_data_end+0xfc0084d8>
 c008544:	98c00117 	ldw	r3,4(r19)
 c008548:	9c4b883a 	add	r5,r19,r17
 c00854c:	11000054 	ori	r4,r2,1
 c008550:	18c0004c 	andi	r3,r3,1
 c008554:	1c62b03a 	or	r17,r3,r17
 c008558:	9c400115 	stw	r17,4(r19)
 c00855c:	29000115 	stw	r4,4(r5)
 c008560:	2885883a 	add	r2,r5,r2
 c008564:	10c00117 	ldw	r3,4(r2)
 c008568:	29400204 	addi	r5,r5,8
 c00856c:	a009883a 	mov	r4,r20
 c008570:	18c00054 	ori	r3,r3,1
 c008574:	10c00115 	stw	r3,4(r2)
 c008578:	c007dd40 	call	c007dd4 <_free_r>
 c00857c:	003fd306 	br	c0084cc <__alt_data_end+0xfc0084cc>
 c008580:	017fff04 	movi	r5,-4
 c008584:	414a703a 	and	r5,r8,r5
 c008588:	89800404 	addi	r6,r17,16
 c00858c:	8151883a 	add	r8,r16,r5
 c008590:	4180590e 	bge	r8,r6,c0086f8 <_realloc_r+0x390>
 c008594:	1080004c 	andi	r2,r2,1
 c008598:	103f9e1e 	bne	r2,zero,c008414 <__alt_data_end+0xfc008414>
 c00859c:	adbffe17 	ldw	r22,-8(r21)
 c0085a0:	00bfff04 	movi	r2,-4
 c0085a4:	9dadc83a 	sub	r22,r19,r22
 c0085a8:	b1800117 	ldw	r6,4(r22)
 c0085ac:	3084703a 	and	r2,r6,r2
 c0085b0:	20002026 	beq	r4,zero,c008634 <_realloc_r+0x2cc>
 c0085b4:	80af883a 	add	r23,r16,r2
 c0085b8:	b96f883a 	add	r23,r23,r5
 c0085bc:	21c05f26 	beq	r4,r7,c00873c <_realloc_r+0x3d4>
 c0085c0:	b8c01c16 	blt	r23,r3,c008634 <_realloc_r+0x2cc>
 c0085c4:	20800317 	ldw	r2,12(r4)
 c0085c8:	20c00217 	ldw	r3,8(r4)
 c0085cc:	81bfff04 	addi	r6,r16,-4
 c0085d0:	01000904 	movi	r4,36
 c0085d4:	18800315 	stw	r2,12(r3)
 c0085d8:	10c00215 	stw	r3,8(r2)
 c0085dc:	b0c00217 	ldw	r3,8(r22)
 c0085e0:	b0800317 	ldw	r2,12(r22)
 c0085e4:	b4800204 	addi	r18,r22,8
 c0085e8:	18800315 	stw	r2,12(r3)
 c0085ec:	10c00215 	stw	r3,8(r2)
 c0085f0:	21801b36 	bltu	r4,r6,c008660 <_realloc_r+0x2f8>
 c0085f4:	008004c4 	movi	r2,19
 c0085f8:	1180352e 	bgeu	r2,r6,c0086d0 <_realloc_r+0x368>
 c0085fc:	a8800017 	ldw	r2,0(r21)
 c008600:	b0800215 	stw	r2,8(r22)
 c008604:	a8800117 	ldw	r2,4(r21)
 c008608:	b0800315 	stw	r2,12(r22)
 c00860c:	008006c4 	movi	r2,27
 c008610:	11807f36 	bltu	r2,r6,c008810 <_realloc_r+0x4a8>
 c008614:	b0800404 	addi	r2,r22,16
 c008618:	ad400204 	addi	r21,r21,8
 c00861c:	00002d06 	br	c0086d4 <_realloc_r+0x36c>
 c008620:	adbffe17 	ldw	r22,-8(r21)
 c008624:	00bfff04 	movi	r2,-4
 c008628:	9dadc83a 	sub	r22,r19,r22
 c00862c:	b1000117 	ldw	r4,4(r22)
 c008630:	2084703a 	and	r2,r4,r2
 c008634:	b03f7726 	beq	r22,zero,c008414 <__alt_data_end+0xfc008414>
 c008638:	80af883a 	add	r23,r16,r2
 c00863c:	b8ff7516 	blt	r23,r3,c008414 <__alt_data_end+0xfc008414>
 c008640:	b0800317 	ldw	r2,12(r22)
 c008644:	b0c00217 	ldw	r3,8(r22)
 c008648:	81bfff04 	addi	r6,r16,-4
 c00864c:	01000904 	movi	r4,36
 c008650:	18800315 	stw	r2,12(r3)
 c008654:	10c00215 	stw	r3,8(r2)
 c008658:	b4800204 	addi	r18,r22,8
 c00865c:	21bfe52e 	bgeu	r4,r6,c0085f4 <__alt_data_end+0xfc0085f4>
 c008660:	a80b883a 	mov	r5,r21
 c008664:	9009883a 	mov	r4,r18
 c008668:	c0080e40 	call	c0080e4 <memmove>
 c00866c:	b821883a 	mov	r16,r23
 c008670:	b027883a 	mov	r19,r22
 c008674:	003f8a06 	br	c0084a0 <__alt_data_end+0xfc0084a0>
 c008678:	300b883a 	mov	r5,r6
 c00867c:	dfc00917 	ldw	ra,36(sp)
 c008680:	df000817 	ldw	fp,32(sp)
 c008684:	ddc00717 	ldw	r23,28(sp)
 c008688:	dd800617 	ldw	r22,24(sp)
 c00868c:	dd400517 	ldw	r21,20(sp)
 c008690:	dd000417 	ldw	r20,16(sp)
 c008694:	dcc00317 	ldw	r19,12(sp)
 c008698:	dc800217 	ldw	r18,8(sp)
 c00869c:	dc400117 	ldw	r17,4(sp)
 c0086a0:	dc000017 	ldw	r16,0(sp)
 c0086a4:	dec00a04 	addi	sp,sp,40
 c0086a8:	c0049d01 	jmpi	c0049d0 <_malloc_r>
 c0086ac:	a8c00017 	ldw	r3,0(r21)
 c0086b0:	90c00015 	stw	r3,0(r18)
 c0086b4:	a8c00117 	ldw	r3,4(r21)
 c0086b8:	90c00115 	stw	r3,4(r18)
 c0086bc:	00c006c4 	movi	r3,27
 c0086c0:	19804536 	bltu	r3,r6,c0087d8 <_realloc_r+0x470>
 c0086c4:	90800204 	addi	r2,r18,8
 c0086c8:	a8c00204 	addi	r3,r21,8
 c0086cc:	003f6306 	br	c00845c <__alt_data_end+0xfc00845c>
 c0086d0:	9005883a 	mov	r2,r18
 c0086d4:	a8c00017 	ldw	r3,0(r21)
 c0086d8:	b821883a 	mov	r16,r23
 c0086dc:	b027883a 	mov	r19,r22
 c0086e0:	10c00015 	stw	r3,0(r2)
 c0086e4:	a8c00117 	ldw	r3,4(r21)
 c0086e8:	10c00115 	stw	r3,4(r2)
 c0086ec:	a8c00217 	ldw	r3,8(r21)
 c0086f0:	10c00215 	stw	r3,8(r2)
 c0086f4:	003f6a06 	br	c0084a0 <__alt_data_end+0xfc0084a0>
 c0086f8:	9c67883a 	add	r19,r19,r17
 c0086fc:	4445c83a 	sub	r2,r8,r17
 c008700:	e4c00215 	stw	r19,8(fp)
 c008704:	10800054 	ori	r2,r2,1
 c008708:	98800115 	stw	r2,4(r19)
 c00870c:	a8bfff17 	ldw	r2,-4(r21)
 c008710:	a009883a 	mov	r4,r20
 c008714:	1080004c 	andi	r2,r2,1
 c008718:	1462b03a 	or	r17,r2,r17
 c00871c:	ac7fff15 	stw	r17,-4(r21)
 c008720:	c00bfc80 	call	c00bfc8 <__malloc_unlock>
 c008724:	a805883a 	mov	r2,r21
 c008728:	003f6b06 	br	c0084d8 <__alt_data_end+0xfc0084d8>
 c00872c:	a80b883a 	mov	r5,r21
 c008730:	9009883a 	mov	r4,r18
 c008734:	c0080e40 	call	c0080e4 <memmove>
 c008738:	003f4e06 	br	c008474 <__alt_data_end+0xfc008474>
 c00873c:	89000404 	addi	r4,r17,16
 c008740:	b93fbc16 	blt	r23,r4,c008634 <__alt_data_end+0xfc008634>
 c008744:	b0800317 	ldw	r2,12(r22)
 c008748:	b0c00217 	ldw	r3,8(r22)
 c00874c:	81bfff04 	addi	r6,r16,-4
 c008750:	01000904 	movi	r4,36
 c008754:	18800315 	stw	r2,12(r3)
 c008758:	10c00215 	stw	r3,8(r2)
 c00875c:	b4800204 	addi	r18,r22,8
 c008760:	21804336 	bltu	r4,r6,c008870 <_realloc_r+0x508>
 c008764:	008004c4 	movi	r2,19
 c008768:	11803f2e 	bgeu	r2,r6,c008868 <_realloc_r+0x500>
 c00876c:	a8800017 	ldw	r2,0(r21)
 c008770:	b0800215 	stw	r2,8(r22)
 c008774:	a8800117 	ldw	r2,4(r21)
 c008778:	b0800315 	stw	r2,12(r22)
 c00877c:	008006c4 	movi	r2,27
 c008780:	11803f36 	bltu	r2,r6,c008880 <_realloc_r+0x518>
 c008784:	b0800404 	addi	r2,r22,16
 c008788:	ad400204 	addi	r21,r21,8
 c00878c:	a8c00017 	ldw	r3,0(r21)
 c008790:	10c00015 	stw	r3,0(r2)
 c008794:	a8c00117 	ldw	r3,4(r21)
 c008798:	10c00115 	stw	r3,4(r2)
 c00879c:	a8c00217 	ldw	r3,8(r21)
 c0087a0:	10c00215 	stw	r3,8(r2)
 c0087a4:	b447883a 	add	r3,r22,r17
 c0087a8:	bc45c83a 	sub	r2,r23,r17
 c0087ac:	e0c00215 	stw	r3,8(fp)
 c0087b0:	10800054 	ori	r2,r2,1
 c0087b4:	18800115 	stw	r2,4(r3)
 c0087b8:	b0800117 	ldw	r2,4(r22)
 c0087bc:	a009883a 	mov	r4,r20
 c0087c0:	1080004c 	andi	r2,r2,1
 c0087c4:	1462b03a 	or	r17,r2,r17
 c0087c8:	b4400115 	stw	r17,4(r22)
 c0087cc:	c00bfc80 	call	c00bfc8 <__malloc_unlock>
 c0087d0:	9005883a 	mov	r2,r18
 c0087d4:	003f4006 	br	c0084d8 <__alt_data_end+0xfc0084d8>
 c0087d8:	a8c00217 	ldw	r3,8(r21)
 c0087dc:	90c00215 	stw	r3,8(r18)
 c0087e0:	a8c00317 	ldw	r3,12(r21)
 c0087e4:	90c00315 	stw	r3,12(r18)
 c0087e8:	30801126 	beq	r6,r2,c008830 <_realloc_r+0x4c8>
 c0087ec:	90800404 	addi	r2,r18,16
 c0087f0:	a8c00404 	addi	r3,r21,16
 c0087f4:	003f1906 	br	c00845c <__alt_data_end+0xfc00845c>
 c0087f8:	90ffff17 	ldw	r3,-4(r18)
 c0087fc:	00bfff04 	movi	r2,-4
 c008800:	a825883a 	mov	r18,r21
 c008804:	1884703a 	and	r2,r3,r2
 c008808:	80a1883a 	add	r16,r16,r2
 c00880c:	003f2406 	br	c0084a0 <__alt_data_end+0xfc0084a0>
 c008810:	a8800217 	ldw	r2,8(r21)
 c008814:	b0800415 	stw	r2,16(r22)
 c008818:	a8800317 	ldw	r2,12(r21)
 c00881c:	b0800515 	stw	r2,20(r22)
 c008820:	31000a26 	beq	r6,r4,c00884c <_realloc_r+0x4e4>
 c008824:	b0800604 	addi	r2,r22,24
 c008828:	ad400404 	addi	r21,r21,16
 c00882c:	003fa906 	br	c0086d4 <__alt_data_end+0xfc0086d4>
 c008830:	a9000417 	ldw	r4,16(r21)
 c008834:	90800604 	addi	r2,r18,24
 c008838:	a8c00604 	addi	r3,r21,24
 c00883c:	91000415 	stw	r4,16(r18)
 c008840:	a9000517 	ldw	r4,20(r21)
 c008844:	91000515 	stw	r4,20(r18)
 c008848:	003f0406 	br	c00845c <__alt_data_end+0xfc00845c>
 c00884c:	a8c00417 	ldw	r3,16(r21)
 c008850:	ad400604 	addi	r21,r21,24
 c008854:	b0800804 	addi	r2,r22,32
 c008858:	b0c00615 	stw	r3,24(r22)
 c00885c:	a8ffff17 	ldw	r3,-4(r21)
 c008860:	b0c00715 	stw	r3,28(r22)
 c008864:	003f9b06 	br	c0086d4 <__alt_data_end+0xfc0086d4>
 c008868:	9005883a 	mov	r2,r18
 c00886c:	003fc706 	br	c00878c <__alt_data_end+0xfc00878c>
 c008870:	a80b883a 	mov	r5,r21
 c008874:	9009883a 	mov	r4,r18
 c008878:	c0080e40 	call	c0080e4 <memmove>
 c00887c:	003fc906 	br	c0087a4 <__alt_data_end+0xfc0087a4>
 c008880:	a8800217 	ldw	r2,8(r21)
 c008884:	b0800415 	stw	r2,16(r22)
 c008888:	a8800317 	ldw	r2,12(r21)
 c00888c:	b0800515 	stw	r2,20(r22)
 c008890:	31000726 	beq	r6,r4,c0088b0 <_realloc_r+0x548>
 c008894:	b0800604 	addi	r2,r22,24
 c008898:	ad400404 	addi	r21,r21,16
 c00889c:	003fbb06 	br	c00878c <__alt_data_end+0xfc00878c>
 c0088a0:	a009883a 	mov	r4,r20
 c0088a4:	c00bfc80 	call	c00bfc8 <__malloc_unlock>
 c0088a8:	0005883a 	mov	r2,zero
 c0088ac:	003f0a06 	br	c0084d8 <__alt_data_end+0xfc0084d8>
 c0088b0:	a8c00417 	ldw	r3,16(r21)
 c0088b4:	ad400604 	addi	r21,r21,24
 c0088b8:	b0800804 	addi	r2,r22,32
 c0088bc:	b0c00615 	stw	r3,24(r22)
 c0088c0:	a8ffff17 	ldw	r3,-4(r21)
 c0088c4:	b0c00715 	stw	r3,28(r22)
 c0088c8:	003fb006 	br	c00878c <__alt_data_end+0xfc00878c>

0c0088cc <__muldi3>:
 c0088cc:	defff604 	addi	sp,sp,-40
 c0088d0:	dd800615 	stw	r22,24(sp)
 c0088d4:	dd400515 	stw	r21,20(sp)
 c0088d8:	dc400115 	stw	r17,4(sp)
 c0088dc:	357fffcc 	andi	r21,r6,65535
 c0088e0:	2022d43a 	srli	r17,r4,16
 c0088e4:	25bfffcc 	andi	r22,r4,65535
 c0088e8:	dcc00315 	stw	r19,12(sp)
 c0088ec:	dc800215 	stw	r18,8(sp)
 c0088f0:	2027883a 	mov	r19,r4
 c0088f4:	2825883a 	mov	r18,r5
 c0088f8:	b009883a 	mov	r4,r22
 c0088fc:	a80b883a 	mov	r5,r21
 c008900:	dfc00915 	stw	ra,36(sp)
 c008904:	df000815 	stw	fp,32(sp)
 c008908:	ddc00715 	stw	r23,28(sp)
 c00890c:	3839883a 	mov	fp,r7
 c008910:	302ed43a 	srli	r23,r6,16
 c008914:	dd000415 	stw	r20,16(sp)
 c008918:	dc000015 	stw	r16,0(sp)
 c00891c:	3029883a 	mov	r20,r6
 c008920:	c000b880 	call	c000b88 <__mulsi3>
 c008924:	a80b883a 	mov	r5,r21
 c008928:	8809883a 	mov	r4,r17
 c00892c:	1021883a 	mov	r16,r2
 c008930:	c000b880 	call	c000b88 <__mulsi3>
 c008934:	8809883a 	mov	r4,r17
 c008938:	b80b883a 	mov	r5,r23
 c00893c:	102b883a 	mov	r21,r2
 c008940:	c000b880 	call	c000b88 <__mulsi3>
 c008944:	b80b883a 	mov	r5,r23
 c008948:	b009883a 	mov	r4,r22
 c00894c:	1023883a 	mov	r17,r2
 c008950:	c000b880 	call	c000b88 <__mulsi3>
 c008954:	8006d43a 	srli	r3,r16,16
 c008958:	1545883a 	add	r2,r2,r21
 c00895c:	1885883a 	add	r2,r3,r2
 c008960:	1540022e 	bgeu	r2,r21,c00896c <__muldi3+0xa0>
 c008964:	00c00074 	movhi	r3,1
 c008968:	88e3883a 	add	r17,r17,r3
 c00896c:	1006d43a 	srli	r3,r2,16
 c008970:	1004943a 	slli	r2,r2,16
 c008974:	e00b883a 	mov	r5,fp
 c008978:	9809883a 	mov	r4,r19
 c00897c:	843fffcc 	andi	r16,r16,65535
 c008980:	1c63883a 	add	r17,r3,r17
 c008984:	1421883a 	add	r16,r2,r16
 c008988:	c000b880 	call	c000b88 <__mulsi3>
 c00898c:	900b883a 	mov	r5,r18
 c008990:	a009883a 	mov	r4,r20
 c008994:	1027883a 	mov	r19,r2
 c008998:	c000b880 	call	c000b88 <__mulsi3>
 c00899c:	9885883a 	add	r2,r19,r2
 c0089a0:	1447883a 	add	r3,r2,r17
 c0089a4:	8005883a 	mov	r2,r16
 c0089a8:	dfc00917 	ldw	ra,36(sp)
 c0089ac:	df000817 	ldw	fp,32(sp)
 c0089b0:	ddc00717 	ldw	r23,28(sp)
 c0089b4:	dd800617 	ldw	r22,24(sp)
 c0089b8:	dd400517 	ldw	r21,20(sp)
 c0089bc:	dd000417 	ldw	r20,16(sp)
 c0089c0:	dcc00317 	ldw	r19,12(sp)
 c0089c4:	dc800217 	ldw	r18,8(sp)
 c0089c8:	dc400117 	ldw	r17,4(sp)
 c0089cc:	dc000017 	ldw	r16,0(sp)
 c0089d0:	dec00a04 	addi	sp,sp,40
 c0089d4:	f800283a 	ret

0c0089d8 <__udivdi3>:
 c0089d8:	defff404 	addi	sp,sp,-48
 c0089dc:	dcc00515 	stw	r19,20(sp)
 c0089e0:	dc000215 	stw	r16,8(sp)
 c0089e4:	dfc00b15 	stw	ra,44(sp)
 c0089e8:	df000a15 	stw	fp,40(sp)
 c0089ec:	ddc00915 	stw	r23,36(sp)
 c0089f0:	dd800815 	stw	r22,32(sp)
 c0089f4:	dd400715 	stw	r21,28(sp)
 c0089f8:	dd000615 	stw	r20,24(sp)
 c0089fc:	dc800415 	stw	r18,16(sp)
 c008a00:	dc400315 	stw	r17,12(sp)
 c008a04:	2027883a 	mov	r19,r4
 c008a08:	2821883a 	mov	r16,r5
 c008a0c:	3800461e 	bne	r7,zero,c008b28 <__udivdi3+0x150>
 c008a10:	3023883a 	mov	r17,r6
 c008a14:	2025883a 	mov	r18,r4
 c008a18:	2980572e 	bgeu	r5,r6,c008b78 <__udivdi3+0x1a0>
 c008a1c:	00bfffd4 	movui	r2,65535
 c008a20:	282d883a 	mov	r22,r5
 c008a24:	1180b236 	bltu	r2,r6,c008cf0 <__udivdi3+0x318>
 c008a28:	00803fc4 	movi	r2,255
 c008a2c:	1185803a 	cmpltu	r2,r2,r6
 c008a30:	100490fa 	slli	r2,r2,3
 c008a34:	3086d83a 	srl	r3,r6,r2
 c008a38:	01030074 	movhi	r4,3073
 c008a3c:	21390504 	addi	r4,r4,-7148
 c008a40:	20c7883a 	add	r3,r4,r3
 c008a44:	18c00003 	ldbu	r3,0(r3)
 c008a48:	1885883a 	add	r2,r3,r2
 c008a4c:	00c00804 	movi	r3,32
 c008a50:	1887c83a 	sub	r3,r3,r2
 c008a54:	18000526 	beq	r3,zero,c008a6c <__udivdi3+0x94>
 c008a58:	80e0983a 	sll	r16,r16,r3
 c008a5c:	9884d83a 	srl	r2,r19,r2
 c008a60:	30e2983a 	sll	r17,r6,r3
 c008a64:	98e4983a 	sll	r18,r19,r3
 c008a68:	142cb03a 	or	r22,r2,r16
 c008a6c:	882ad43a 	srli	r21,r17,16
 c008a70:	b009883a 	mov	r4,r22
 c008a74:	8d3fffcc 	andi	r20,r17,65535
 c008a78:	a80b883a 	mov	r5,r21
 c008a7c:	c000b300 	call	c000b30 <__umodsi3>
 c008a80:	b009883a 	mov	r4,r22
 c008a84:	a80b883a 	mov	r5,r21
 c008a88:	1027883a 	mov	r19,r2
 c008a8c:	c000acc0 	call	c000acc <__udivsi3>
 c008a90:	100b883a 	mov	r5,r2
 c008a94:	a009883a 	mov	r4,r20
 c008a98:	102d883a 	mov	r22,r2
 c008a9c:	c000b880 	call	c000b88 <__mulsi3>
 c008aa0:	9826943a 	slli	r19,r19,16
 c008aa4:	9006d43a 	srli	r3,r18,16
 c008aa8:	1cc6b03a 	or	r3,r3,r19
 c008aac:	1880052e 	bgeu	r3,r2,c008ac4 <__udivdi3+0xec>
 c008ab0:	1c47883a 	add	r3,r3,r17
 c008ab4:	b13fffc4 	addi	r4,r22,-1
 c008ab8:	1c400136 	bltu	r3,r17,c008ac0 <__udivdi3+0xe8>
 c008abc:	18814236 	bltu	r3,r2,c008fc8 <__udivdi3+0x5f0>
 c008ac0:	202d883a 	mov	r22,r4
 c008ac4:	18a1c83a 	sub	r16,r3,r2
 c008ac8:	8009883a 	mov	r4,r16
 c008acc:	a80b883a 	mov	r5,r21
 c008ad0:	c000b300 	call	c000b30 <__umodsi3>
 c008ad4:	1027883a 	mov	r19,r2
 c008ad8:	8009883a 	mov	r4,r16
 c008adc:	a80b883a 	mov	r5,r21
 c008ae0:	9826943a 	slli	r19,r19,16
 c008ae4:	c000acc0 	call	c000acc <__udivsi3>
 c008ae8:	100b883a 	mov	r5,r2
 c008aec:	a009883a 	mov	r4,r20
 c008af0:	94bfffcc 	andi	r18,r18,65535
 c008af4:	1021883a 	mov	r16,r2
 c008af8:	94e4b03a 	or	r18,r18,r19
 c008afc:	c000b880 	call	c000b88 <__mulsi3>
 c008b00:	9080052e 	bgeu	r18,r2,c008b18 <__udivdi3+0x140>
 c008b04:	8ca5883a 	add	r18,r17,r18
 c008b08:	80ffffc4 	addi	r3,r16,-1
 c008b0c:	94410c36 	bltu	r18,r17,c008f40 <__udivdi3+0x568>
 c008b10:	90810b2e 	bgeu	r18,r2,c008f40 <__udivdi3+0x568>
 c008b14:	843fff84 	addi	r16,r16,-2
 c008b18:	b004943a 	slli	r2,r22,16
 c008b1c:	0007883a 	mov	r3,zero
 c008b20:	1404b03a 	or	r2,r2,r16
 c008b24:	00005e06 	br	c008ca0 <__udivdi3+0x2c8>
 c008b28:	29c05b36 	bltu	r5,r7,c008c98 <__udivdi3+0x2c0>
 c008b2c:	00bfffd4 	movui	r2,65535
 c008b30:	11c0672e 	bgeu	r2,r7,c008cd0 <__udivdi3+0x2f8>
 c008b34:	00804034 	movhi	r2,256
 c008b38:	10bfffc4 	addi	r2,r2,-1
 c008b3c:	11c10a36 	bltu	r2,r7,c008f68 <__udivdi3+0x590>
 c008b40:	00800404 	movi	r2,16
 c008b44:	3886d83a 	srl	r3,r7,r2
 c008b48:	01030074 	movhi	r4,3073
 c008b4c:	21390504 	addi	r4,r4,-7148
 c008b50:	20c7883a 	add	r3,r4,r3
 c008b54:	18c00003 	ldbu	r3,0(r3)
 c008b58:	05c00804 	movi	r23,32
 c008b5c:	1885883a 	add	r2,r3,r2
 c008b60:	b8afc83a 	sub	r23,r23,r2
 c008b64:	b800671e 	bne	r23,zero,c008d04 <__udivdi3+0x32c>
 c008b68:	3c010536 	bltu	r7,r16,c008f80 <__udivdi3+0x5a8>
 c008b6c:	9985403a 	cmpgeu	r2,r19,r6
 c008b70:	0007883a 	mov	r3,zero
 c008b74:	00004a06 	br	c008ca0 <__udivdi3+0x2c8>
 c008b78:	3000041e 	bne	r6,zero,c008b8c <__udivdi3+0x1b4>
 c008b7c:	000b883a 	mov	r5,zero
 c008b80:	01000044 	movi	r4,1
 c008b84:	c000acc0 	call	c000acc <__udivsi3>
 c008b88:	1023883a 	mov	r17,r2
 c008b8c:	00bfffd4 	movui	r2,65535
 c008b90:	1440532e 	bgeu	r2,r17,c008ce0 <__udivdi3+0x308>
 c008b94:	00804034 	movhi	r2,256
 c008b98:	10bfffc4 	addi	r2,r2,-1
 c008b9c:	1440f436 	bltu	r2,r17,c008f70 <__udivdi3+0x598>
 c008ba0:	00800404 	movi	r2,16
 c008ba4:	8886d83a 	srl	r3,r17,r2
 c008ba8:	01030074 	movhi	r4,3073
 c008bac:	21390504 	addi	r4,r4,-7148
 c008bb0:	20c7883a 	add	r3,r4,r3
 c008bb4:	18c00003 	ldbu	r3,0(r3)
 c008bb8:	1885883a 	add	r2,r3,r2
 c008bbc:	00c00804 	movi	r3,32
 c008bc0:	1887c83a 	sub	r3,r3,r2
 c008bc4:	1800a51e 	bne	r3,zero,c008e5c <__udivdi3+0x484>
 c008bc8:	882ad43a 	srli	r21,r17,16
 c008bcc:	8461c83a 	sub	r16,r16,r17
 c008bd0:	8d3fffcc 	andi	r20,r17,65535
 c008bd4:	00c00044 	movi	r3,1
 c008bd8:	a80b883a 	mov	r5,r21
 c008bdc:	8009883a 	mov	r4,r16
 c008be0:	d8c00115 	stw	r3,4(sp)
 c008be4:	c000b300 	call	c000b30 <__umodsi3>
 c008be8:	a80b883a 	mov	r5,r21
 c008bec:	8009883a 	mov	r4,r16
 c008bf0:	1027883a 	mov	r19,r2
 c008bf4:	c000acc0 	call	c000acc <__udivsi3>
 c008bf8:	a00b883a 	mov	r5,r20
 c008bfc:	1009883a 	mov	r4,r2
 c008c00:	102d883a 	mov	r22,r2
 c008c04:	c000b880 	call	c000b88 <__mulsi3>
 c008c08:	9826943a 	slli	r19,r19,16
 c008c0c:	900ed43a 	srli	r7,r18,16
 c008c10:	d8c00117 	ldw	r3,4(sp)
 c008c14:	3cceb03a 	or	r7,r7,r19
 c008c18:	3880052e 	bgeu	r7,r2,c008c30 <__udivdi3+0x258>
 c008c1c:	3c4f883a 	add	r7,r7,r17
 c008c20:	b13fffc4 	addi	r4,r22,-1
 c008c24:	3c400136 	bltu	r7,r17,c008c2c <__udivdi3+0x254>
 c008c28:	3880e436 	bltu	r7,r2,c008fbc <__udivdi3+0x5e4>
 c008c2c:	202d883a 	mov	r22,r4
 c008c30:	38a1c83a 	sub	r16,r7,r2
 c008c34:	8009883a 	mov	r4,r16
 c008c38:	a80b883a 	mov	r5,r21
 c008c3c:	d8c00115 	stw	r3,4(sp)
 c008c40:	c000b300 	call	c000b30 <__umodsi3>
 c008c44:	1027883a 	mov	r19,r2
 c008c48:	8009883a 	mov	r4,r16
 c008c4c:	a80b883a 	mov	r5,r21
 c008c50:	9826943a 	slli	r19,r19,16
 c008c54:	c000acc0 	call	c000acc <__udivsi3>
 c008c58:	a00b883a 	mov	r5,r20
 c008c5c:	1009883a 	mov	r4,r2
 c008c60:	94bfffcc 	andi	r18,r18,65535
 c008c64:	1021883a 	mov	r16,r2
 c008c68:	94e4b03a 	or	r18,r18,r19
 c008c6c:	c000b880 	call	c000b88 <__mulsi3>
 c008c70:	d8c00117 	ldw	r3,4(sp)
 c008c74:	9080052e 	bgeu	r18,r2,c008c8c <__udivdi3+0x2b4>
 c008c78:	8ca5883a 	add	r18,r17,r18
 c008c7c:	813fffc4 	addi	r4,r16,-1
 c008c80:	9440ad36 	bltu	r18,r17,c008f38 <__udivdi3+0x560>
 c008c84:	9080ac2e 	bgeu	r18,r2,c008f38 <__udivdi3+0x560>
 c008c88:	843fff84 	addi	r16,r16,-2
 c008c8c:	b004943a 	slli	r2,r22,16
 c008c90:	1404b03a 	or	r2,r2,r16
 c008c94:	00000206 	br	c008ca0 <__udivdi3+0x2c8>
 c008c98:	0007883a 	mov	r3,zero
 c008c9c:	0005883a 	mov	r2,zero
 c008ca0:	dfc00b17 	ldw	ra,44(sp)
 c008ca4:	df000a17 	ldw	fp,40(sp)
 c008ca8:	ddc00917 	ldw	r23,36(sp)
 c008cac:	dd800817 	ldw	r22,32(sp)
 c008cb0:	dd400717 	ldw	r21,28(sp)
 c008cb4:	dd000617 	ldw	r20,24(sp)
 c008cb8:	dcc00517 	ldw	r19,20(sp)
 c008cbc:	dc800417 	ldw	r18,16(sp)
 c008cc0:	dc400317 	ldw	r17,12(sp)
 c008cc4:	dc000217 	ldw	r16,8(sp)
 c008cc8:	dec00c04 	addi	sp,sp,48
 c008ccc:	f800283a 	ret
 c008cd0:	00803fc4 	movi	r2,255
 c008cd4:	11c5803a 	cmpltu	r2,r2,r7
 c008cd8:	100490fa 	slli	r2,r2,3
 c008cdc:	003f9906 	br	c008b44 <__alt_data_end+0xfc008b44>
 c008ce0:	00803fc4 	movi	r2,255
 c008ce4:	1445803a 	cmpltu	r2,r2,r17
 c008ce8:	100490fa 	slli	r2,r2,3
 c008cec:	003fad06 	br	c008ba4 <__alt_data_end+0xfc008ba4>
 c008cf0:	00804034 	movhi	r2,256
 c008cf4:	10bfffc4 	addi	r2,r2,-1
 c008cf8:	11809f36 	bltu	r2,r6,c008f78 <__udivdi3+0x5a0>
 c008cfc:	00800404 	movi	r2,16
 c008d00:	003f4c06 	br	c008a34 <__alt_data_end+0xfc008a34>
 c008d04:	3dce983a 	sll	r7,r7,r23
 c008d08:	30b8d83a 	srl	fp,r6,r2
 c008d0c:	80a2d83a 	srl	r17,r16,r2
 c008d10:	35cc983a 	sll	r6,r6,r23
 c008d14:	3f38b03a 	or	fp,r7,fp
 c008d18:	e024d43a 	srli	r18,fp,16
 c008d1c:	9884d83a 	srl	r2,r19,r2
 c008d20:	85e0983a 	sll	r16,r16,r23
 c008d24:	8809883a 	mov	r4,r17
 c008d28:	900b883a 	mov	r5,r18
 c008d2c:	d9800015 	stw	r6,0(sp)
 c008d30:	1420b03a 	or	r16,r2,r16
 c008d34:	c000b300 	call	c000b30 <__umodsi3>
 c008d38:	900b883a 	mov	r5,r18
 c008d3c:	8809883a 	mov	r4,r17
 c008d40:	1029883a 	mov	r20,r2
 c008d44:	e5bfffcc 	andi	r22,fp,65535
 c008d48:	c000acc0 	call	c000acc <__udivsi3>
 c008d4c:	100b883a 	mov	r5,r2
 c008d50:	b009883a 	mov	r4,r22
 c008d54:	102b883a 	mov	r21,r2
 c008d58:	c000b880 	call	c000b88 <__mulsi3>
 c008d5c:	a028943a 	slli	r20,r20,16
 c008d60:	8006d43a 	srli	r3,r16,16
 c008d64:	1d06b03a 	or	r3,r3,r20
 c008d68:	1880042e 	bgeu	r3,r2,c008d7c <__udivdi3+0x3a4>
 c008d6c:	1f07883a 	add	r3,r3,fp
 c008d70:	a93fffc4 	addi	r4,r21,-1
 c008d74:	1f00892e 	bgeu	r3,fp,c008f9c <__udivdi3+0x5c4>
 c008d78:	202b883a 	mov	r21,r4
 c008d7c:	18a3c83a 	sub	r17,r3,r2
 c008d80:	8809883a 	mov	r4,r17
 c008d84:	900b883a 	mov	r5,r18
 c008d88:	c000b300 	call	c000b30 <__umodsi3>
 c008d8c:	1029883a 	mov	r20,r2
 c008d90:	8809883a 	mov	r4,r17
 c008d94:	900b883a 	mov	r5,r18
 c008d98:	a028943a 	slli	r20,r20,16
 c008d9c:	c000acc0 	call	c000acc <__udivsi3>
 c008da0:	100b883a 	mov	r5,r2
 c008da4:	b009883a 	mov	r4,r22
 c008da8:	843fffcc 	andi	r16,r16,65535
 c008dac:	1023883a 	mov	r17,r2
 c008db0:	8520b03a 	or	r16,r16,r20
 c008db4:	c000b880 	call	c000b88 <__mulsi3>
 c008db8:	8080042e 	bgeu	r16,r2,c008dcc <__udivdi3+0x3f4>
 c008dbc:	8721883a 	add	r16,r16,fp
 c008dc0:	88ffffc4 	addi	r3,r17,-1
 c008dc4:	8700712e 	bgeu	r16,fp,c008f8c <__udivdi3+0x5b4>
 c008dc8:	1823883a 	mov	r17,r3
 c008dcc:	a80e943a 	slli	r7,r21,16
 c008dd0:	d8c00017 	ldw	r3,0(sp)
 c008dd4:	80a1c83a 	sub	r16,r16,r2
 c008dd8:	3c64b03a 	or	r18,r7,r17
 c008ddc:	1d3fffcc 	andi	r20,r3,65535
 c008de0:	9022d43a 	srli	r17,r18,16
 c008de4:	95bfffcc 	andi	r22,r18,65535
 c008de8:	a00b883a 	mov	r5,r20
 c008dec:	b009883a 	mov	r4,r22
 c008df0:	182ad43a 	srli	r21,r3,16
 c008df4:	c000b880 	call	c000b88 <__mulsi3>
 c008df8:	a00b883a 	mov	r5,r20
 c008dfc:	8809883a 	mov	r4,r17
 c008e00:	1039883a 	mov	fp,r2
 c008e04:	c000b880 	call	c000b88 <__mulsi3>
 c008e08:	8809883a 	mov	r4,r17
 c008e0c:	a80b883a 	mov	r5,r21
 c008e10:	1029883a 	mov	r20,r2
 c008e14:	c000b880 	call	c000b88 <__mulsi3>
 c008e18:	a80b883a 	mov	r5,r21
 c008e1c:	b009883a 	mov	r4,r22
 c008e20:	1023883a 	mov	r17,r2
 c008e24:	c000b880 	call	c000b88 <__mulsi3>
 c008e28:	e006d43a 	srli	r3,fp,16
 c008e2c:	1505883a 	add	r2,r2,r20
 c008e30:	1887883a 	add	r3,r3,r2
 c008e34:	1d00022e 	bgeu	r3,r20,c008e40 <__udivdi3+0x468>
 c008e38:	00800074 	movhi	r2,1
 c008e3c:	88a3883a 	add	r17,r17,r2
 c008e40:	1804d43a 	srli	r2,r3,16
 c008e44:	1463883a 	add	r17,r2,r17
 c008e48:	84404436 	bltu	r16,r17,c008f5c <__udivdi3+0x584>
 c008e4c:	84403e26 	beq	r16,r17,c008f48 <__udivdi3+0x570>
 c008e50:	9005883a 	mov	r2,r18
 c008e54:	0007883a 	mov	r3,zero
 c008e58:	003f9106 	br	c008ca0 <__alt_data_end+0xfc008ca0>
 c008e5c:	88e2983a 	sll	r17,r17,r3
 c008e60:	80aed83a 	srl	r23,r16,r2
 c008e64:	80e0983a 	sll	r16,r16,r3
 c008e68:	882ad43a 	srli	r21,r17,16
 c008e6c:	9884d83a 	srl	r2,r19,r2
 c008e70:	b809883a 	mov	r4,r23
 c008e74:	a80b883a 	mov	r5,r21
 c008e78:	98e4983a 	sll	r18,r19,r3
 c008e7c:	142cb03a 	or	r22,r2,r16
 c008e80:	c000b300 	call	c000b30 <__umodsi3>
 c008e84:	b809883a 	mov	r4,r23
 c008e88:	a80b883a 	mov	r5,r21
 c008e8c:	1027883a 	mov	r19,r2
 c008e90:	8d3fffcc 	andi	r20,r17,65535
 c008e94:	c000acc0 	call	c000acc <__udivsi3>
 c008e98:	a009883a 	mov	r4,r20
 c008e9c:	100b883a 	mov	r5,r2
 c008ea0:	102f883a 	mov	r23,r2
 c008ea4:	c000b880 	call	c000b88 <__mulsi3>
 c008ea8:	9826943a 	slli	r19,r19,16
 c008eac:	b008d43a 	srli	r4,r22,16
 c008eb0:	24c8b03a 	or	r4,r4,r19
 c008eb4:	2080062e 	bgeu	r4,r2,c008ed0 <__udivdi3+0x4f8>
 c008eb8:	2449883a 	add	r4,r4,r17
 c008ebc:	b8ffffc4 	addi	r3,r23,-1
 c008ec0:	24403c36 	bltu	r4,r17,c008fb4 <__udivdi3+0x5dc>
 c008ec4:	20803b2e 	bgeu	r4,r2,c008fb4 <__udivdi3+0x5dc>
 c008ec8:	bdffff84 	addi	r23,r23,-2
 c008ecc:	2449883a 	add	r4,r4,r17
 c008ed0:	20a1c83a 	sub	r16,r4,r2
 c008ed4:	a80b883a 	mov	r5,r21
 c008ed8:	8009883a 	mov	r4,r16
 c008edc:	c000b300 	call	c000b30 <__umodsi3>
 c008ee0:	a80b883a 	mov	r5,r21
 c008ee4:	8009883a 	mov	r4,r16
 c008ee8:	1027883a 	mov	r19,r2
 c008eec:	c000acc0 	call	c000acc <__udivsi3>
 c008ef0:	a009883a 	mov	r4,r20
 c008ef4:	100b883a 	mov	r5,r2
 c008ef8:	9826943a 	slli	r19,r19,16
 c008efc:	1039883a 	mov	fp,r2
 c008f00:	c000b880 	call	c000b88 <__mulsi3>
 c008f04:	b13fffcc 	andi	r4,r22,65535
 c008f08:	24c8b03a 	or	r4,r4,r19
 c008f0c:	2080062e 	bgeu	r4,r2,c008f28 <__udivdi3+0x550>
 c008f10:	2449883a 	add	r4,r4,r17
 c008f14:	e0ffffc4 	addi	r3,fp,-1
 c008f18:	24402436 	bltu	r4,r17,c008fac <__udivdi3+0x5d4>
 c008f1c:	2080232e 	bgeu	r4,r2,c008fac <__udivdi3+0x5d4>
 c008f20:	e73fff84 	addi	fp,fp,-2
 c008f24:	2449883a 	add	r4,r4,r17
 c008f28:	b82e943a 	slli	r23,r23,16
 c008f2c:	20a1c83a 	sub	r16,r4,r2
 c008f30:	bf06b03a 	or	r3,r23,fp
 c008f34:	003f2806 	br	c008bd8 <__alt_data_end+0xfc008bd8>
 c008f38:	2021883a 	mov	r16,r4
 c008f3c:	003f5306 	br	c008c8c <__alt_data_end+0xfc008c8c>
 c008f40:	1821883a 	mov	r16,r3
 c008f44:	003ef406 	br	c008b18 <__alt_data_end+0xfc008b18>
 c008f48:	1806943a 	slli	r3,r3,16
 c008f4c:	9de6983a 	sll	r19,r19,r23
 c008f50:	e73fffcc 	andi	fp,fp,65535
 c008f54:	1f07883a 	add	r3,r3,fp
 c008f58:	98ffbd2e 	bgeu	r19,r3,c008e50 <__alt_data_end+0xfc008e50>
 c008f5c:	90bfffc4 	addi	r2,r18,-1
 c008f60:	0007883a 	mov	r3,zero
 c008f64:	003f4e06 	br	c008ca0 <__alt_data_end+0xfc008ca0>
 c008f68:	00800604 	movi	r2,24
 c008f6c:	003ef506 	br	c008b44 <__alt_data_end+0xfc008b44>
 c008f70:	00800604 	movi	r2,24
 c008f74:	003f0b06 	br	c008ba4 <__alt_data_end+0xfc008ba4>
 c008f78:	00800604 	movi	r2,24
 c008f7c:	003ead06 	br	c008a34 <__alt_data_end+0xfc008a34>
 c008f80:	0007883a 	mov	r3,zero
 c008f84:	00800044 	movi	r2,1
 c008f88:	003f4506 	br	c008ca0 <__alt_data_end+0xfc008ca0>
 c008f8c:	80bf8e2e 	bgeu	r16,r2,c008dc8 <__alt_data_end+0xfc008dc8>
 c008f90:	8c7fff84 	addi	r17,r17,-2
 c008f94:	8721883a 	add	r16,r16,fp
 c008f98:	003f8c06 	br	c008dcc <__alt_data_end+0xfc008dcc>
 c008f9c:	18bf762e 	bgeu	r3,r2,c008d78 <__alt_data_end+0xfc008d78>
 c008fa0:	ad7fff84 	addi	r21,r21,-2
 c008fa4:	1f07883a 	add	r3,r3,fp
 c008fa8:	003f7406 	br	c008d7c <__alt_data_end+0xfc008d7c>
 c008fac:	1839883a 	mov	fp,r3
 c008fb0:	003fdd06 	br	c008f28 <__alt_data_end+0xfc008f28>
 c008fb4:	182f883a 	mov	r23,r3
 c008fb8:	003fc506 	br	c008ed0 <__alt_data_end+0xfc008ed0>
 c008fbc:	b5bfff84 	addi	r22,r22,-2
 c008fc0:	3c4f883a 	add	r7,r7,r17
 c008fc4:	003f1a06 	br	c008c30 <__alt_data_end+0xfc008c30>
 c008fc8:	b5bfff84 	addi	r22,r22,-2
 c008fcc:	1c47883a 	add	r3,r3,r17
 c008fd0:	003ebc06 	br	c008ac4 <__alt_data_end+0xfc008ac4>

0c008fd4 <__umoddi3>:
 c008fd4:	defff304 	addi	sp,sp,-52
 c008fd8:	df000b15 	stw	fp,44(sp)
 c008fdc:	dc400415 	stw	r17,16(sp)
 c008fe0:	dc000315 	stw	r16,12(sp)
 c008fe4:	dfc00c15 	stw	ra,48(sp)
 c008fe8:	ddc00a15 	stw	r23,40(sp)
 c008fec:	dd800915 	stw	r22,36(sp)
 c008ff0:	dd400815 	stw	r21,32(sp)
 c008ff4:	dd000715 	stw	r20,28(sp)
 c008ff8:	dcc00615 	stw	r19,24(sp)
 c008ffc:	dc800515 	stw	r18,20(sp)
 c009000:	2021883a 	mov	r16,r4
 c009004:	2823883a 	mov	r17,r5
 c009008:	2839883a 	mov	fp,r5
 c00900c:	3800401e 	bne	r7,zero,c009110 <__umoddi3+0x13c>
 c009010:	3027883a 	mov	r19,r6
 c009014:	2029883a 	mov	r20,r4
 c009018:	2980552e 	bgeu	r5,r6,c009170 <__umoddi3+0x19c>
 c00901c:	00bfffd4 	movui	r2,65535
 c009020:	1180a236 	bltu	r2,r6,c0092ac <__umoddi3+0x2d8>
 c009024:	01003fc4 	movi	r4,255
 c009028:	2189803a 	cmpltu	r4,r4,r6
 c00902c:	200890fa 	slli	r4,r4,3
 c009030:	3104d83a 	srl	r2,r6,r4
 c009034:	00c30074 	movhi	r3,3073
 c009038:	18f90504 	addi	r3,r3,-7148
 c00903c:	1885883a 	add	r2,r3,r2
 c009040:	10c00003 	ldbu	r3,0(r2)
 c009044:	00800804 	movi	r2,32
 c009048:	1909883a 	add	r4,r3,r4
 c00904c:	1125c83a 	sub	r18,r2,r4
 c009050:	90000526 	beq	r18,zero,c009068 <__umoddi3+0x94>
 c009054:	8ca2983a 	sll	r17,r17,r18
 c009058:	8108d83a 	srl	r4,r16,r4
 c00905c:	34a6983a 	sll	r19,r6,r18
 c009060:	84a8983a 	sll	r20,r16,r18
 c009064:	2478b03a 	or	fp,r4,r17
 c009068:	982cd43a 	srli	r22,r19,16
 c00906c:	e009883a 	mov	r4,fp
 c009070:	9dffffcc 	andi	r23,r19,65535
 c009074:	b00b883a 	mov	r5,r22
 c009078:	c000b300 	call	c000b30 <__umodsi3>
 c00907c:	b00b883a 	mov	r5,r22
 c009080:	e009883a 	mov	r4,fp
 c009084:	102b883a 	mov	r21,r2
 c009088:	c000acc0 	call	c000acc <__udivsi3>
 c00908c:	100b883a 	mov	r5,r2
 c009090:	b809883a 	mov	r4,r23
 c009094:	c000b880 	call	c000b88 <__mulsi3>
 c009098:	a82a943a 	slli	r21,r21,16
 c00909c:	a006d43a 	srli	r3,r20,16
 c0090a0:	1d46b03a 	or	r3,r3,r21
 c0090a4:	1880032e 	bgeu	r3,r2,c0090b4 <__umoddi3+0xe0>
 c0090a8:	1cc7883a 	add	r3,r3,r19
 c0090ac:	1cc00136 	bltu	r3,r19,c0090b4 <__umoddi3+0xe0>
 c0090b0:	18813136 	bltu	r3,r2,c009578 <__umoddi3+0x5a4>
 c0090b4:	18a1c83a 	sub	r16,r3,r2
 c0090b8:	b00b883a 	mov	r5,r22
 c0090bc:	8009883a 	mov	r4,r16
 c0090c0:	c000b300 	call	c000b30 <__umodsi3>
 c0090c4:	b00b883a 	mov	r5,r22
 c0090c8:	8009883a 	mov	r4,r16
 c0090cc:	1023883a 	mov	r17,r2
 c0090d0:	c000acc0 	call	c000acc <__udivsi3>
 c0090d4:	100b883a 	mov	r5,r2
 c0090d8:	b809883a 	mov	r4,r23
 c0090dc:	8822943a 	slli	r17,r17,16
 c0090e0:	c000b880 	call	c000b88 <__mulsi3>
 c0090e4:	a0ffffcc 	andi	r3,r20,65535
 c0090e8:	1c46b03a 	or	r3,r3,r17
 c0090ec:	1880042e 	bgeu	r3,r2,c009100 <__umoddi3+0x12c>
 c0090f0:	1cc7883a 	add	r3,r3,r19
 c0090f4:	1cc00236 	bltu	r3,r19,c009100 <__umoddi3+0x12c>
 c0090f8:	1880012e 	bgeu	r3,r2,c009100 <__umoddi3+0x12c>
 c0090fc:	1cc7883a 	add	r3,r3,r19
 c009100:	1885c83a 	sub	r2,r3,r2
 c009104:	1484d83a 	srl	r2,r2,r18
 c009108:	0007883a 	mov	r3,zero
 c00910c:	00005306 	br	c00925c <__umoddi3+0x288>
 c009110:	29c05036 	bltu	r5,r7,c009254 <__umoddi3+0x280>
 c009114:	00bfffd4 	movui	r2,65535
 c009118:	11c05c2e 	bgeu	r2,r7,c00928c <__umoddi3+0x2b8>
 c00911c:	00804034 	movhi	r2,256
 c009120:	10bfffc4 	addi	r2,r2,-1
 c009124:	11c10636 	bltu	r2,r7,c009540 <__umoddi3+0x56c>
 c009128:	01000404 	movi	r4,16
 c00912c:	3904d83a 	srl	r2,r7,r4
 c009130:	00c30074 	movhi	r3,3073
 c009134:	18f90504 	addi	r3,r3,-7148
 c009138:	1885883a 	add	r2,r3,r2
 c00913c:	14c00003 	ldbu	r19,0(r2)
 c009140:	00c00804 	movi	r3,32
 c009144:	9927883a 	add	r19,r19,r4
 c009148:	1ce9c83a 	sub	r20,r3,r19
 c00914c:	a0005c1e 	bne	r20,zero,c0092c0 <__umoddi3+0x2ec>
 c009150:	3c400136 	bltu	r7,r17,c009158 <__umoddi3+0x184>
 c009154:	81810a36 	bltu	r16,r6,c009580 <__umoddi3+0x5ac>
 c009158:	8185c83a 	sub	r2,r16,r6
 c00915c:	89e3c83a 	sub	r17,r17,r7
 c009160:	8089803a 	cmpltu	r4,r16,r2
 c009164:	8939c83a 	sub	fp,r17,r4
 c009168:	e007883a 	mov	r3,fp
 c00916c:	00003b06 	br	c00925c <__umoddi3+0x288>
 c009170:	3000041e 	bne	r6,zero,c009184 <__umoddi3+0x1b0>
 c009174:	000b883a 	mov	r5,zero
 c009178:	01000044 	movi	r4,1
 c00917c:	c000acc0 	call	c000acc <__udivsi3>
 c009180:	1027883a 	mov	r19,r2
 c009184:	00bfffd4 	movui	r2,65535
 c009188:	14c0442e 	bgeu	r2,r19,c00929c <__umoddi3+0x2c8>
 c00918c:	00804034 	movhi	r2,256
 c009190:	10bfffc4 	addi	r2,r2,-1
 c009194:	14c0ec36 	bltu	r2,r19,c009548 <__umoddi3+0x574>
 c009198:	00800404 	movi	r2,16
 c00919c:	9886d83a 	srl	r3,r19,r2
 c0091a0:	01030074 	movhi	r4,3073
 c0091a4:	21390504 	addi	r4,r4,-7148
 c0091a8:	20c7883a 	add	r3,r4,r3
 c0091ac:	18c00003 	ldbu	r3,0(r3)
 c0091b0:	1887883a 	add	r3,r3,r2
 c0091b4:	00800804 	movi	r2,32
 c0091b8:	10e5c83a 	sub	r18,r2,r3
 c0091bc:	9000ab1e 	bne	r18,zero,c00946c <__umoddi3+0x498>
 c0091c0:	982cd43a 	srli	r22,r19,16
 c0091c4:	8ce3c83a 	sub	r17,r17,r19
 c0091c8:	9dffffcc 	andi	r23,r19,65535
 c0091cc:	b00b883a 	mov	r5,r22
 c0091d0:	8809883a 	mov	r4,r17
 c0091d4:	c000b300 	call	c000b30 <__umodsi3>
 c0091d8:	b00b883a 	mov	r5,r22
 c0091dc:	8809883a 	mov	r4,r17
 c0091e0:	102b883a 	mov	r21,r2
 c0091e4:	c000acc0 	call	c000acc <__udivsi3>
 c0091e8:	b80b883a 	mov	r5,r23
 c0091ec:	1009883a 	mov	r4,r2
 c0091f0:	c000b880 	call	c000b88 <__mulsi3>
 c0091f4:	a82a943a 	slli	r21,r21,16
 c0091f8:	a006d43a 	srli	r3,r20,16
 c0091fc:	1d46b03a 	or	r3,r3,r21
 c009200:	1880042e 	bgeu	r3,r2,c009214 <__umoddi3+0x240>
 c009204:	1cc7883a 	add	r3,r3,r19
 c009208:	1cc00236 	bltu	r3,r19,c009214 <__umoddi3+0x240>
 c00920c:	1880012e 	bgeu	r3,r2,c009214 <__umoddi3+0x240>
 c009210:	1cc7883a 	add	r3,r3,r19
 c009214:	18a1c83a 	sub	r16,r3,r2
 c009218:	b00b883a 	mov	r5,r22
 c00921c:	8009883a 	mov	r4,r16
 c009220:	c000b300 	call	c000b30 <__umodsi3>
 c009224:	1023883a 	mov	r17,r2
 c009228:	b00b883a 	mov	r5,r22
 c00922c:	8009883a 	mov	r4,r16
 c009230:	c000acc0 	call	c000acc <__udivsi3>
 c009234:	8822943a 	slli	r17,r17,16
 c009238:	b80b883a 	mov	r5,r23
 c00923c:	1009883a 	mov	r4,r2
 c009240:	c000b880 	call	c000b88 <__mulsi3>
 c009244:	a53fffcc 	andi	r20,r20,65535
 c009248:	a446b03a 	or	r3,r20,r17
 c00924c:	18bfac2e 	bgeu	r3,r2,c009100 <__alt_data_end+0xfc009100>
 c009250:	003fa706 	br	c0090f0 <__alt_data_end+0xfc0090f0>
 c009254:	2005883a 	mov	r2,r4
 c009258:	2807883a 	mov	r3,r5
 c00925c:	dfc00c17 	ldw	ra,48(sp)
 c009260:	df000b17 	ldw	fp,44(sp)
 c009264:	ddc00a17 	ldw	r23,40(sp)
 c009268:	dd800917 	ldw	r22,36(sp)
 c00926c:	dd400817 	ldw	r21,32(sp)
 c009270:	dd000717 	ldw	r20,28(sp)
 c009274:	dcc00617 	ldw	r19,24(sp)
 c009278:	dc800517 	ldw	r18,20(sp)
 c00927c:	dc400417 	ldw	r17,16(sp)
 c009280:	dc000317 	ldw	r16,12(sp)
 c009284:	dec00d04 	addi	sp,sp,52
 c009288:	f800283a 	ret
 c00928c:	04c03fc4 	movi	r19,255
 c009290:	99c9803a 	cmpltu	r4,r19,r7
 c009294:	200890fa 	slli	r4,r4,3
 c009298:	003fa406 	br	c00912c <__alt_data_end+0xfc00912c>
 c00929c:	00803fc4 	movi	r2,255
 c0092a0:	14c5803a 	cmpltu	r2,r2,r19
 c0092a4:	100490fa 	slli	r2,r2,3
 c0092a8:	003fbc06 	br	c00919c <__alt_data_end+0xfc00919c>
 c0092ac:	00804034 	movhi	r2,256
 c0092b0:	10bfffc4 	addi	r2,r2,-1
 c0092b4:	1180a636 	bltu	r2,r6,c009550 <__umoddi3+0x57c>
 c0092b8:	01000404 	movi	r4,16
 c0092bc:	003f5c06 	br	c009030 <__alt_data_end+0xfc009030>
 c0092c0:	3d0e983a 	sll	r7,r7,r20
 c0092c4:	34ead83a 	srl	r21,r6,r19
 c0092c8:	8cc6d83a 	srl	r3,r17,r19
 c0092cc:	8d10983a 	sll	r8,r17,r20
 c0092d0:	3d6ab03a 	or	r21,r7,r21
 c0092d4:	a82cd43a 	srli	r22,r21,16
 c0092d8:	84e2d83a 	srl	r17,r16,r19
 c0092dc:	1809883a 	mov	r4,r3
 c0092e0:	b00b883a 	mov	r5,r22
 c0092e4:	8a22b03a 	or	r17,r17,r8
 c0092e8:	3524983a 	sll	r18,r6,r20
 c0092ec:	dc400015 	stw	r17,0(sp)
 c0092f0:	d8c00115 	stw	r3,4(sp)
 c0092f4:	c000b300 	call	c000b30 <__umodsi3>
 c0092f8:	d8c00117 	ldw	r3,4(sp)
 c0092fc:	b00b883a 	mov	r5,r22
 c009300:	1039883a 	mov	fp,r2
 c009304:	1809883a 	mov	r4,r3
 c009308:	c000acc0 	call	c000acc <__udivsi3>
 c00930c:	adffffcc 	andi	r23,r21,65535
 c009310:	100b883a 	mov	r5,r2
 c009314:	b809883a 	mov	r4,r23
 c009318:	1023883a 	mov	r17,r2
 c00931c:	c000b880 	call	c000b88 <__mulsi3>
 c009320:	d9400017 	ldw	r5,0(sp)
 c009324:	e008943a 	slli	r4,fp,16
 c009328:	8520983a 	sll	r16,r16,r20
 c00932c:	2806d43a 	srli	r3,r5,16
 c009330:	1906b03a 	or	r3,r3,r4
 c009334:	1880042e 	bgeu	r3,r2,c009348 <__umoddi3+0x374>
 c009338:	1d47883a 	add	r3,r3,r21
 c00933c:	893fffc4 	addi	r4,r17,-1
 c009340:	1d40892e 	bgeu	r3,r21,c009568 <__umoddi3+0x594>
 c009344:	2023883a 	mov	r17,r4
 c009348:	18b9c83a 	sub	fp,r3,r2
 c00934c:	b00b883a 	mov	r5,r22
 c009350:	e009883a 	mov	r4,fp
 c009354:	c000b300 	call	c000b30 <__umodsi3>
 c009358:	b00b883a 	mov	r5,r22
 c00935c:	e009883a 	mov	r4,fp
 c009360:	d8800215 	stw	r2,8(sp)
 c009364:	c000acc0 	call	c000acc <__udivsi3>
 c009368:	100b883a 	mov	r5,r2
 c00936c:	b809883a 	mov	r4,r23
 c009370:	102d883a 	mov	r22,r2
 c009374:	c000b880 	call	c000b88 <__mulsi3>
 c009378:	d9800217 	ldw	r6,8(sp)
 c00937c:	d8c00017 	ldw	r3,0(sp)
 c009380:	300c943a 	slli	r6,r6,16
 c009384:	1a3fffcc 	andi	r8,r3,65535
 c009388:	4190b03a 	or	r8,r8,r6
 c00938c:	4080042e 	bgeu	r8,r2,c0093a0 <__umoddi3+0x3cc>
 c009390:	4551883a 	add	r8,r8,r21
 c009394:	b0ffffc4 	addi	r3,r22,-1
 c009398:	45406f2e 	bgeu	r8,r21,c009558 <__umoddi3+0x584>
 c00939c:	182d883a 	mov	r22,r3
 c0093a0:	880e943a 	slli	r7,r17,16
 c0093a4:	9006d43a 	srli	r3,r18,16
 c0093a8:	91bfffcc 	andi	r6,r18,65535
 c0093ac:	3dacb03a 	or	r22,r7,r22
 c0093b0:	b02ed43a 	srli	r23,r22,16
 c0093b4:	b5bfffcc 	andi	r22,r22,65535
 c0093b8:	300b883a 	mov	r5,r6
 c0093bc:	b009883a 	mov	r4,r22
 c0093c0:	40a3c83a 	sub	r17,r8,r2
 c0093c4:	d8c00115 	stw	r3,4(sp)
 c0093c8:	d9800215 	stw	r6,8(sp)
 c0093cc:	c000b880 	call	c000b88 <__mulsi3>
 c0093d0:	d9800217 	ldw	r6,8(sp)
 c0093d4:	b809883a 	mov	r4,r23
 c0093d8:	1039883a 	mov	fp,r2
 c0093dc:	300b883a 	mov	r5,r6
 c0093e0:	c000b880 	call	c000b88 <__mulsi3>
 c0093e4:	d8c00117 	ldw	r3,4(sp)
 c0093e8:	b809883a 	mov	r4,r23
 c0093ec:	d8800215 	stw	r2,8(sp)
 c0093f0:	180b883a 	mov	r5,r3
 c0093f4:	c000b880 	call	c000b88 <__mulsi3>
 c0093f8:	d8c00117 	ldw	r3,4(sp)
 c0093fc:	b009883a 	mov	r4,r22
 c009400:	102f883a 	mov	r23,r2
 c009404:	180b883a 	mov	r5,r3
 c009408:	c000b880 	call	c000b88 <__mulsi3>
 c00940c:	d9800217 	ldw	r6,8(sp)
 c009410:	e006d43a 	srli	r3,fp,16
 c009414:	1185883a 	add	r2,r2,r6
 c009418:	1885883a 	add	r2,r3,r2
 c00941c:	1180022e 	bgeu	r2,r6,c009428 <__umoddi3+0x454>
 c009420:	00c00074 	movhi	r3,1
 c009424:	b8ef883a 	add	r23,r23,r3
 c009428:	1006d43a 	srli	r3,r2,16
 c00942c:	1004943a 	slli	r2,r2,16
 c009430:	e73fffcc 	andi	fp,fp,65535
 c009434:	1dc7883a 	add	r3,r3,r23
 c009438:	1739883a 	add	fp,r2,fp
 c00943c:	88c03a36 	bltu	r17,r3,c009528 <__umoddi3+0x554>
 c009440:	88c05126 	beq	r17,r3,c009588 <__umoddi3+0x5b4>
 c009444:	88c9c83a 	sub	r4,r17,r3
 c009448:	e00f883a 	mov	r7,fp
 c00944c:	81cfc83a 	sub	r7,r16,r7
 c009450:	81c7803a 	cmpltu	r3,r16,r7
 c009454:	20c7c83a 	sub	r3,r4,r3
 c009458:	1cc4983a 	sll	r2,r3,r19
 c00945c:	3d0ed83a 	srl	r7,r7,r20
 c009460:	1d06d83a 	srl	r3,r3,r20
 c009464:	11c4b03a 	or	r2,r2,r7
 c009468:	003f7c06 	br	c00925c <__alt_data_end+0xfc00925c>
 c00946c:	9ca6983a 	sll	r19,r19,r18
 c009470:	88f8d83a 	srl	fp,r17,r3
 c009474:	80c4d83a 	srl	r2,r16,r3
 c009478:	982cd43a 	srli	r22,r19,16
 c00947c:	8ca2983a 	sll	r17,r17,r18
 c009480:	e009883a 	mov	r4,fp
 c009484:	b00b883a 	mov	r5,r22
 c009488:	146ab03a 	or	r21,r2,r17
 c00948c:	c000b300 	call	c000b30 <__umodsi3>
 c009490:	b00b883a 	mov	r5,r22
 c009494:	e009883a 	mov	r4,fp
 c009498:	1029883a 	mov	r20,r2
 c00949c:	9dffffcc 	andi	r23,r19,65535
 c0094a0:	c000acc0 	call	c000acc <__udivsi3>
 c0094a4:	b809883a 	mov	r4,r23
 c0094a8:	100b883a 	mov	r5,r2
 c0094ac:	c000b880 	call	c000b88 <__mulsi3>
 c0094b0:	a008943a 	slli	r4,r20,16
 c0094b4:	a806d43a 	srli	r3,r21,16
 c0094b8:	84a8983a 	sll	r20,r16,r18
 c0094bc:	1906b03a 	or	r3,r3,r4
 c0094c0:	1880042e 	bgeu	r3,r2,c0094d4 <__umoddi3+0x500>
 c0094c4:	1cc7883a 	add	r3,r3,r19
 c0094c8:	1cc00236 	bltu	r3,r19,c0094d4 <__umoddi3+0x500>
 c0094cc:	1880012e 	bgeu	r3,r2,c0094d4 <__umoddi3+0x500>
 c0094d0:	1cc7883a 	add	r3,r3,r19
 c0094d4:	18a3c83a 	sub	r17,r3,r2
 c0094d8:	b00b883a 	mov	r5,r22
 c0094dc:	8809883a 	mov	r4,r17
 c0094e0:	c000b300 	call	c000b30 <__umodsi3>
 c0094e4:	b00b883a 	mov	r5,r22
 c0094e8:	8809883a 	mov	r4,r17
 c0094ec:	1021883a 	mov	r16,r2
 c0094f0:	c000acc0 	call	c000acc <__udivsi3>
 c0094f4:	100b883a 	mov	r5,r2
 c0094f8:	b809883a 	mov	r4,r23
 c0094fc:	8020943a 	slli	r16,r16,16
 c009500:	c000b880 	call	c000b88 <__mulsi3>
 c009504:	a8ffffcc 	andi	r3,r21,65535
 c009508:	1c06b03a 	or	r3,r3,r16
 c00950c:	1880042e 	bgeu	r3,r2,c009520 <__umoddi3+0x54c>
 c009510:	1cc7883a 	add	r3,r3,r19
 c009514:	1cc00236 	bltu	r3,r19,c009520 <__umoddi3+0x54c>
 c009518:	1880012e 	bgeu	r3,r2,c009520 <__umoddi3+0x54c>
 c00951c:	1cc7883a 	add	r3,r3,r19
 c009520:	18a3c83a 	sub	r17,r3,r2
 c009524:	003f2906 	br	c0091cc <__alt_data_end+0xfc0091cc>
 c009528:	e48fc83a 	sub	r7,fp,r18
 c00952c:	1d49c83a 	sub	r4,r3,r21
 c009530:	e1f9803a 	cmpltu	fp,fp,r7
 c009534:	2739c83a 	sub	fp,r4,fp
 c009538:	8f09c83a 	sub	r4,r17,fp
 c00953c:	003fc306 	br	c00944c <__alt_data_end+0xfc00944c>
 c009540:	01000604 	movi	r4,24
 c009544:	003ef906 	br	c00912c <__alt_data_end+0xfc00912c>
 c009548:	00800604 	movi	r2,24
 c00954c:	003f1306 	br	c00919c <__alt_data_end+0xfc00919c>
 c009550:	01000604 	movi	r4,24
 c009554:	003eb606 	br	c009030 <__alt_data_end+0xfc009030>
 c009558:	40bf902e 	bgeu	r8,r2,c00939c <__alt_data_end+0xfc00939c>
 c00955c:	b5bfff84 	addi	r22,r22,-2
 c009560:	4551883a 	add	r8,r8,r21
 c009564:	003f8e06 	br	c0093a0 <__alt_data_end+0xfc0093a0>
 c009568:	18bf762e 	bgeu	r3,r2,c009344 <__alt_data_end+0xfc009344>
 c00956c:	8c7fff84 	addi	r17,r17,-2
 c009570:	1d47883a 	add	r3,r3,r21
 c009574:	003f7406 	br	c009348 <__alt_data_end+0xfc009348>
 c009578:	1cc7883a 	add	r3,r3,r19
 c00957c:	003ecd06 	br	c0090b4 <__alt_data_end+0xfc0090b4>
 c009580:	8005883a 	mov	r2,r16
 c009584:	003ef806 	br	c009168 <__alt_data_end+0xfc009168>
 c009588:	873fe736 	bltu	r16,fp,c009528 <__alt_data_end+0xfc009528>
 c00958c:	e00f883a 	mov	r7,fp
 c009590:	0009883a 	mov	r4,zero
 c009594:	003fad06 	br	c00944c <__alt_data_end+0xfc00944c>

0c009598 <__adddf3>:
 c009598:	02c00434 	movhi	r11,16
 c00959c:	5affffc4 	addi	r11,r11,-1
 c0095a0:	2806d7fa 	srli	r3,r5,31
 c0095a4:	2ad4703a 	and	r10,r5,r11
 c0095a8:	3ad2703a 	and	r9,r7,r11
 c0095ac:	3804d53a 	srli	r2,r7,20
 c0095b0:	3018d77a 	srli	r12,r6,29
 c0095b4:	280ad53a 	srli	r5,r5,20
 c0095b8:	501490fa 	slli	r10,r10,3
 c0095bc:	2010d77a 	srli	r8,r4,29
 c0095c0:	481290fa 	slli	r9,r9,3
 c0095c4:	380ed7fa 	srli	r7,r7,31
 c0095c8:	defffb04 	addi	sp,sp,-20
 c0095cc:	dc800215 	stw	r18,8(sp)
 c0095d0:	dc400115 	stw	r17,4(sp)
 c0095d4:	dc000015 	stw	r16,0(sp)
 c0095d8:	dfc00415 	stw	ra,16(sp)
 c0095dc:	dcc00315 	stw	r19,12(sp)
 c0095e0:	1c803fcc 	andi	r18,r3,255
 c0095e4:	2c01ffcc 	andi	r16,r5,2047
 c0095e8:	5210b03a 	or	r8,r10,r8
 c0095ec:	202290fa 	slli	r17,r4,3
 c0095f0:	1081ffcc 	andi	r2,r2,2047
 c0095f4:	4b12b03a 	or	r9,r9,r12
 c0095f8:	300c90fa 	slli	r6,r6,3
 c0095fc:	91c07526 	beq	r18,r7,c0097d4 <__adddf3+0x23c>
 c009600:	8087c83a 	sub	r3,r16,r2
 c009604:	00c0ab0e 	bge	zero,r3,c0098b4 <__adddf3+0x31c>
 c009608:	10002a1e 	bne	r2,zero,c0096b4 <__adddf3+0x11c>
 c00960c:	4984b03a 	or	r2,r9,r6
 c009610:	1000961e 	bne	r2,zero,c00986c <__adddf3+0x2d4>
 c009614:	888001cc 	andi	r2,r17,7
 c009618:	10000726 	beq	r2,zero,c009638 <__adddf3+0xa0>
 c00961c:	888003cc 	andi	r2,r17,15
 c009620:	00c00104 	movi	r3,4
 c009624:	10c00426 	beq	r2,r3,c009638 <__adddf3+0xa0>
 c009628:	88c7883a 	add	r3,r17,r3
 c00962c:	1c63803a 	cmpltu	r17,r3,r17
 c009630:	4451883a 	add	r8,r8,r17
 c009634:	1823883a 	mov	r17,r3
 c009638:	4080202c 	andhi	r2,r8,128
 c00963c:	10005926 	beq	r2,zero,c0097a4 <__adddf3+0x20c>
 c009640:	84000044 	addi	r16,r16,1
 c009644:	0081ffc4 	movi	r2,2047
 c009648:	8080ba26 	beq	r16,r2,c009934 <__adddf3+0x39c>
 c00964c:	00bfe034 	movhi	r2,65408
 c009650:	10bfffc4 	addi	r2,r2,-1
 c009654:	4090703a 	and	r8,r8,r2
 c009658:	4004977a 	slli	r2,r8,29
 c00965c:	4010927a 	slli	r8,r8,9
 c009660:	8822d0fa 	srli	r17,r17,3
 c009664:	8401ffcc 	andi	r16,r16,2047
 c009668:	4010d33a 	srli	r8,r8,12
 c00966c:	9007883a 	mov	r3,r18
 c009670:	1444b03a 	or	r2,r2,r17
 c009674:	8401ffcc 	andi	r16,r16,2047
 c009678:	8020953a 	slli	r16,r16,20
 c00967c:	18c03fcc 	andi	r3,r3,255
 c009680:	01000434 	movhi	r4,16
 c009684:	213fffc4 	addi	r4,r4,-1
 c009688:	180697fa 	slli	r3,r3,31
 c00968c:	4110703a 	and	r8,r8,r4
 c009690:	4410b03a 	or	r8,r8,r16
 c009694:	40c6b03a 	or	r3,r8,r3
 c009698:	dfc00417 	ldw	ra,16(sp)
 c00969c:	dcc00317 	ldw	r19,12(sp)
 c0096a0:	dc800217 	ldw	r18,8(sp)
 c0096a4:	dc400117 	ldw	r17,4(sp)
 c0096a8:	dc000017 	ldw	r16,0(sp)
 c0096ac:	dec00504 	addi	sp,sp,20
 c0096b0:	f800283a 	ret
 c0096b4:	0081ffc4 	movi	r2,2047
 c0096b8:	80bfd626 	beq	r16,r2,c009614 <__alt_data_end+0xfc009614>
 c0096bc:	4a402034 	orhi	r9,r9,128
 c0096c0:	00800e04 	movi	r2,56
 c0096c4:	10c09f16 	blt	r2,r3,c009944 <__adddf3+0x3ac>
 c0096c8:	008007c4 	movi	r2,31
 c0096cc:	10c0c216 	blt	r2,r3,c0099d8 <__adddf3+0x440>
 c0096d0:	00800804 	movi	r2,32
 c0096d4:	10c5c83a 	sub	r2,r2,r3
 c0096d8:	488a983a 	sll	r5,r9,r2
 c0096dc:	30c8d83a 	srl	r4,r6,r3
 c0096e0:	3084983a 	sll	r2,r6,r2
 c0096e4:	48c6d83a 	srl	r3,r9,r3
 c0096e8:	290cb03a 	or	r6,r5,r4
 c0096ec:	1004c03a 	cmpne	r2,r2,zero
 c0096f0:	308cb03a 	or	r6,r6,r2
 c0096f4:	898dc83a 	sub	r6,r17,r6
 c0096f8:	89a3803a 	cmpltu	r17,r17,r6
 c0096fc:	40d1c83a 	sub	r8,r8,r3
 c009700:	4451c83a 	sub	r8,r8,r17
 c009704:	3023883a 	mov	r17,r6
 c009708:	4080202c 	andhi	r2,r8,128
 c00970c:	10002326 	beq	r2,zero,c00979c <__adddf3+0x204>
 c009710:	04c02034 	movhi	r19,128
 c009714:	9cffffc4 	addi	r19,r19,-1
 c009718:	44e6703a 	and	r19,r8,r19
 c00971c:	98007626 	beq	r19,zero,c0098f8 <__adddf3+0x360>
 c009720:	9809883a 	mov	r4,r19
 c009724:	c00bdd80 	call	c00bdd8 <__clzsi2>
 c009728:	10fffe04 	addi	r3,r2,-8
 c00972c:	010007c4 	movi	r4,31
 c009730:	20c07716 	blt	r4,r3,c009910 <__adddf3+0x378>
 c009734:	00800804 	movi	r2,32
 c009738:	10c5c83a 	sub	r2,r2,r3
 c00973c:	8884d83a 	srl	r2,r17,r2
 c009740:	98d0983a 	sll	r8,r19,r3
 c009744:	88e2983a 	sll	r17,r17,r3
 c009748:	1204b03a 	or	r2,r2,r8
 c00974c:	1c007416 	blt	r3,r16,c009920 <__adddf3+0x388>
 c009750:	1c21c83a 	sub	r16,r3,r16
 c009754:	82000044 	addi	r8,r16,1
 c009758:	00c007c4 	movi	r3,31
 c00975c:	1a009116 	blt	r3,r8,c0099a4 <__adddf3+0x40c>
 c009760:	00c00804 	movi	r3,32
 c009764:	1a07c83a 	sub	r3,r3,r8
 c009768:	8a08d83a 	srl	r4,r17,r8
 c00976c:	88e2983a 	sll	r17,r17,r3
 c009770:	10c6983a 	sll	r3,r2,r3
 c009774:	1210d83a 	srl	r8,r2,r8
 c009778:	8804c03a 	cmpne	r2,r17,zero
 c00977c:	1906b03a 	or	r3,r3,r4
 c009780:	18a2b03a 	or	r17,r3,r2
 c009784:	0021883a 	mov	r16,zero
 c009788:	003fa206 	br	c009614 <__alt_data_end+0xfc009614>
 c00978c:	1890b03a 	or	r8,r3,r2
 c009790:	40017d26 	beq	r8,zero,c009d88 <__adddf3+0x7f0>
 c009794:	1011883a 	mov	r8,r2
 c009798:	1823883a 	mov	r17,r3
 c00979c:	888001cc 	andi	r2,r17,7
 c0097a0:	103f9e1e 	bne	r2,zero,c00961c <__alt_data_end+0xfc00961c>
 c0097a4:	4004977a 	slli	r2,r8,29
 c0097a8:	8822d0fa 	srli	r17,r17,3
 c0097ac:	4010d0fa 	srli	r8,r8,3
 c0097b0:	9007883a 	mov	r3,r18
 c0097b4:	1444b03a 	or	r2,r2,r17
 c0097b8:	0101ffc4 	movi	r4,2047
 c0097bc:	81002426 	beq	r16,r4,c009850 <__adddf3+0x2b8>
 c0097c0:	8120703a 	and	r16,r16,r4
 c0097c4:	01000434 	movhi	r4,16
 c0097c8:	213fffc4 	addi	r4,r4,-1
 c0097cc:	4110703a 	and	r8,r8,r4
 c0097d0:	003fa806 	br	c009674 <__alt_data_end+0xfc009674>
 c0097d4:	8089c83a 	sub	r4,r16,r2
 c0097d8:	01005e0e 	bge	zero,r4,c009954 <__adddf3+0x3bc>
 c0097dc:	10002b26 	beq	r2,zero,c00988c <__adddf3+0x2f4>
 c0097e0:	0081ffc4 	movi	r2,2047
 c0097e4:	80bf8b26 	beq	r16,r2,c009614 <__alt_data_end+0xfc009614>
 c0097e8:	4a402034 	orhi	r9,r9,128
 c0097ec:	00800e04 	movi	r2,56
 c0097f0:	1100a40e 	bge	r2,r4,c009a84 <__adddf3+0x4ec>
 c0097f4:	498cb03a 	or	r6,r9,r6
 c0097f8:	300ac03a 	cmpne	r5,r6,zero
 c0097fc:	0013883a 	mov	r9,zero
 c009800:	2c4b883a 	add	r5,r5,r17
 c009804:	2c63803a 	cmpltu	r17,r5,r17
 c009808:	4a11883a 	add	r8,r9,r8
 c00980c:	8a11883a 	add	r8,r17,r8
 c009810:	2823883a 	mov	r17,r5
 c009814:	4080202c 	andhi	r2,r8,128
 c009818:	103fe026 	beq	r2,zero,c00979c <__alt_data_end+0xfc00979c>
 c00981c:	84000044 	addi	r16,r16,1
 c009820:	0081ffc4 	movi	r2,2047
 c009824:	8080d226 	beq	r16,r2,c009b70 <__adddf3+0x5d8>
 c009828:	00bfe034 	movhi	r2,65408
 c00982c:	10bfffc4 	addi	r2,r2,-1
 c009830:	4090703a 	and	r8,r8,r2
 c009834:	880ad07a 	srli	r5,r17,1
 c009838:	400897fa 	slli	r4,r8,31
 c00983c:	88c0004c 	andi	r3,r17,1
 c009840:	28e2b03a 	or	r17,r5,r3
 c009844:	4010d07a 	srli	r8,r8,1
 c009848:	2462b03a 	or	r17,r4,r17
 c00984c:	003f7106 	br	c009614 <__alt_data_end+0xfc009614>
 c009850:	4088b03a 	or	r4,r8,r2
 c009854:	20014526 	beq	r4,zero,c009d6c <__adddf3+0x7d4>
 c009858:	01000434 	movhi	r4,16
 c00985c:	42000234 	orhi	r8,r8,8
 c009860:	213fffc4 	addi	r4,r4,-1
 c009864:	4110703a 	and	r8,r8,r4
 c009868:	003f8206 	br	c009674 <__alt_data_end+0xfc009674>
 c00986c:	18ffffc4 	addi	r3,r3,-1
 c009870:	1800491e 	bne	r3,zero,c009998 <__adddf3+0x400>
 c009874:	898bc83a 	sub	r5,r17,r6
 c009878:	8963803a 	cmpltu	r17,r17,r5
 c00987c:	4251c83a 	sub	r8,r8,r9
 c009880:	4451c83a 	sub	r8,r8,r17
 c009884:	2823883a 	mov	r17,r5
 c009888:	003f9f06 	br	c009708 <__alt_data_end+0xfc009708>
 c00988c:	4984b03a 	or	r2,r9,r6
 c009890:	103f6026 	beq	r2,zero,c009614 <__alt_data_end+0xfc009614>
 c009894:	213fffc4 	addi	r4,r4,-1
 c009898:	2000931e 	bne	r4,zero,c009ae8 <__adddf3+0x550>
 c00989c:	898d883a 	add	r6,r17,r6
 c0098a0:	3463803a 	cmpltu	r17,r6,r17
 c0098a4:	4251883a 	add	r8,r8,r9
 c0098a8:	8a11883a 	add	r8,r17,r8
 c0098ac:	3023883a 	mov	r17,r6
 c0098b0:	003fd806 	br	c009814 <__alt_data_end+0xfc009814>
 c0098b4:	1800541e 	bne	r3,zero,c009a08 <__adddf3+0x470>
 c0098b8:	80800044 	addi	r2,r16,1
 c0098bc:	1081ffcc 	andi	r2,r2,2047
 c0098c0:	00c00044 	movi	r3,1
 c0098c4:	1880a00e 	bge	r3,r2,c009b48 <__adddf3+0x5b0>
 c0098c8:	8989c83a 	sub	r4,r17,r6
 c0098cc:	8905803a 	cmpltu	r2,r17,r4
 c0098d0:	4267c83a 	sub	r19,r8,r9
 c0098d4:	98a7c83a 	sub	r19,r19,r2
 c0098d8:	9880202c 	andhi	r2,r19,128
 c0098dc:	10006326 	beq	r2,zero,c009a6c <__adddf3+0x4d4>
 c0098e0:	3463c83a 	sub	r17,r6,r17
 c0098e4:	4a07c83a 	sub	r3,r9,r8
 c0098e8:	344d803a 	cmpltu	r6,r6,r17
 c0098ec:	19a7c83a 	sub	r19,r3,r6
 c0098f0:	3825883a 	mov	r18,r7
 c0098f4:	983f8a1e 	bne	r19,zero,c009720 <__alt_data_end+0xfc009720>
 c0098f8:	8809883a 	mov	r4,r17
 c0098fc:	c00bdd80 	call	c00bdd8 <__clzsi2>
 c009900:	10800804 	addi	r2,r2,32
 c009904:	10fffe04 	addi	r3,r2,-8
 c009908:	010007c4 	movi	r4,31
 c00990c:	20ff890e 	bge	r4,r3,c009734 <__alt_data_end+0xfc009734>
 c009910:	10bff604 	addi	r2,r2,-40
 c009914:	8884983a 	sll	r2,r17,r2
 c009918:	0023883a 	mov	r17,zero
 c00991c:	1c3f8c0e 	bge	r3,r16,c009750 <__alt_data_end+0xfc009750>
 c009920:	023fe034 	movhi	r8,65408
 c009924:	423fffc4 	addi	r8,r8,-1
 c009928:	80e1c83a 	sub	r16,r16,r3
 c00992c:	1210703a 	and	r8,r2,r8
 c009930:	003f3806 	br	c009614 <__alt_data_end+0xfc009614>
 c009934:	9007883a 	mov	r3,r18
 c009938:	0011883a 	mov	r8,zero
 c00993c:	0005883a 	mov	r2,zero
 c009940:	003f4c06 	br	c009674 <__alt_data_end+0xfc009674>
 c009944:	498cb03a 	or	r6,r9,r6
 c009948:	300cc03a 	cmpne	r6,r6,zero
 c00994c:	0007883a 	mov	r3,zero
 c009950:	003f6806 	br	c0096f4 <__alt_data_end+0xfc0096f4>
 c009954:	20009c1e 	bne	r4,zero,c009bc8 <__adddf3+0x630>
 c009958:	80800044 	addi	r2,r16,1
 c00995c:	1141ffcc 	andi	r5,r2,2047
 c009960:	01000044 	movi	r4,1
 c009964:	2140670e 	bge	r4,r5,c009b04 <__adddf3+0x56c>
 c009968:	0101ffc4 	movi	r4,2047
 c00996c:	11007f26 	beq	r2,r4,c009b6c <__adddf3+0x5d4>
 c009970:	898d883a 	add	r6,r17,r6
 c009974:	4247883a 	add	r3,r8,r9
 c009978:	3451803a 	cmpltu	r8,r6,r17
 c00997c:	40d1883a 	add	r8,r8,r3
 c009980:	402297fa 	slli	r17,r8,31
 c009984:	300cd07a 	srli	r6,r6,1
 c009988:	4010d07a 	srli	r8,r8,1
 c00998c:	1021883a 	mov	r16,r2
 c009990:	89a2b03a 	or	r17,r17,r6
 c009994:	003f1f06 	br	c009614 <__alt_data_end+0xfc009614>
 c009998:	0081ffc4 	movi	r2,2047
 c00999c:	80bf481e 	bne	r16,r2,c0096c0 <__alt_data_end+0xfc0096c0>
 c0099a0:	003f1c06 	br	c009614 <__alt_data_end+0xfc009614>
 c0099a4:	843ff844 	addi	r16,r16,-31
 c0099a8:	01000804 	movi	r4,32
 c0099ac:	1406d83a 	srl	r3,r2,r16
 c0099b0:	41005026 	beq	r8,r4,c009af4 <__adddf3+0x55c>
 c0099b4:	01001004 	movi	r4,64
 c0099b8:	2211c83a 	sub	r8,r4,r8
 c0099bc:	1204983a 	sll	r2,r2,r8
 c0099c0:	88a2b03a 	or	r17,r17,r2
 c0099c4:	8822c03a 	cmpne	r17,r17,zero
 c0099c8:	1c62b03a 	or	r17,r3,r17
 c0099cc:	0011883a 	mov	r8,zero
 c0099d0:	0021883a 	mov	r16,zero
 c0099d4:	003f7106 	br	c00979c <__alt_data_end+0xfc00979c>
 c0099d8:	193ff804 	addi	r4,r3,-32
 c0099dc:	00800804 	movi	r2,32
 c0099e0:	4908d83a 	srl	r4,r9,r4
 c0099e4:	18804526 	beq	r3,r2,c009afc <__adddf3+0x564>
 c0099e8:	00801004 	movi	r2,64
 c0099ec:	10c5c83a 	sub	r2,r2,r3
 c0099f0:	4886983a 	sll	r3,r9,r2
 c0099f4:	198cb03a 	or	r6,r3,r6
 c0099f8:	300cc03a 	cmpne	r6,r6,zero
 c0099fc:	218cb03a 	or	r6,r4,r6
 c009a00:	0007883a 	mov	r3,zero
 c009a04:	003f3b06 	br	c0096f4 <__alt_data_end+0xfc0096f4>
 c009a08:	80002a26 	beq	r16,zero,c009ab4 <__adddf3+0x51c>
 c009a0c:	0101ffc4 	movi	r4,2047
 c009a10:	11006826 	beq	r2,r4,c009bb4 <__adddf3+0x61c>
 c009a14:	00c7c83a 	sub	r3,zero,r3
 c009a18:	42002034 	orhi	r8,r8,128
 c009a1c:	01000e04 	movi	r4,56
 c009a20:	20c07c16 	blt	r4,r3,c009c14 <__adddf3+0x67c>
 c009a24:	010007c4 	movi	r4,31
 c009a28:	20c0da16 	blt	r4,r3,c009d94 <__adddf3+0x7fc>
 c009a2c:	01000804 	movi	r4,32
 c009a30:	20c9c83a 	sub	r4,r4,r3
 c009a34:	4114983a 	sll	r10,r8,r4
 c009a38:	88cad83a 	srl	r5,r17,r3
 c009a3c:	8908983a 	sll	r4,r17,r4
 c009a40:	40c6d83a 	srl	r3,r8,r3
 c009a44:	5162b03a 	or	r17,r10,r5
 c009a48:	2008c03a 	cmpne	r4,r4,zero
 c009a4c:	8922b03a 	or	r17,r17,r4
 c009a50:	3463c83a 	sub	r17,r6,r17
 c009a54:	48c7c83a 	sub	r3,r9,r3
 c009a58:	344d803a 	cmpltu	r6,r6,r17
 c009a5c:	1991c83a 	sub	r8,r3,r6
 c009a60:	1021883a 	mov	r16,r2
 c009a64:	3825883a 	mov	r18,r7
 c009a68:	003f2706 	br	c009708 <__alt_data_end+0xfc009708>
 c009a6c:	24d0b03a 	or	r8,r4,r19
 c009a70:	40001b1e 	bne	r8,zero,c009ae0 <__adddf3+0x548>
 c009a74:	0005883a 	mov	r2,zero
 c009a78:	0007883a 	mov	r3,zero
 c009a7c:	0021883a 	mov	r16,zero
 c009a80:	003f4d06 	br	c0097b8 <__alt_data_end+0xfc0097b8>
 c009a84:	008007c4 	movi	r2,31
 c009a88:	11003c16 	blt	r2,r4,c009b7c <__adddf3+0x5e4>
 c009a8c:	00800804 	movi	r2,32
 c009a90:	1105c83a 	sub	r2,r2,r4
 c009a94:	488e983a 	sll	r7,r9,r2
 c009a98:	310ad83a 	srl	r5,r6,r4
 c009a9c:	3084983a 	sll	r2,r6,r2
 c009aa0:	4912d83a 	srl	r9,r9,r4
 c009aa4:	394ab03a 	or	r5,r7,r5
 c009aa8:	1004c03a 	cmpne	r2,r2,zero
 c009aac:	288ab03a 	or	r5,r5,r2
 c009ab0:	003f5306 	br	c009800 <__alt_data_end+0xfc009800>
 c009ab4:	4448b03a 	or	r4,r8,r17
 c009ab8:	20003e26 	beq	r4,zero,c009bb4 <__adddf3+0x61c>
 c009abc:	00c6303a 	nor	r3,zero,r3
 c009ac0:	18003a1e 	bne	r3,zero,c009bac <__adddf3+0x614>
 c009ac4:	3463c83a 	sub	r17,r6,r17
 c009ac8:	4a07c83a 	sub	r3,r9,r8
 c009acc:	344d803a 	cmpltu	r6,r6,r17
 c009ad0:	1991c83a 	sub	r8,r3,r6
 c009ad4:	1021883a 	mov	r16,r2
 c009ad8:	3825883a 	mov	r18,r7
 c009adc:	003f0a06 	br	c009708 <__alt_data_end+0xfc009708>
 c009ae0:	2023883a 	mov	r17,r4
 c009ae4:	003f0d06 	br	c00971c <__alt_data_end+0xfc00971c>
 c009ae8:	0081ffc4 	movi	r2,2047
 c009aec:	80bf3f1e 	bne	r16,r2,c0097ec <__alt_data_end+0xfc0097ec>
 c009af0:	003ec806 	br	c009614 <__alt_data_end+0xfc009614>
 c009af4:	0005883a 	mov	r2,zero
 c009af8:	003fb106 	br	c0099c0 <__alt_data_end+0xfc0099c0>
 c009afc:	0007883a 	mov	r3,zero
 c009b00:	003fbc06 	br	c0099f4 <__alt_data_end+0xfc0099f4>
 c009b04:	4444b03a 	or	r2,r8,r17
 c009b08:	8000871e 	bne	r16,zero,c009d28 <__adddf3+0x790>
 c009b0c:	1000ba26 	beq	r2,zero,c009df8 <__adddf3+0x860>
 c009b10:	4984b03a 	or	r2,r9,r6
 c009b14:	103ebf26 	beq	r2,zero,c009614 <__alt_data_end+0xfc009614>
 c009b18:	8985883a 	add	r2,r17,r6
 c009b1c:	4247883a 	add	r3,r8,r9
 c009b20:	1451803a 	cmpltu	r8,r2,r17
 c009b24:	40d1883a 	add	r8,r8,r3
 c009b28:	40c0202c 	andhi	r3,r8,128
 c009b2c:	1023883a 	mov	r17,r2
 c009b30:	183f1a26 	beq	r3,zero,c00979c <__alt_data_end+0xfc00979c>
 c009b34:	00bfe034 	movhi	r2,65408
 c009b38:	10bfffc4 	addi	r2,r2,-1
 c009b3c:	2021883a 	mov	r16,r4
 c009b40:	4090703a 	and	r8,r8,r2
 c009b44:	003eb306 	br	c009614 <__alt_data_end+0xfc009614>
 c009b48:	4444b03a 	or	r2,r8,r17
 c009b4c:	8000291e 	bne	r16,zero,c009bf4 <__adddf3+0x65c>
 c009b50:	10004b1e 	bne	r2,zero,c009c80 <__adddf3+0x6e8>
 c009b54:	4990b03a 	or	r8,r9,r6
 c009b58:	40008b26 	beq	r8,zero,c009d88 <__adddf3+0x7f0>
 c009b5c:	4811883a 	mov	r8,r9
 c009b60:	3023883a 	mov	r17,r6
 c009b64:	3825883a 	mov	r18,r7
 c009b68:	003eaa06 	br	c009614 <__alt_data_end+0xfc009614>
 c009b6c:	1021883a 	mov	r16,r2
 c009b70:	0011883a 	mov	r8,zero
 c009b74:	0005883a 	mov	r2,zero
 c009b78:	003f0f06 	br	c0097b8 <__alt_data_end+0xfc0097b8>
 c009b7c:	217ff804 	addi	r5,r4,-32
 c009b80:	00800804 	movi	r2,32
 c009b84:	494ad83a 	srl	r5,r9,r5
 c009b88:	20807d26 	beq	r4,r2,c009d80 <__adddf3+0x7e8>
 c009b8c:	00801004 	movi	r2,64
 c009b90:	1109c83a 	sub	r4,r2,r4
 c009b94:	4912983a 	sll	r9,r9,r4
 c009b98:	498cb03a 	or	r6,r9,r6
 c009b9c:	300cc03a 	cmpne	r6,r6,zero
 c009ba0:	298ab03a 	or	r5,r5,r6
 c009ba4:	0013883a 	mov	r9,zero
 c009ba8:	003f1506 	br	c009800 <__alt_data_end+0xfc009800>
 c009bac:	0101ffc4 	movi	r4,2047
 c009bb0:	113f9a1e 	bne	r2,r4,c009a1c <__alt_data_end+0xfc009a1c>
 c009bb4:	4811883a 	mov	r8,r9
 c009bb8:	3023883a 	mov	r17,r6
 c009bbc:	1021883a 	mov	r16,r2
 c009bc0:	3825883a 	mov	r18,r7
 c009bc4:	003e9306 	br	c009614 <__alt_data_end+0xfc009614>
 c009bc8:	8000161e 	bne	r16,zero,c009c24 <__adddf3+0x68c>
 c009bcc:	444ab03a 	or	r5,r8,r17
 c009bd0:	28005126 	beq	r5,zero,c009d18 <__adddf3+0x780>
 c009bd4:	0108303a 	nor	r4,zero,r4
 c009bd8:	20004d1e 	bne	r4,zero,c009d10 <__adddf3+0x778>
 c009bdc:	89a3883a 	add	r17,r17,r6
 c009be0:	4253883a 	add	r9,r8,r9
 c009be4:	898d803a 	cmpltu	r6,r17,r6
 c009be8:	3251883a 	add	r8,r6,r9
 c009bec:	1021883a 	mov	r16,r2
 c009bf0:	003f0806 	br	c009814 <__alt_data_end+0xfc009814>
 c009bf4:	1000301e 	bne	r2,zero,c009cb8 <__adddf3+0x720>
 c009bf8:	4984b03a 	or	r2,r9,r6
 c009bfc:	10007126 	beq	r2,zero,c009dc4 <__adddf3+0x82c>
 c009c00:	4811883a 	mov	r8,r9
 c009c04:	3023883a 	mov	r17,r6
 c009c08:	3825883a 	mov	r18,r7
 c009c0c:	0401ffc4 	movi	r16,2047
 c009c10:	003e8006 	br	c009614 <__alt_data_end+0xfc009614>
 c009c14:	4462b03a 	or	r17,r8,r17
 c009c18:	8822c03a 	cmpne	r17,r17,zero
 c009c1c:	0007883a 	mov	r3,zero
 c009c20:	003f8b06 	br	c009a50 <__alt_data_end+0xfc009a50>
 c009c24:	0141ffc4 	movi	r5,2047
 c009c28:	11403b26 	beq	r2,r5,c009d18 <__adddf3+0x780>
 c009c2c:	0109c83a 	sub	r4,zero,r4
 c009c30:	42002034 	orhi	r8,r8,128
 c009c34:	01400e04 	movi	r5,56
 c009c38:	29006716 	blt	r5,r4,c009dd8 <__adddf3+0x840>
 c009c3c:	014007c4 	movi	r5,31
 c009c40:	29007016 	blt	r5,r4,c009e04 <__adddf3+0x86c>
 c009c44:	01400804 	movi	r5,32
 c009c48:	290bc83a 	sub	r5,r5,r4
 c009c4c:	4154983a 	sll	r10,r8,r5
 c009c50:	890ed83a 	srl	r7,r17,r4
 c009c54:	894a983a 	sll	r5,r17,r5
 c009c58:	4108d83a 	srl	r4,r8,r4
 c009c5c:	51e2b03a 	or	r17,r10,r7
 c009c60:	280ac03a 	cmpne	r5,r5,zero
 c009c64:	8962b03a 	or	r17,r17,r5
 c009c68:	89a3883a 	add	r17,r17,r6
 c009c6c:	2253883a 	add	r9,r4,r9
 c009c70:	898d803a 	cmpltu	r6,r17,r6
 c009c74:	3251883a 	add	r8,r6,r9
 c009c78:	1021883a 	mov	r16,r2
 c009c7c:	003ee506 	br	c009814 <__alt_data_end+0xfc009814>
 c009c80:	4984b03a 	or	r2,r9,r6
 c009c84:	103e6326 	beq	r2,zero,c009614 <__alt_data_end+0xfc009614>
 c009c88:	8987c83a 	sub	r3,r17,r6
 c009c8c:	88c9803a 	cmpltu	r4,r17,r3
 c009c90:	4245c83a 	sub	r2,r8,r9
 c009c94:	1105c83a 	sub	r2,r2,r4
 c009c98:	1100202c 	andhi	r4,r2,128
 c009c9c:	203ebb26 	beq	r4,zero,c00978c <__alt_data_end+0xfc00978c>
 c009ca0:	3463c83a 	sub	r17,r6,r17
 c009ca4:	4a07c83a 	sub	r3,r9,r8
 c009ca8:	344d803a 	cmpltu	r6,r6,r17
 c009cac:	1991c83a 	sub	r8,r3,r6
 c009cb0:	3825883a 	mov	r18,r7
 c009cb4:	003e5706 	br	c009614 <__alt_data_end+0xfc009614>
 c009cb8:	4984b03a 	or	r2,r9,r6
 c009cbc:	10002e26 	beq	r2,zero,c009d78 <__adddf3+0x7e0>
 c009cc0:	4004d0fa 	srli	r2,r8,3
 c009cc4:	8822d0fa 	srli	r17,r17,3
 c009cc8:	4010977a 	slli	r8,r8,29
 c009ccc:	10c0022c 	andhi	r3,r2,8
 c009cd0:	4462b03a 	or	r17,r8,r17
 c009cd4:	18000826 	beq	r3,zero,c009cf8 <__adddf3+0x760>
 c009cd8:	4808d0fa 	srli	r4,r9,3
 c009cdc:	20c0022c 	andhi	r3,r4,8
 c009ce0:	1800051e 	bne	r3,zero,c009cf8 <__adddf3+0x760>
 c009ce4:	300cd0fa 	srli	r6,r6,3
 c009ce8:	4806977a 	slli	r3,r9,29
 c009cec:	2005883a 	mov	r2,r4
 c009cf0:	3825883a 	mov	r18,r7
 c009cf4:	19a2b03a 	or	r17,r3,r6
 c009cf8:	8810d77a 	srli	r8,r17,29
 c009cfc:	100490fa 	slli	r2,r2,3
 c009d00:	882290fa 	slli	r17,r17,3
 c009d04:	0401ffc4 	movi	r16,2047
 c009d08:	4090b03a 	or	r8,r8,r2
 c009d0c:	003e4106 	br	c009614 <__alt_data_end+0xfc009614>
 c009d10:	0141ffc4 	movi	r5,2047
 c009d14:	117fc71e 	bne	r2,r5,c009c34 <__alt_data_end+0xfc009c34>
 c009d18:	4811883a 	mov	r8,r9
 c009d1c:	3023883a 	mov	r17,r6
 c009d20:	1021883a 	mov	r16,r2
 c009d24:	003e3b06 	br	c009614 <__alt_data_end+0xfc009614>
 c009d28:	10002f26 	beq	r2,zero,c009de8 <__adddf3+0x850>
 c009d2c:	4984b03a 	or	r2,r9,r6
 c009d30:	10001126 	beq	r2,zero,c009d78 <__adddf3+0x7e0>
 c009d34:	4004d0fa 	srli	r2,r8,3
 c009d38:	8822d0fa 	srli	r17,r17,3
 c009d3c:	4010977a 	slli	r8,r8,29
 c009d40:	10c0022c 	andhi	r3,r2,8
 c009d44:	4462b03a 	or	r17,r8,r17
 c009d48:	183feb26 	beq	r3,zero,c009cf8 <__alt_data_end+0xfc009cf8>
 c009d4c:	4808d0fa 	srli	r4,r9,3
 c009d50:	20c0022c 	andhi	r3,r4,8
 c009d54:	183fe81e 	bne	r3,zero,c009cf8 <__alt_data_end+0xfc009cf8>
 c009d58:	300cd0fa 	srli	r6,r6,3
 c009d5c:	4806977a 	slli	r3,r9,29
 c009d60:	2005883a 	mov	r2,r4
 c009d64:	19a2b03a 	or	r17,r3,r6
 c009d68:	003fe306 	br	c009cf8 <__alt_data_end+0xfc009cf8>
 c009d6c:	0011883a 	mov	r8,zero
 c009d70:	0005883a 	mov	r2,zero
 c009d74:	003e3f06 	br	c009674 <__alt_data_end+0xfc009674>
 c009d78:	0401ffc4 	movi	r16,2047
 c009d7c:	003e2506 	br	c009614 <__alt_data_end+0xfc009614>
 c009d80:	0013883a 	mov	r9,zero
 c009d84:	003f8406 	br	c009b98 <__alt_data_end+0xfc009b98>
 c009d88:	0005883a 	mov	r2,zero
 c009d8c:	0007883a 	mov	r3,zero
 c009d90:	003e8906 	br	c0097b8 <__alt_data_end+0xfc0097b8>
 c009d94:	197ff804 	addi	r5,r3,-32
 c009d98:	01000804 	movi	r4,32
 c009d9c:	414ad83a 	srl	r5,r8,r5
 c009da0:	19002426 	beq	r3,r4,c009e34 <__adddf3+0x89c>
 c009da4:	01001004 	movi	r4,64
 c009da8:	20c7c83a 	sub	r3,r4,r3
 c009dac:	40c6983a 	sll	r3,r8,r3
 c009db0:	1c46b03a 	or	r3,r3,r17
 c009db4:	1806c03a 	cmpne	r3,r3,zero
 c009db8:	28e2b03a 	or	r17,r5,r3
 c009dbc:	0007883a 	mov	r3,zero
 c009dc0:	003f2306 	br	c009a50 <__alt_data_end+0xfc009a50>
 c009dc4:	0007883a 	mov	r3,zero
 c009dc8:	5811883a 	mov	r8,r11
 c009dcc:	00bfffc4 	movi	r2,-1
 c009dd0:	0401ffc4 	movi	r16,2047
 c009dd4:	003e7806 	br	c0097b8 <__alt_data_end+0xfc0097b8>
 c009dd8:	4462b03a 	or	r17,r8,r17
 c009ddc:	8822c03a 	cmpne	r17,r17,zero
 c009de0:	0009883a 	mov	r4,zero
 c009de4:	003fa006 	br	c009c68 <__alt_data_end+0xfc009c68>
 c009de8:	4811883a 	mov	r8,r9
 c009dec:	3023883a 	mov	r17,r6
 c009df0:	0401ffc4 	movi	r16,2047
 c009df4:	003e0706 	br	c009614 <__alt_data_end+0xfc009614>
 c009df8:	4811883a 	mov	r8,r9
 c009dfc:	3023883a 	mov	r17,r6
 c009e00:	003e0406 	br	c009614 <__alt_data_end+0xfc009614>
 c009e04:	21fff804 	addi	r7,r4,-32
 c009e08:	01400804 	movi	r5,32
 c009e0c:	41ced83a 	srl	r7,r8,r7
 c009e10:	21400a26 	beq	r4,r5,c009e3c <__adddf3+0x8a4>
 c009e14:	01401004 	movi	r5,64
 c009e18:	2909c83a 	sub	r4,r5,r4
 c009e1c:	4108983a 	sll	r4,r8,r4
 c009e20:	2448b03a 	or	r4,r4,r17
 c009e24:	2008c03a 	cmpne	r4,r4,zero
 c009e28:	3922b03a 	or	r17,r7,r4
 c009e2c:	0009883a 	mov	r4,zero
 c009e30:	003f8d06 	br	c009c68 <__alt_data_end+0xfc009c68>
 c009e34:	0007883a 	mov	r3,zero
 c009e38:	003fdd06 	br	c009db0 <__alt_data_end+0xfc009db0>
 c009e3c:	0009883a 	mov	r4,zero
 c009e40:	003ff706 	br	c009e20 <__alt_data_end+0xfc009e20>

0c009e44 <__divdf3>:
 c009e44:	defff004 	addi	sp,sp,-64
 c009e48:	dc800815 	stw	r18,32(sp)
 c009e4c:	2824d53a 	srli	r18,r5,20
 c009e50:	dd800c15 	stw	r22,48(sp)
 c009e54:	282cd7fa 	srli	r22,r5,31
 c009e58:	dc000615 	stw	r16,24(sp)
 c009e5c:	04000434 	movhi	r16,16
 c009e60:	843fffc4 	addi	r16,r16,-1
 c009e64:	dfc00f15 	stw	ra,60(sp)
 c009e68:	df000e15 	stw	fp,56(sp)
 c009e6c:	ddc00d15 	stw	r23,52(sp)
 c009e70:	dd400b15 	stw	r21,44(sp)
 c009e74:	dd000a15 	stw	r20,40(sp)
 c009e78:	dcc00915 	stw	r19,36(sp)
 c009e7c:	dc400715 	stw	r17,28(sp)
 c009e80:	9481ffcc 	andi	r18,r18,2047
 c009e84:	2c20703a 	and	r16,r5,r16
 c009e88:	b2003fcc 	andi	r8,r22,255
 c009e8c:	90006126 	beq	r18,zero,c00a014 <__divdf3+0x1d0>
 c009e90:	0081ffc4 	movi	r2,2047
 c009e94:	202b883a 	mov	r21,r4
 c009e98:	90803726 	beq	r18,r2,c009f78 <__divdf3+0x134>
 c009e9c:	80800434 	orhi	r2,r16,16
 c009ea0:	100490fa 	slli	r2,r2,3
 c009ea4:	2020d77a 	srli	r16,r4,29
 c009ea8:	202a90fa 	slli	r21,r4,3
 c009eac:	94bf0044 	addi	r18,r18,-1023
 c009eb0:	80a0b03a 	or	r16,r16,r2
 c009eb4:	0013883a 	mov	r9,zero
 c009eb8:	000b883a 	mov	r5,zero
 c009ebc:	3806d53a 	srli	r3,r7,20
 c009ec0:	382ed7fa 	srli	r23,r7,31
 c009ec4:	04400434 	movhi	r17,16
 c009ec8:	8c7fffc4 	addi	r17,r17,-1
 c009ecc:	18c1ffcc 	andi	r3,r3,2047
 c009ed0:	3029883a 	mov	r20,r6
 c009ed4:	3c62703a 	and	r17,r7,r17
 c009ed8:	bf003fcc 	andi	fp,r23,255
 c009edc:	18006e26 	beq	r3,zero,c00a098 <__divdf3+0x254>
 c009ee0:	0081ffc4 	movi	r2,2047
 c009ee4:	18806626 	beq	r3,r2,c00a080 <__divdf3+0x23c>
 c009ee8:	88800434 	orhi	r2,r17,16
 c009eec:	100490fa 	slli	r2,r2,3
 c009ef0:	3022d77a 	srli	r17,r6,29
 c009ef4:	302890fa 	slli	r20,r6,3
 c009ef8:	18ff0044 	addi	r3,r3,-1023
 c009efc:	88a2b03a 	or	r17,r17,r2
 c009f00:	000f883a 	mov	r7,zero
 c009f04:	b5e6f03a 	xor	r19,r22,r23
 c009f08:	3a4cb03a 	or	r6,r7,r9
 c009f0c:	008003c4 	movi	r2,15
 c009f10:	9809883a 	mov	r4,r19
 c009f14:	90c7c83a 	sub	r3,r18,r3
 c009f18:	9cc03fcc 	andi	r19,r19,255
 c009f1c:	11809636 	bltu	r2,r6,c00a178 <__divdf3+0x334>
 c009f20:	300c90ba 	slli	r6,r6,2
 c009f24:	00830074 	movhi	r2,3073
 c009f28:	10a7ce04 	addi	r2,r2,-24776
 c009f2c:	308d883a 	add	r6,r6,r2
 c009f30:	30800017 	ldw	r2,0(r6)
 c009f34:	1000683a 	jmp	r2
 c009f38:	0c00a178 	rdprs	r16,at,645
 c009f3c:	0c009fb0 	cmpltui	r16,at,638
 c009f40:	0c00a168 	cmpgeui	r16,at,645
 c009f44:	0c009fa4 	muli	r16,at,638
 c009f48:	0c00a168 	cmpgeui	r16,at,645
 c009f4c:	0c00a13c 	xorhi	r16,at,644
 c009f50:	0c00a168 	cmpgeui	r16,at,645
 c009f54:	0c009fa4 	muli	r16,at,638
 c009f58:	0c009fb0 	cmpltui	r16,at,638
 c009f5c:	0c009fb0 	cmpltui	r16,at,638
 c009f60:	0c00a13c 	xorhi	r16,at,644
 c009f64:	0c009fa4 	muli	r16,at,638
 c009f68:	0c009f94 	ori	r16,at,638
 c009f6c:	0c009f94 	ori	r16,at,638
 c009f70:	0c009f94 	ori	r16,at,638
 c009f74:	0c00a500 	call	c00a50 <__alt_mem_onchip_memory2_0+0xc00a50>
 c009f78:	2404b03a 	or	r2,r4,r16
 c009f7c:	10006c1e 	bne	r2,zero,c00a130 <__divdf3+0x2ec>
 c009f80:	02400204 	movi	r9,8
 c009f84:	0021883a 	mov	r16,zero
 c009f88:	002b883a 	mov	r21,zero
 c009f8c:	01400084 	movi	r5,2
 c009f90:	003fca06 	br	c009ebc <__alt_data_end+0xfc009ebc>
 c009f94:	8023883a 	mov	r17,r16
 c009f98:	a829883a 	mov	r20,r21
 c009f9c:	4039883a 	mov	fp,r8
 c009fa0:	280f883a 	mov	r7,r5
 c009fa4:	00800084 	movi	r2,2
 c009fa8:	3881601e 	bne	r7,r2,c00a52c <__divdf3+0x6e8>
 c009fac:	e027883a 	mov	r19,fp
 c009fb0:	9900004c 	andi	r4,r19,1
 c009fb4:	0081ffc4 	movi	r2,2047
 c009fb8:	0021883a 	mov	r16,zero
 c009fbc:	002b883a 	mov	r21,zero
 c009fc0:	1004953a 	slli	r2,r2,20
 c009fc4:	20c03fcc 	andi	r3,r4,255
 c009fc8:	01400434 	movhi	r5,16
 c009fcc:	297fffc4 	addi	r5,r5,-1
 c009fd0:	180697fa 	slli	r3,r3,31
 c009fd4:	8160703a 	and	r16,r16,r5
 c009fd8:	80a0b03a 	or	r16,r16,r2
 c009fdc:	80c6b03a 	or	r3,r16,r3
 c009fe0:	a805883a 	mov	r2,r21
 c009fe4:	dfc00f17 	ldw	ra,60(sp)
 c009fe8:	df000e17 	ldw	fp,56(sp)
 c009fec:	ddc00d17 	ldw	r23,52(sp)
 c009ff0:	dd800c17 	ldw	r22,48(sp)
 c009ff4:	dd400b17 	ldw	r21,44(sp)
 c009ff8:	dd000a17 	ldw	r20,40(sp)
 c009ffc:	dcc00917 	ldw	r19,36(sp)
 c00a000:	dc800817 	ldw	r18,32(sp)
 c00a004:	dc400717 	ldw	r17,28(sp)
 c00a008:	dc000617 	ldw	r16,24(sp)
 c00a00c:	dec01004 	addi	sp,sp,64
 c00a010:	f800283a 	ret
 c00a014:	2404b03a 	or	r2,r4,r16
 c00a018:	2023883a 	mov	r17,r4
 c00a01c:	10003f26 	beq	r2,zero,c00a11c <__divdf3+0x2d8>
 c00a020:	80015e26 	beq	r16,zero,c00a59c <__divdf3+0x758>
 c00a024:	8009883a 	mov	r4,r16
 c00a028:	d9800215 	stw	r6,8(sp)
 c00a02c:	d9c00515 	stw	r7,20(sp)
 c00a030:	da000415 	stw	r8,16(sp)
 c00a034:	c00bdd80 	call	c00bdd8 <__clzsi2>
 c00a038:	d9800217 	ldw	r6,8(sp)
 c00a03c:	d9c00517 	ldw	r7,20(sp)
 c00a040:	da000417 	ldw	r8,16(sp)
 c00a044:	113ffd44 	addi	r4,r2,-11
 c00a048:	00c00704 	movi	r3,28
 c00a04c:	19014f16 	blt	r3,r4,c00a58c <__divdf3+0x748>
 c00a050:	00c00744 	movi	r3,29
 c00a054:	157ffe04 	addi	r21,r2,-8
 c00a058:	1907c83a 	sub	r3,r3,r4
 c00a05c:	8560983a 	sll	r16,r16,r21
 c00a060:	88c6d83a 	srl	r3,r17,r3
 c00a064:	8d6a983a 	sll	r21,r17,r21
 c00a068:	1c20b03a 	or	r16,r3,r16
 c00a06c:	1080fcc4 	addi	r2,r2,1011
 c00a070:	00a5c83a 	sub	r18,zero,r2
 c00a074:	0013883a 	mov	r9,zero
 c00a078:	000b883a 	mov	r5,zero
 c00a07c:	003f8f06 	br	c009ebc <__alt_data_end+0xfc009ebc>
 c00a080:	3444b03a 	or	r2,r6,r17
 c00a084:	1000231e 	bne	r2,zero,c00a114 <__divdf3+0x2d0>
 c00a088:	0023883a 	mov	r17,zero
 c00a08c:	0029883a 	mov	r20,zero
 c00a090:	01c00084 	movi	r7,2
 c00a094:	003f9b06 	br	c009f04 <__alt_data_end+0xfc009f04>
 c00a098:	3444b03a 	or	r2,r6,r17
 c00a09c:	10001926 	beq	r2,zero,c00a104 <__divdf3+0x2c0>
 c00a0a0:	88014b26 	beq	r17,zero,c00a5d0 <__divdf3+0x78c>
 c00a0a4:	8809883a 	mov	r4,r17
 c00a0a8:	d9400115 	stw	r5,4(sp)
 c00a0ac:	d9800215 	stw	r6,8(sp)
 c00a0b0:	da000415 	stw	r8,16(sp)
 c00a0b4:	da400315 	stw	r9,12(sp)
 c00a0b8:	c00bdd80 	call	c00bdd8 <__clzsi2>
 c00a0bc:	d9400117 	ldw	r5,4(sp)
 c00a0c0:	d9800217 	ldw	r6,8(sp)
 c00a0c4:	da000417 	ldw	r8,16(sp)
 c00a0c8:	da400317 	ldw	r9,12(sp)
 c00a0cc:	113ffd44 	addi	r4,r2,-11
 c00a0d0:	00c00704 	movi	r3,28
 c00a0d4:	19013a16 	blt	r3,r4,c00a5c0 <__divdf3+0x77c>
 c00a0d8:	00c00744 	movi	r3,29
 c00a0dc:	153ffe04 	addi	r20,r2,-8
 c00a0e0:	1907c83a 	sub	r3,r3,r4
 c00a0e4:	8d22983a 	sll	r17,r17,r20
 c00a0e8:	30c6d83a 	srl	r3,r6,r3
 c00a0ec:	3528983a 	sll	r20,r6,r20
 c00a0f0:	1c62b03a 	or	r17,r3,r17
 c00a0f4:	1080fcc4 	addi	r2,r2,1011
 c00a0f8:	0087c83a 	sub	r3,zero,r2
 c00a0fc:	000f883a 	mov	r7,zero
 c00a100:	003f8006 	br	c009f04 <__alt_data_end+0xfc009f04>
 c00a104:	0023883a 	mov	r17,zero
 c00a108:	0029883a 	mov	r20,zero
 c00a10c:	01c00044 	movi	r7,1
 c00a110:	003f7c06 	br	c009f04 <__alt_data_end+0xfc009f04>
 c00a114:	01c000c4 	movi	r7,3
 c00a118:	003f7a06 	br	c009f04 <__alt_data_end+0xfc009f04>
 c00a11c:	02400104 	movi	r9,4
 c00a120:	0021883a 	mov	r16,zero
 c00a124:	002b883a 	mov	r21,zero
 c00a128:	01400044 	movi	r5,1
 c00a12c:	003f6306 	br	c009ebc <__alt_data_end+0xfc009ebc>
 c00a130:	02400304 	movi	r9,12
 c00a134:	014000c4 	movi	r5,3
 c00a138:	003f6006 	br	c009ebc <__alt_data_end+0xfc009ebc>
 c00a13c:	04000434 	movhi	r16,16
 c00a140:	0009883a 	mov	r4,zero
 c00a144:	843fffc4 	addi	r16,r16,-1
 c00a148:	057fffc4 	movi	r21,-1
 c00a14c:	0081ffc4 	movi	r2,2047
 c00a150:	003f9b06 	br	c009fc0 <__alt_data_end+0xfc009fc0>
 c00a154:	00c00044 	movi	r3,1
 c00a158:	1887c83a 	sub	r3,r3,r2
 c00a15c:	01000e04 	movi	r4,56
 c00a160:	20c1530e 	bge	r4,r3,c00a6b0 <__divdf3+0x86c>
 c00a164:	9900004c 	andi	r4,r19,1
 c00a168:	0005883a 	mov	r2,zero
 c00a16c:	0021883a 	mov	r16,zero
 c00a170:	002b883a 	mov	r21,zero
 c00a174:	003f9206 	br	c009fc0 <__alt_data_end+0xfc009fc0>
 c00a178:	8c012e36 	bltu	r17,r16,c00a634 <__divdf3+0x7f0>
 c00a17c:	84412c26 	beq	r16,r17,c00a630 <__divdf3+0x7ec>
 c00a180:	a82f883a 	mov	r23,r21
 c00a184:	18ffffc4 	addi	r3,r3,-1
 c00a188:	002b883a 	mov	r21,zero
 c00a18c:	a004d63a 	srli	r2,r20,24
 c00a190:	8822923a 	slli	r17,r17,8
 c00a194:	a028923a 	slli	r20,r20,8
 c00a198:	8009883a 	mov	r4,r16
 c00a19c:	88acb03a 	or	r22,r17,r2
 c00a1a0:	dd000015 	stw	r20,0(sp)
 c00a1a4:	b028d43a 	srli	r20,r22,16
 c00a1a8:	d8c00215 	stw	r3,8(sp)
 c00a1ac:	b4bfffcc 	andi	r18,r22,65535
 c00a1b0:	a00b883a 	mov	r5,r20
 c00a1b4:	c000acc0 	call	c000acc <__udivsi3>
 c00a1b8:	100b883a 	mov	r5,r2
 c00a1bc:	9009883a 	mov	r4,r18
 c00a1c0:	1023883a 	mov	r17,r2
 c00a1c4:	c000b880 	call	c000b88 <__mulsi3>
 c00a1c8:	8009883a 	mov	r4,r16
 c00a1cc:	a00b883a 	mov	r5,r20
 c00a1d0:	1039883a 	mov	fp,r2
 c00a1d4:	c000b300 	call	c000b30 <__umodsi3>
 c00a1d8:	1004943a 	slli	r2,r2,16
 c00a1dc:	b808d43a 	srli	r4,r23,16
 c00a1e0:	d8c00217 	ldw	r3,8(sp)
 c00a1e4:	2084b03a 	or	r2,r4,r2
 c00a1e8:	1700062e 	bgeu	r2,fp,c00a204 <__divdf3+0x3c0>
 c00a1ec:	1585883a 	add	r2,r2,r22
 c00a1f0:	893fffc4 	addi	r4,r17,-1
 c00a1f4:	15811d36 	bltu	r2,r22,c00a66c <__divdf3+0x828>
 c00a1f8:	17011c2e 	bgeu	r2,fp,c00a66c <__divdf3+0x828>
 c00a1fc:	8c7fff84 	addi	r17,r17,-2
 c00a200:	1585883a 	add	r2,r2,r22
 c00a204:	1739c83a 	sub	fp,r2,fp
 c00a208:	a00b883a 	mov	r5,r20
 c00a20c:	e009883a 	mov	r4,fp
 c00a210:	d8c00215 	stw	r3,8(sp)
 c00a214:	c000acc0 	call	c000acc <__udivsi3>
 c00a218:	100b883a 	mov	r5,r2
 c00a21c:	9009883a 	mov	r4,r18
 c00a220:	1021883a 	mov	r16,r2
 c00a224:	c000b880 	call	c000b88 <__mulsi3>
 c00a228:	a00b883a 	mov	r5,r20
 c00a22c:	e009883a 	mov	r4,fp
 c00a230:	d8800415 	stw	r2,16(sp)
 c00a234:	c000b300 	call	c000b30 <__umodsi3>
 c00a238:	1004943a 	slli	r2,r2,16
 c00a23c:	da000417 	ldw	r8,16(sp)
 c00a240:	bdffffcc 	andi	r23,r23,65535
 c00a244:	b884b03a 	or	r2,r23,r2
 c00a248:	d8c00217 	ldw	r3,8(sp)
 c00a24c:	1200062e 	bgeu	r2,r8,c00a268 <__divdf3+0x424>
 c00a250:	1585883a 	add	r2,r2,r22
 c00a254:	813fffc4 	addi	r4,r16,-1
 c00a258:	15810236 	bltu	r2,r22,c00a664 <__divdf3+0x820>
 c00a25c:	1201012e 	bgeu	r2,r8,c00a664 <__divdf3+0x820>
 c00a260:	843fff84 	addi	r16,r16,-2
 c00a264:	1585883a 	add	r2,r2,r22
 c00a268:	8822943a 	slli	r17,r17,16
 c00a26c:	d9800017 	ldw	r6,0(sp)
 c00a270:	1211c83a 	sub	r8,r2,r8
 c00a274:	8c22b03a 	or	r17,r17,r16
 c00a278:	373fffcc 	andi	fp,r6,65535
 c00a27c:	8abfffcc 	andi	r10,r17,65535
 c00a280:	8820d43a 	srli	r16,r17,16
 c00a284:	5009883a 	mov	r4,r10
 c00a288:	e00b883a 	mov	r5,fp
 c00a28c:	302ed43a 	srli	r23,r6,16
 c00a290:	d8c00215 	stw	r3,8(sp)
 c00a294:	da000415 	stw	r8,16(sp)
 c00a298:	da800115 	stw	r10,4(sp)
 c00a29c:	c000b880 	call	c000b88 <__mulsi3>
 c00a2a0:	800b883a 	mov	r5,r16
 c00a2a4:	e009883a 	mov	r4,fp
 c00a2a8:	d8800515 	stw	r2,20(sp)
 c00a2ac:	c000b880 	call	c000b88 <__mulsi3>
 c00a2b0:	8009883a 	mov	r4,r16
 c00a2b4:	b80b883a 	mov	r5,r23
 c00a2b8:	d8800315 	stw	r2,12(sp)
 c00a2bc:	c000b880 	call	c000b88 <__mulsi3>
 c00a2c0:	da800117 	ldw	r10,4(sp)
 c00a2c4:	b80b883a 	mov	r5,r23
 c00a2c8:	1021883a 	mov	r16,r2
 c00a2cc:	5009883a 	mov	r4,r10
 c00a2d0:	c000b880 	call	c000b88 <__mulsi3>
 c00a2d4:	d9c00517 	ldw	r7,20(sp)
 c00a2d8:	da400317 	ldw	r9,12(sp)
 c00a2dc:	d8c00217 	ldw	r3,8(sp)
 c00a2e0:	3808d43a 	srli	r4,r7,16
 c00a2e4:	1245883a 	add	r2,r2,r9
 c00a2e8:	da000417 	ldw	r8,16(sp)
 c00a2ec:	2085883a 	add	r2,r4,r2
 c00a2f0:	1240022e 	bgeu	r2,r9,c00a2fc <__divdf3+0x4b8>
 c00a2f4:	01000074 	movhi	r4,1
 c00a2f8:	8121883a 	add	r16,r16,r4
 c00a2fc:	1008d43a 	srli	r4,r2,16
 c00a300:	1004943a 	slli	r2,r2,16
 c00a304:	39ffffcc 	andi	r7,r7,65535
 c00a308:	2409883a 	add	r4,r4,r16
 c00a30c:	11c5883a 	add	r2,r2,r7
 c00a310:	4100bb36 	bltu	r8,r4,c00a600 <__divdf3+0x7bc>
 c00a314:	4100d726 	beq	r8,r4,c00a674 <__divdf3+0x830>
 c00a318:	4109c83a 	sub	r4,r8,r4
 c00a31c:	a8a1c83a 	sub	r16,r21,r2
 c00a320:	ac2b803a 	cmpltu	r21,r21,r16
 c00a324:	256bc83a 	sub	r21,r4,r21
 c00a328:	b540d926 	beq	r22,r21,c00a690 <__divdf3+0x84c>
 c00a32c:	a00b883a 	mov	r5,r20
 c00a330:	a809883a 	mov	r4,r21
 c00a334:	d8c00215 	stw	r3,8(sp)
 c00a338:	c000acc0 	call	c000acc <__udivsi3>
 c00a33c:	100b883a 	mov	r5,r2
 c00a340:	9009883a 	mov	r4,r18
 c00a344:	d8800515 	stw	r2,20(sp)
 c00a348:	c000b880 	call	c000b88 <__mulsi3>
 c00a34c:	a809883a 	mov	r4,r21
 c00a350:	a00b883a 	mov	r5,r20
 c00a354:	d8800415 	stw	r2,16(sp)
 c00a358:	c000b300 	call	c000b30 <__umodsi3>
 c00a35c:	1004943a 	slli	r2,r2,16
 c00a360:	8008d43a 	srli	r4,r16,16
 c00a364:	da000417 	ldw	r8,16(sp)
 c00a368:	d8c00217 	ldw	r3,8(sp)
 c00a36c:	2084b03a 	or	r2,r4,r2
 c00a370:	d9c00517 	ldw	r7,20(sp)
 c00a374:	1200062e 	bgeu	r2,r8,c00a390 <__divdf3+0x54c>
 c00a378:	1585883a 	add	r2,r2,r22
 c00a37c:	393fffc4 	addi	r4,r7,-1
 c00a380:	1580c536 	bltu	r2,r22,c00a698 <__divdf3+0x854>
 c00a384:	1200c42e 	bgeu	r2,r8,c00a698 <__divdf3+0x854>
 c00a388:	39ffff84 	addi	r7,r7,-2
 c00a38c:	1585883a 	add	r2,r2,r22
 c00a390:	122bc83a 	sub	r21,r2,r8
 c00a394:	a00b883a 	mov	r5,r20
 c00a398:	a809883a 	mov	r4,r21
 c00a39c:	d8c00215 	stw	r3,8(sp)
 c00a3a0:	d9c00515 	stw	r7,20(sp)
 c00a3a4:	c000acc0 	call	c000acc <__udivsi3>
 c00a3a8:	9009883a 	mov	r4,r18
 c00a3ac:	100b883a 	mov	r5,r2
 c00a3b0:	d8800415 	stw	r2,16(sp)
 c00a3b4:	c000b880 	call	c000b88 <__mulsi3>
 c00a3b8:	a809883a 	mov	r4,r21
 c00a3bc:	a00b883a 	mov	r5,r20
 c00a3c0:	1025883a 	mov	r18,r2
 c00a3c4:	c000b300 	call	c000b30 <__umodsi3>
 c00a3c8:	1004943a 	slli	r2,r2,16
 c00a3cc:	813fffcc 	andi	r4,r16,65535
 c00a3d0:	d8c00217 	ldw	r3,8(sp)
 c00a3d4:	20a0b03a 	or	r16,r4,r2
 c00a3d8:	d9c00517 	ldw	r7,20(sp)
 c00a3dc:	da000417 	ldw	r8,16(sp)
 c00a3e0:	8480062e 	bgeu	r16,r18,c00a3fc <__divdf3+0x5b8>
 c00a3e4:	85a1883a 	add	r16,r16,r22
 c00a3e8:	40bfffc4 	addi	r2,r8,-1
 c00a3ec:	8580ac36 	bltu	r16,r22,c00a6a0 <__divdf3+0x85c>
 c00a3f0:	8480ab2e 	bgeu	r16,r18,c00a6a0 <__divdf3+0x85c>
 c00a3f4:	423fff84 	addi	r8,r8,-2
 c00a3f8:	85a1883a 	add	r16,r16,r22
 c00a3fc:	3804943a 	slli	r2,r7,16
 c00a400:	84a1c83a 	sub	r16,r16,r18
 c00a404:	e009883a 	mov	r4,fp
 c00a408:	1228b03a 	or	r20,r2,r8
 c00a40c:	a1ffffcc 	andi	r7,r20,65535
 c00a410:	a024d43a 	srli	r18,r20,16
 c00a414:	380b883a 	mov	r5,r7
 c00a418:	d8c00215 	stw	r3,8(sp)
 c00a41c:	d9c00515 	stw	r7,20(sp)
 c00a420:	c000b880 	call	c000b88 <__mulsi3>
 c00a424:	900b883a 	mov	r5,r18
 c00a428:	e009883a 	mov	r4,fp
 c00a42c:	102b883a 	mov	r21,r2
 c00a430:	c000b880 	call	c000b88 <__mulsi3>
 c00a434:	900b883a 	mov	r5,r18
 c00a438:	b809883a 	mov	r4,r23
 c00a43c:	1039883a 	mov	fp,r2
 c00a440:	c000b880 	call	c000b88 <__mulsi3>
 c00a444:	d9c00517 	ldw	r7,20(sp)
 c00a448:	b80b883a 	mov	r5,r23
 c00a44c:	1025883a 	mov	r18,r2
 c00a450:	3809883a 	mov	r4,r7
 c00a454:	c000b880 	call	c000b88 <__mulsi3>
 c00a458:	a808d43a 	srli	r4,r21,16
 c00a45c:	1705883a 	add	r2,r2,fp
 c00a460:	d8c00217 	ldw	r3,8(sp)
 c00a464:	2085883a 	add	r2,r4,r2
 c00a468:	1700022e 	bgeu	r2,fp,c00a474 <__divdf3+0x630>
 c00a46c:	01000074 	movhi	r4,1
 c00a470:	9125883a 	add	r18,r18,r4
 c00a474:	1008d43a 	srli	r4,r2,16
 c00a478:	1004943a 	slli	r2,r2,16
 c00a47c:	ad7fffcc 	andi	r21,r21,65535
 c00a480:	2489883a 	add	r4,r4,r18
 c00a484:	1545883a 	add	r2,r2,r21
 c00a488:	81003836 	bltu	r16,r4,c00a56c <__divdf3+0x728>
 c00a48c:	81003626 	beq	r16,r4,c00a568 <__divdf3+0x724>
 c00a490:	a5000054 	ori	r20,r20,1
 c00a494:	1880ffc4 	addi	r2,r3,1023
 c00a498:	00bf2e0e 	bge	zero,r2,c00a154 <__alt_data_end+0xfc00a154>
 c00a49c:	a10001cc 	andi	r4,r20,7
 c00a4a0:	20000726 	beq	r4,zero,c00a4c0 <__divdf3+0x67c>
 c00a4a4:	a10003cc 	andi	r4,r20,15
 c00a4a8:	01400104 	movi	r5,4
 c00a4ac:	21400426 	beq	r4,r5,c00a4c0 <__divdf3+0x67c>
 c00a4b0:	a149883a 	add	r4,r20,r5
 c00a4b4:	2529803a 	cmpltu	r20,r4,r20
 c00a4b8:	8d23883a 	add	r17,r17,r20
 c00a4bc:	2029883a 	mov	r20,r4
 c00a4c0:	8900402c 	andhi	r4,r17,256
 c00a4c4:	20000426 	beq	r4,zero,c00a4d8 <__divdf3+0x694>
 c00a4c8:	18810004 	addi	r2,r3,1024
 c00a4cc:	00ffc034 	movhi	r3,65280
 c00a4d0:	18ffffc4 	addi	r3,r3,-1
 c00a4d4:	88e2703a 	and	r17,r17,r3
 c00a4d8:	00c1ff84 	movi	r3,2046
 c00a4dc:	18beb416 	blt	r3,r2,c009fb0 <__alt_data_end+0xfc009fb0>
 c00a4e0:	a028d0fa 	srli	r20,r20,3
 c00a4e4:	882a977a 	slli	r21,r17,29
 c00a4e8:	8820927a 	slli	r16,r17,9
 c00a4ec:	1081ffcc 	andi	r2,r2,2047
 c00a4f0:	ad2ab03a 	or	r21,r21,r20
 c00a4f4:	8020d33a 	srli	r16,r16,12
 c00a4f8:	9900004c 	andi	r4,r19,1
 c00a4fc:	003eb006 	br	c009fc0 <__alt_data_end+0xfc009fc0>
 c00a500:	8080022c 	andhi	r2,r16,8
 c00a504:	10001226 	beq	r2,zero,c00a550 <__divdf3+0x70c>
 c00a508:	8880022c 	andhi	r2,r17,8
 c00a50c:	1000101e 	bne	r2,zero,c00a550 <__divdf3+0x70c>
 c00a510:	00800434 	movhi	r2,16
 c00a514:	8c000234 	orhi	r16,r17,8
 c00a518:	10bfffc4 	addi	r2,r2,-1
 c00a51c:	b809883a 	mov	r4,r23
 c00a520:	80a0703a 	and	r16,r16,r2
 c00a524:	a02b883a 	mov	r21,r20
 c00a528:	003f0806 	br	c00a14c <__alt_data_end+0xfc00a14c>
 c00a52c:	008000c4 	movi	r2,3
 c00a530:	3880b126 	beq	r7,r2,c00a7f8 <__divdf3+0x9b4>
 c00a534:	00800044 	movi	r2,1
 c00a538:	38805b1e 	bne	r7,r2,c00a6a8 <__divdf3+0x864>
 c00a53c:	e009883a 	mov	r4,fp
 c00a540:	0005883a 	mov	r2,zero
 c00a544:	0021883a 	mov	r16,zero
 c00a548:	002b883a 	mov	r21,zero
 c00a54c:	003e9c06 	br	c009fc0 <__alt_data_end+0xfc009fc0>
 c00a550:	00800434 	movhi	r2,16
 c00a554:	84000234 	orhi	r16,r16,8
 c00a558:	10bfffc4 	addi	r2,r2,-1
 c00a55c:	b009883a 	mov	r4,r22
 c00a560:	80a0703a 	and	r16,r16,r2
 c00a564:	003ef906 	br	c00a14c <__alt_data_end+0xfc00a14c>
 c00a568:	103fca26 	beq	r2,zero,c00a494 <__alt_data_end+0xfc00a494>
 c00a56c:	b421883a 	add	r16,r22,r16
 c00a570:	a17fffc4 	addi	r5,r20,-1
 c00a574:	8580422e 	bgeu	r16,r22,c00a680 <__divdf3+0x83c>
 c00a578:	2829883a 	mov	r20,r5
 c00a57c:	813fc41e 	bne	r16,r4,c00a490 <__alt_data_end+0xfc00a490>
 c00a580:	d9800017 	ldw	r6,0(sp)
 c00a584:	30bfc21e 	bne	r6,r2,c00a490 <__alt_data_end+0xfc00a490>
 c00a588:	003fc206 	br	c00a494 <__alt_data_end+0xfc00a494>
 c00a58c:	143ff604 	addi	r16,r2,-40
 c00a590:	8c20983a 	sll	r16,r17,r16
 c00a594:	002b883a 	mov	r21,zero
 c00a598:	003eb406 	br	c00a06c <__alt_data_end+0xfc00a06c>
 c00a59c:	d9800215 	stw	r6,8(sp)
 c00a5a0:	d9c00515 	stw	r7,20(sp)
 c00a5a4:	da000415 	stw	r8,16(sp)
 c00a5a8:	c00bdd80 	call	c00bdd8 <__clzsi2>
 c00a5ac:	10800804 	addi	r2,r2,32
 c00a5b0:	da000417 	ldw	r8,16(sp)
 c00a5b4:	d9c00517 	ldw	r7,20(sp)
 c00a5b8:	d9800217 	ldw	r6,8(sp)
 c00a5bc:	003ea106 	br	c00a044 <__alt_data_end+0xfc00a044>
 c00a5c0:	147ff604 	addi	r17,r2,-40
 c00a5c4:	3462983a 	sll	r17,r6,r17
 c00a5c8:	0029883a 	mov	r20,zero
 c00a5cc:	003ec906 	br	c00a0f4 <__alt_data_end+0xfc00a0f4>
 c00a5d0:	3009883a 	mov	r4,r6
 c00a5d4:	d9400115 	stw	r5,4(sp)
 c00a5d8:	d9800215 	stw	r6,8(sp)
 c00a5dc:	da000415 	stw	r8,16(sp)
 c00a5e0:	da400315 	stw	r9,12(sp)
 c00a5e4:	c00bdd80 	call	c00bdd8 <__clzsi2>
 c00a5e8:	10800804 	addi	r2,r2,32
 c00a5ec:	da400317 	ldw	r9,12(sp)
 c00a5f0:	da000417 	ldw	r8,16(sp)
 c00a5f4:	d9800217 	ldw	r6,8(sp)
 c00a5f8:	d9400117 	ldw	r5,4(sp)
 c00a5fc:	003eb306 	br	c00a0cc <__alt_data_end+0xfc00a0cc>
 c00a600:	d9800017 	ldw	r6,0(sp)
 c00a604:	a9ab883a 	add	r21,r21,r6
 c00a608:	a98b803a 	cmpltu	r5,r21,r6
 c00a60c:	2d8b883a 	add	r5,r5,r22
 c00a610:	2a11883a 	add	r8,r5,r8
 c00a614:	897fffc4 	addi	r5,r17,-1
 c00a618:	b2000c2e 	bgeu	r22,r8,c00a64c <__divdf3+0x808>
 c00a61c:	41003f36 	bltu	r8,r4,c00a71c <__divdf3+0x8d8>
 c00a620:	22006c26 	beq	r4,r8,c00a7d4 <__divdf3+0x990>
 c00a624:	4109c83a 	sub	r4,r8,r4
 c00a628:	2823883a 	mov	r17,r5
 c00a62c:	003f3b06 	br	c00a31c <__alt_data_end+0xfc00a31c>
 c00a630:	ad3ed336 	bltu	r21,r20,c00a180 <__alt_data_end+0xfc00a180>
 c00a634:	a804d07a 	srli	r2,r21,1
 c00a638:	802e97fa 	slli	r23,r16,31
 c00a63c:	a82a97fa 	slli	r21,r21,31
 c00a640:	8020d07a 	srli	r16,r16,1
 c00a644:	b8aeb03a 	or	r23,r23,r2
 c00a648:	003ed006 	br	c00a18c <__alt_data_end+0xfc00a18c>
 c00a64c:	b23ff51e 	bne	r22,r8,c00a624 <__alt_data_end+0xfc00a624>
 c00a650:	d9800017 	ldw	r6,0(sp)
 c00a654:	a9bff12e 	bgeu	r21,r6,c00a61c <__alt_data_end+0xfc00a61c>
 c00a658:	b109c83a 	sub	r4,r22,r4
 c00a65c:	2823883a 	mov	r17,r5
 c00a660:	003f2e06 	br	c00a31c <__alt_data_end+0xfc00a31c>
 c00a664:	2021883a 	mov	r16,r4
 c00a668:	003eff06 	br	c00a268 <__alt_data_end+0xfc00a268>
 c00a66c:	2023883a 	mov	r17,r4
 c00a670:	003ee406 	br	c00a204 <__alt_data_end+0xfc00a204>
 c00a674:	a8bfe236 	bltu	r21,r2,c00a600 <__alt_data_end+0xfc00a600>
 c00a678:	0009883a 	mov	r4,zero
 c00a67c:	003f2706 	br	c00a31c <__alt_data_end+0xfc00a31c>
 c00a680:	81002d36 	bltu	r16,r4,c00a738 <__divdf3+0x8f4>
 c00a684:	24005626 	beq	r4,r16,c00a7e0 <__divdf3+0x99c>
 c00a688:	2829883a 	mov	r20,r5
 c00a68c:	003f8006 	br	c00a490 <__alt_data_end+0xfc00a490>
 c00a690:	053fffc4 	movi	r20,-1
 c00a694:	003f7f06 	br	c00a494 <__alt_data_end+0xfc00a494>
 c00a698:	200f883a 	mov	r7,r4
 c00a69c:	003f3c06 	br	c00a390 <__alt_data_end+0xfc00a390>
 c00a6a0:	1011883a 	mov	r8,r2
 c00a6a4:	003f5506 	br	c00a3fc <__alt_data_end+0xfc00a3fc>
 c00a6a8:	e027883a 	mov	r19,fp
 c00a6ac:	003f7906 	br	c00a494 <__alt_data_end+0xfc00a494>
 c00a6b0:	010007c4 	movi	r4,31
 c00a6b4:	20c02816 	blt	r4,r3,c00a758 <__divdf3+0x914>
 c00a6b8:	00800804 	movi	r2,32
 c00a6bc:	10c5c83a 	sub	r2,r2,r3
 c00a6c0:	888a983a 	sll	r5,r17,r2
 c00a6c4:	a0c8d83a 	srl	r4,r20,r3
 c00a6c8:	a084983a 	sll	r2,r20,r2
 c00a6cc:	88e2d83a 	srl	r17,r17,r3
 c00a6d0:	2906b03a 	or	r3,r5,r4
 c00a6d4:	1004c03a 	cmpne	r2,r2,zero
 c00a6d8:	1886b03a 	or	r3,r3,r2
 c00a6dc:	188001cc 	andi	r2,r3,7
 c00a6e0:	10000726 	beq	r2,zero,c00a700 <__divdf3+0x8bc>
 c00a6e4:	188003cc 	andi	r2,r3,15
 c00a6e8:	01000104 	movi	r4,4
 c00a6ec:	11000426 	beq	r2,r4,c00a700 <__divdf3+0x8bc>
 c00a6f0:	1805883a 	mov	r2,r3
 c00a6f4:	10c00104 	addi	r3,r2,4
 c00a6f8:	1885803a 	cmpltu	r2,r3,r2
 c00a6fc:	88a3883a 	add	r17,r17,r2
 c00a700:	8880202c 	andhi	r2,r17,128
 c00a704:	10002926 	beq	r2,zero,c00a7ac <__divdf3+0x968>
 c00a708:	9900004c 	andi	r4,r19,1
 c00a70c:	00800044 	movi	r2,1
 c00a710:	0021883a 	mov	r16,zero
 c00a714:	002b883a 	mov	r21,zero
 c00a718:	003e2906 	br	c009fc0 <__alt_data_end+0xfc009fc0>
 c00a71c:	d9800017 	ldw	r6,0(sp)
 c00a720:	8c7fff84 	addi	r17,r17,-2
 c00a724:	a9ab883a 	add	r21,r21,r6
 c00a728:	a98b803a 	cmpltu	r5,r21,r6
 c00a72c:	2d8b883a 	add	r5,r5,r22
 c00a730:	2a11883a 	add	r8,r5,r8
 c00a734:	003ef806 	br	c00a318 <__alt_data_end+0xfc00a318>
 c00a738:	d9800017 	ldw	r6,0(sp)
 c00a73c:	318f883a 	add	r7,r6,r6
 c00a740:	398b803a 	cmpltu	r5,r7,r6
 c00a744:	2d8d883a 	add	r6,r5,r22
 c00a748:	81a1883a 	add	r16,r16,r6
 c00a74c:	a17fff84 	addi	r5,r20,-2
 c00a750:	d9c00015 	stw	r7,0(sp)
 c00a754:	003f8806 	br	c00a578 <__alt_data_end+0xfc00a578>
 c00a758:	013ff844 	movi	r4,-31
 c00a75c:	2085c83a 	sub	r2,r4,r2
 c00a760:	8888d83a 	srl	r4,r17,r2
 c00a764:	00800804 	movi	r2,32
 c00a768:	18802126 	beq	r3,r2,c00a7f0 <__divdf3+0x9ac>
 c00a76c:	04001004 	movi	r16,64
 c00a770:	80c7c83a 	sub	r3,r16,r3
 c00a774:	88e0983a 	sll	r16,r17,r3
 c00a778:	8504b03a 	or	r2,r16,r20
 c00a77c:	1004c03a 	cmpne	r2,r2,zero
 c00a780:	2084b03a 	or	r2,r4,r2
 c00a784:	144001cc 	andi	r17,r2,7
 c00a788:	88000d1e 	bne	r17,zero,c00a7c0 <__divdf3+0x97c>
 c00a78c:	0021883a 	mov	r16,zero
 c00a790:	102ad0fa 	srli	r21,r2,3
 c00a794:	9900004c 	andi	r4,r19,1
 c00a798:	0005883a 	mov	r2,zero
 c00a79c:	ac6ab03a 	or	r21,r21,r17
 c00a7a0:	003e0706 	br	c009fc0 <__alt_data_end+0xfc009fc0>
 c00a7a4:	1007883a 	mov	r3,r2
 c00a7a8:	0023883a 	mov	r17,zero
 c00a7ac:	8820927a 	slli	r16,r17,9
 c00a7b0:	1805883a 	mov	r2,r3
 c00a7b4:	8822977a 	slli	r17,r17,29
 c00a7b8:	8020d33a 	srli	r16,r16,12
 c00a7bc:	003ff406 	br	c00a790 <__alt_data_end+0xfc00a790>
 c00a7c0:	10c003cc 	andi	r3,r2,15
 c00a7c4:	01000104 	movi	r4,4
 c00a7c8:	193ff626 	beq	r3,r4,c00a7a4 <__alt_data_end+0xfc00a7a4>
 c00a7cc:	0023883a 	mov	r17,zero
 c00a7d0:	003fc806 	br	c00a6f4 <__alt_data_end+0xfc00a6f4>
 c00a7d4:	a8bfd136 	bltu	r21,r2,c00a71c <__alt_data_end+0xfc00a71c>
 c00a7d8:	2823883a 	mov	r17,r5
 c00a7dc:	003fa606 	br	c00a678 <__alt_data_end+0xfc00a678>
 c00a7e0:	d9800017 	ldw	r6,0(sp)
 c00a7e4:	30bfd436 	bltu	r6,r2,c00a738 <__alt_data_end+0xfc00a738>
 c00a7e8:	2829883a 	mov	r20,r5
 c00a7ec:	003f6406 	br	c00a580 <__alt_data_end+0xfc00a580>
 c00a7f0:	0021883a 	mov	r16,zero
 c00a7f4:	003fe006 	br	c00a778 <__alt_data_end+0xfc00a778>
 c00a7f8:	00800434 	movhi	r2,16
 c00a7fc:	8c000234 	orhi	r16,r17,8
 c00a800:	10bfffc4 	addi	r2,r2,-1
 c00a804:	e009883a 	mov	r4,fp
 c00a808:	80a0703a 	and	r16,r16,r2
 c00a80c:	a02b883a 	mov	r21,r20
 c00a810:	003e4e06 	br	c00a14c <__alt_data_end+0xfc00a14c>

0c00a814 <__eqdf2>:
 c00a814:	2804d53a 	srli	r2,r5,20
 c00a818:	3806d53a 	srli	r3,r7,20
 c00a81c:	02000434 	movhi	r8,16
 c00a820:	423fffc4 	addi	r8,r8,-1
 c00a824:	1081ffcc 	andi	r2,r2,2047
 c00a828:	0281ffc4 	movi	r10,2047
 c00a82c:	2a12703a 	and	r9,r5,r8
 c00a830:	18c1ffcc 	andi	r3,r3,2047
 c00a834:	3a10703a 	and	r8,r7,r8
 c00a838:	280ad7fa 	srli	r5,r5,31
 c00a83c:	380ed7fa 	srli	r7,r7,31
 c00a840:	12801026 	beq	r2,r10,c00a884 <__eqdf2+0x70>
 c00a844:	0281ffc4 	movi	r10,2047
 c00a848:	1a800a26 	beq	r3,r10,c00a874 <__eqdf2+0x60>
 c00a84c:	10c00226 	beq	r2,r3,c00a858 <__eqdf2+0x44>
 c00a850:	00800044 	movi	r2,1
 c00a854:	f800283a 	ret
 c00a858:	4a3ffd1e 	bne	r9,r8,c00a850 <__alt_data_end+0xfc00a850>
 c00a85c:	21bffc1e 	bne	r4,r6,c00a850 <__alt_data_end+0xfc00a850>
 c00a860:	29c00c26 	beq	r5,r7,c00a894 <__eqdf2+0x80>
 c00a864:	103ffa1e 	bne	r2,zero,c00a850 <__alt_data_end+0xfc00a850>
 c00a868:	2244b03a 	or	r2,r4,r9
 c00a86c:	1004c03a 	cmpne	r2,r2,zero
 c00a870:	f800283a 	ret
 c00a874:	3214b03a 	or	r10,r6,r8
 c00a878:	503ff426 	beq	r10,zero,c00a84c <__alt_data_end+0xfc00a84c>
 c00a87c:	00800044 	movi	r2,1
 c00a880:	f800283a 	ret
 c00a884:	2254b03a 	or	r10,r4,r9
 c00a888:	503fee26 	beq	r10,zero,c00a844 <__alt_data_end+0xfc00a844>
 c00a88c:	00800044 	movi	r2,1
 c00a890:	f800283a 	ret
 c00a894:	0005883a 	mov	r2,zero
 c00a898:	f800283a 	ret

0c00a89c <__gedf2>:
 c00a89c:	2804d53a 	srli	r2,r5,20
 c00a8a0:	3806d53a 	srli	r3,r7,20
 c00a8a4:	02000434 	movhi	r8,16
 c00a8a8:	423fffc4 	addi	r8,r8,-1
 c00a8ac:	1081ffcc 	andi	r2,r2,2047
 c00a8b0:	0241ffc4 	movi	r9,2047
 c00a8b4:	2a14703a 	and	r10,r5,r8
 c00a8b8:	18c1ffcc 	andi	r3,r3,2047
 c00a8bc:	3a10703a 	and	r8,r7,r8
 c00a8c0:	280ad7fa 	srli	r5,r5,31
 c00a8c4:	380ed7fa 	srli	r7,r7,31
 c00a8c8:	12401d26 	beq	r2,r9,c00a940 <__gedf2+0xa4>
 c00a8cc:	0241ffc4 	movi	r9,2047
 c00a8d0:	1a401226 	beq	r3,r9,c00a91c <__gedf2+0x80>
 c00a8d4:	1000081e 	bne	r2,zero,c00a8f8 <__gedf2+0x5c>
 c00a8d8:	2296b03a 	or	r11,r4,r10
 c00a8dc:	5813003a 	cmpeq	r9,r11,zero
 c00a8e0:	1800091e 	bne	r3,zero,c00a908 <__gedf2+0x6c>
 c00a8e4:	3218b03a 	or	r12,r6,r8
 c00a8e8:	6000071e 	bne	r12,zero,c00a908 <__gedf2+0x6c>
 c00a8ec:	0005883a 	mov	r2,zero
 c00a8f0:	5800101e 	bne	r11,zero,c00a934 <__gedf2+0x98>
 c00a8f4:	f800283a 	ret
 c00a8f8:	18000c1e 	bne	r3,zero,c00a92c <__gedf2+0x90>
 c00a8fc:	3212b03a 	or	r9,r6,r8
 c00a900:	48000c26 	beq	r9,zero,c00a934 <__gedf2+0x98>
 c00a904:	0013883a 	mov	r9,zero
 c00a908:	39c03fcc 	andi	r7,r7,255
 c00a90c:	48000826 	beq	r9,zero,c00a930 <__gedf2+0x94>
 c00a910:	38000926 	beq	r7,zero,c00a938 <__gedf2+0x9c>
 c00a914:	00800044 	movi	r2,1
 c00a918:	f800283a 	ret
 c00a91c:	3212b03a 	or	r9,r6,r8
 c00a920:	483fec26 	beq	r9,zero,c00a8d4 <__alt_data_end+0xfc00a8d4>
 c00a924:	00bfff84 	movi	r2,-2
 c00a928:	f800283a 	ret
 c00a92c:	39c03fcc 	andi	r7,r7,255
 c00a930:	29c00626 	beq	r5,r7,c00a94c <__gedf2+0xb0>
 c00a934:	283ff726 	beq	r5,zero,c00a914 <__alt_data_end+0xfc00a914>
 c00a938:	00bfffc4 	movi	r2,-1
 c00a93c:	f800283a 	ret
 c00a940:	2292b03a 	or	r9,r4,r10
 c00a944:	483fe126 	beq	r9,zero,c00a8cc <__alt_data_end+0xfc00a8cc>
 c00a948:	003ff606 	br	c00a924 <__alt_data_end+0xfc00a924>
 c00a94c:	18bff916 	blt	r3,r2,c00a934 <__alt_data_end+0xfc00a934>
 c00a950:	10c00316 	blt	r2,r3,c00a960 <__gedf2+0xc4>
 c00a954:	42bff736 	bltu	r8,r10,c00a934 <__alt_data_end+0xfc00a934>
 c00a958:	52000326 	beq	r10,r8,c00a968 <__gedf2+0xcc>
 c00a95c:	5200042e 	bgeu	r10,r8,c00a970 <__gedf2+0xd4>
 c00a960:	283fec1e 	bne	r5,zero,c00a914 <__alt_data_end+0xfc00a914>
 c00a964:	003ff406 	br	c00a938 <__alt_data_end+0xfc00a938>
 c00a968:	313ff236 	bltu	r6,r4,c00a934 <__alt_data_end+0xfc00a934>
 c00a96c:	21bffc36 	bltu	r4,r6,c00a960 <__alt_data_end+0xfc00a960>
 c00a970:	0005883a 	mov	r2,zero
 c00a974:	f800283a 	ret

0c00a978 <__ledf2>:
 c00a978:	2804d53a 	srli	r2,r5,20
 c00a97c:	3810d53a 	srli	r8,r7,20
 c00a980:	00c00434 	movhi	r3,16
 c00a984:	18ffffc4 	addi	r3,r3,-1
 c00a988:	1081ffcc 	andi	r2,r2,2047
 c00a98c:	0241ffc4 	movi	r9,2047
 c00a990:	28d4703a 	and	r10,r5,r3
 c00a994:	4201ffcc 	andi	r8,r8,2047
 c00a998:	38c6703a 	and	r3,r7,r3
 c00a99c:	280ad7fa 	srli	r5,r5,31
 c00a9a0:	380ed7fa 	srli	r7,r7,31
 c00a9a4:	12401f26 	beq	r2,r9,c00aa24 <__ledf2+0xac>
 c00a9a8:	0241ffc4 	movi	r9,2047
 c00a9ac:	42401426 	beq	r8,r9,c00aa00 <__ledf2+0x88>
 c00a9b0:	1000091e 	bne	r2,zero,c00a9d8 <__ledf2+0x60>
 c00a9b4:	2296b03a 	or	r11,r4,r10
 c00a9b8:	5813003a 	cmpeq	r9,r11,zero
 c00a9bc:	29403fcc 	andi	r5,r5,255
 c00a9c0:	40000a1e 	bne	r8,zero,c00a9ec <__ledf2+0x74>
 c00a9c4:	30d8b03a 	or	r12,r6,r3
 c00a9c8:	6000081e 	bne	r12,zero,c00a9ec <__ledf2+0x74>
 c00a9cc:	0005883a 	mov	r2,zero
 c00a9d0:	5800111e 	bne	r11,zero,c00aa18 <__ledf2+0xa0>
 c00a9d4:	f800283a 	ret
 c00a9d8:	29403fcc 	andi	r5,r5,255
 c00a9dc:	40000c1e 	bne	r8,zero,c00aa10 <__ledf2+0x98>
 c00a9e0:	30d2b03a 	or	r9,r6,r3
 c00a9e4:	48000c26 	beq	r9,zero,c00aa18 <__ledf2+0xa0>
 c00a9e8:	0013883a 	mov	r9,zero
 c00a9ec:	39c03fcc 	andi	r7,r7,255
 c00a9f0:	48000826 	beq	r9,zero,c00aa14 <__ledf2+0x9c>
 c00a9f4:	38001126 	beq	r7,zero,c00aa3c <__ledf2+0xc4>
 c00a9f8:	00800044 	movi	r2,1
 c00a9fc:	f800283a 	ret
 c00aa00:	30d2b03a 	or	r9,r6,r3
 c00aa04:	483fea26 	beq	r9,zero,c00a9b0 <__alt_data_end+0xfc00a9b0>
 c00aa08:	00800084 	movi	r2,2
 c00aa0c:	f800283a 	ret
 c00aa10:	39c03fcc 	andi	r7,r7,255
 c00aa14:	39400726 	beq	r7,r5,c00aa34 <__ledf2+0xbc>
 c00aa18:	2800081e 	bne	r5,zero,c00aa3c <__ledf2+0xc4>
 c00aa1c:	00800044 	movi	r2,1
 c00aa20:	f800283a 	ret
 c00aa24:	2292b03a 	or	r9,r4,r10
 c00aa28:	483fdf26 	beq	r9,zero,c00a9a8 <__alt_data_end+0xfc00a9a8>
 c00aa2c:	00800084 	movi	r2,2
 c00aa30:	f800283a 	ret
 c00aa34:	4080030e 	bge	r8,r2,c00aa44 <__ledf2+0xcc>
 c00aa38:	383fef26 	beq	r7,zero,c00a9f8 <__alt_data_end+0xfc00a9f8>
 c00aa3c:	00bfffc4 	movi	r2,-1
 c00aa40:	f800283a 	ret
 c00aa44:	123feb16 	blt	r2,r8,c00a9f4 <__alt_data_end+0xfc00a9f4>
 c00aa48:	1abff336 	bltu	r3,r10,c00aa18 <__alt_data_end+0xfc00aa18>
 c00aa4c:	50c00326 	beq	r10,r3,c00aa5c <__ledf2+0xe4>
 c00aa50:	50c0042e 	bgeu	r10,r3,c00aa64 <__ledf2+0xec>
 c00aa54:	283fe81e 	bne	r5,zero,c00a9f8 <__alt_data_end+0xfc00a9f8>
 c00aa58:	003ff806 	br	c00aa3c <__alt_data_end+0xfc00aa3c>
 c00aa5c:	313fee36 	bltu	r6,r4,c00aa18 <__alt_data_end+0xfc00aa18>
 c00aa60:	21bffc36 	bltu	r4,r6,c00aa54 <__alt_data_end+0xfc00aa54>
 c00aa64:	0005883a 	mov	r2,zero
 c00aa68:	f800283a 	ret

0c00aa6c <__muldf3>:
 c00aa6c:	deffee04 	addi	sp,sp,-72
 c00aa70:	dd000c15 	stw	r20,48(sp)
 c00aa74:	2828d53a 	srli	r20,r5,20
 c00aa78:	ddc00f15 	stw	r23,60(sp)
 c00aa7c:	282ed7fa 	srli	r23,r5,31
 c00aa80:	dc000815 	stw	r16,32(sp)
 c00aa84:	04000434 	movhi	r16,16
 c00aa88:	dcc00b15 	stw	r19,44(sp)
 c00aa8c:	843fffc4 	addi	r16,r16,-1
 c00aa90:	dfc01115 	stw	ra,68(sp)
 c00aa94:	df001015 	stw	fp,64(sp)
 c00aa98:	dd800e15 	stw	r22,56(sp)
 c00aa9c:	dd400d15 	stw	r21,52(sp)
 c00aaa0:	dc800a15 	stw	r18,40(sp)
 c00aaa4:	dc400915 	stw	r17,36(sp)
 c00aaa8:	a501ffcc 	andi	r20,r20,2047
 c00aaac:	2c20703a 	and	r16,r5,r16
 c00aab0:	b827883a 	mov	r19,r23
 c00aab4:	ba403fcc 	andi	r9,r23,255
 c00aab8:	a0006026 	beq	r20,zero,c00ac3c <__muldf3+0x1d0>
 c00aabc:	0081ffc4 	movi	r2,2047
 c00aac0:	202d883a 	mov	r22,r4
 c00aac4:	a0803626 	beq	r20,r2,c00aba0 <__muldf3+0x134>
 c00aac8:	84000434 	orhi	r16,r16,16
 c00aacc:	200ad77a 	srli	r5,r4,29
 c00aad0:	800490fa 	slli	r2,r16,3
 c00aad4:	202c90fa 	slli	r22,r4,3
 c00aad8:	a53f0044 	addi	r20,r20,-1023
 c00aadc:	28a0b03a 	or	r16,r5,r2
 c00aae0:	002b883a 	mov	r21,zero
 c00aae4:	000b883a 	mov	r5,zero
 c00aae8:	3804d53a 	srli	r2,r7,20
 c00aaec:	3838d7fa 	srli	fp,r7,31
 c00aaf0:	04400434 	movhi	r17,16
 c00aaf4:	8c7fffc4 	addi	r17,r17,-1
 c00aaf8:	1081ffcc 	andi	r2,r2,2047
 c00aafc:	3025883a 	mov	r18,r6
 c00ab00:	3c62703a 	and	r17,r7,r17
 c00ab04:	e2803fcc 	andi	r10,fp,255
 c00ab08:	10006d26 	beq	r2,zero,c00acc0 <__muldf3+0x254>
 c00ab0c:	00c1ffc4 	movi	r3,2047
 c00ab10:	10c06526 	beq	r2,r3,c00aca8 <__muldf3+0x23c>
 c00ab14:	8c400434 	orhi	r17,r17,16
 c00ab18:	300ed77a 	srli	r7,r6,29
 c00ab1c:	880690fa 	slli	r3,r17,3
 c00ab20:	302490fa 	slli	r18,r6,3
 c00ab24:	10bf0044 	addi	r2,r2,-1023
 c00ab28:	38e2b03a 	or	r17,r7,r3
 c00ab2c:	000f883a 	mov	r7,zero
 c00ab30:	a087883a 	add	r3,r20,r2
 c00ab34:	010003c4 	movi	r4,15
 c00ab38:	3d44b03a 	or	r2,r7,r21
 c00ab3c:	e5ccf03a 	xor	r6,fp,r23
 c00ab40:	1a000044 	addi	r8,r3,1
 c00ab44:	20809b36 	bltu	r4,r2,c00adb4 <__muldf3+0x348>
 c00ab48:	100490ba 	slli	r2,r2,2
 c00ab4c:	01030074 	movhi	r4,3073
 c00ab50:	212ad804 	addi	r4,r4,-21664
 c00ab54:	1105883a 	add	r2,r2,r4
 c00ab58:	10800017 	ldw	r2,0(r2)
 c00ab5c:	1000683a 	jmp	r2
 c00ab60:	0c00adb4 	orhi	r16,at,694
 c00ab64:	0c00abc0 	call	c00abc <__alt_mem_onchip_memory2_0+0xc00abc>
 c00ab68:	0c00abc0 	call	c00abc <__alt_mem_onchip_memory2_0+0xc00abc>
 c00ab6c:	0c00abbc 	xorhi	r16,at,686
 c00ab70:	0c00ad90 	cmplti	r16,at,694
 c00ab74:	0c00ad90 	cmplti	r16,at,694
 c00ab78:	0c00ad78 	rdprs	r16,at,693
 c00ab7c:	0c00abbc 	xorhi	r16,at,686
 c00ab80:	0c00ad90 	cmplti	r16,at,694
 c00ab84:	0c00ad78 	rdprs	r16,at,693
 c00ab88:	0c00ad90 	cmplti	r16,at,694
 c00ab8c:	0c00abbc 	xorhi	r16,at,686
 c00ab90:	0c00ada0 	cmpeqi	r16,at,694
 c00ab94:	0c00ada0 	cmpeqi	r16,at,694
 c00ab98:	0c00ada0 	cmpeqi	r16,at,694
 c00ab9c:	0c00b100 	call	c00b10 <__alt_mem_onchip_memory2_0+0xc00b10>
 c00aba0:	2404b03a 	or	r2,r4,r16
 c00aba4:	1000711e 	bne	r2,zero,c00ad6c <__muldf3+0x300>
 c00aba8:	05400204 	movi	r21,8
 c00abac:	0021883a 	mov	r16,zero
 c00abb0:	002d883a 	mov	r22,zero
 c00abb4:	01400084 	movi	r5,2
 c00abb8:	003fcb06 	br	c00aae8 <__alt_data_end+0xfc00aae8>
 c00abbc:	500d883a 	mov	r6,r10
 c00abc0:	00800084 	movi	r2,2
 c00abc4:	38805926 	beq	r7,r2,c00ad2c <__muldf3+0x2c0>
 c00abc8:	008000c4 	movi	r2,3
 c00abcc:	3881bb26 	beq	r7,r2,c00b2bc <__muldf3+0x850>
 c00abd0:	00800044 	movi	r2,1
 c00abd4:	3881961e 	bne	r7,r2,c00b230 <__muldf3+0x7c4>
 c00abd8:	3027883a 	mov	r19,r6
 c00abdc:	0005883a 	mov	r2,zero
 c00abe0:	0021883a 	mov	r16,zero
 c00abe4:	002d883a 	mov	r22,zero
 c00abe8:	1004953a 	slli	r2,r2,20
 c00abec:	98c03fcc 	andi	r3,r19,255
 c00abf0:	04400434 	movhi	r17,16
 c00abf4:	8c7fffc4 	addi	r17,r17,-1
 c00abf8:	180697fa 	slli	r3,r3,31
 c00abfc:	8460703a 	and	r16,r16,r17
 c00ac00:	80a0b03a 	or	r16,r16,r2
 c00ac04:	80c6b03a 	or	r3,r16,r3
 c00ac08:	b005883a 	mov	r2,r22
 c00ac0c:	dfc01117 	ldw	ra,68(sp)
 c00ac10:	df001017 	ldw	fp,64(sp)
 c00ac14:	ddc00f17 	ldw	r23,60(sp)
 c00ac18:	dd800e17 	ldw	r22,56(sp)
 c00ac1c:	dd400d17 	ldw	r21,52(sp)
 c00ac20:	dd000c17 	ldw	r20,48(sp)
 c00ac24:	dcc00b17 	ldw	r19,44(sp)
 c00ac28:	dc800a17 	ldw	r18,40(sp)
 c00ac2c:	dc400917 	ldw	r17,36(sp)
 c00ac30:	dc000817 	ldw	r16,32(sp)
 c00ac34:	dec01204 	addi	sp,sp,72
 c00ac38:	f800283a 	ret
 c00ac3c:	2404b03a 	or	r2,r4,r16
 c00ac40:	202b883a 	mov	r21,r4
 c00ac44:	10004426 	beq	r2,zero,c00ad58 <__muldf3+0x2ec>
 c00ac48:	80015126 	beq	r16,zero,c00b190 <__muldf3+0x724>
 c00ac4c:	8009883a 	mov	r4,r16
 c00ac50:	d9800715 	stw	r6,28(sp)
 c00ac54:	d9c00215 	stw	r7,8(sp)
 c00ac58:	da400415 	stw	r9,16(sp)
 c00ac5c:	c00bdd80 	call	c00bdd8 <__clzsi2>
 c00ac60:	d9800717 	ldw	r6,28(sp)
 c00ac64:	d9c00217 	ldw	r7,8(sp)
 c00ac68:	da400417 	ldw	r9,16(sp)
 c00ac6c:	113ffd44 	addi	r4,r2,-11
 c00ac70:	00c00704 	movi	r3,28
 c00ac74:	19014216 	blt	r3,r4,c00b180 <__muldf3+0x714>
 c00ac78:	00c00744 	movi	r3,29
 c00ac7c:	15bffe04 	addi	r22,r2,-8
 c00ac80:	1907c83a 	sub	r3,r3,r4
 c00ac84:	85a0983a 	sll	r16,r16,r22
 c00ac88:	a8c6d83a 	srl	r3,r21,r3
 c00ac8c:	adac983a 	sll	r22,r21,r22
 c00ac90:	1c20b03a 	or	r16,r3,r16
 c00ac94:	1080fcc4 	addi	r2,r2,1011
 c00ac98:	00a9c83a 	sub	r20,zero,r2
 c00ac9c:	002b883a 	mov	r21,zero
 c00aca0:	000b883a 	mov	r5,zero
 c00aca4:	003f9006 	br	c00aae8 <__alt_data_end+0xfc00aae8>
 c00aca8:	3446b03a 	or	r3,r6,r17
 c00acac:	1800281e 	bne	r3,zero,c00ad50 <__muldf3+0x2e4>
 c00acb0:	0023883a 	mov	r17,zero
 c00acb4:	0025883a 	mov	r18,zero
 c00acb8:	01c00084 	movi	r7,2
 c00acbc:	003f9c06 	br	c00ab30 <__alt_data_end+0xfc00ab30>
 c00acc0:	3446b03a 	or	r3,r6,r17
 c00acc4:	18001e26 	beq	r3,zero,c00ad40 <__muldf3+0x2d4>
 c00acc8:	88012126 	beq	r17,zero,c00b150 <__muldf3+0x6e4>
 c00accc:	8809883a 	mov	r4,r17
 c00acd0:	d9400215 	stw	r5,8(sp)
 c00acd4:	d9800715 	stw	r6,28(sp)
 c00acd8:	da400415 	stw	r9,16(sp)
 c00acdc:	da800315 	stw	r10,12(sp)
 c00ace0:	c00bdd80 	call	c00bdd8 <__clzsi2>
 c00ace4:	d9400217 	ldw	r5,8(sp)
 c00ace8:	d9800717 	ldw	r6,28(sp)
 c00acec:	da400417 	ldw	r9,16(sp)
 c00acf0:	da800317 	ldw	r10,12(sp)
 c00acf4:	113ffd44 	addi	r4,r2,-11
 c00acf8:	00c00704 	movi	r3,28
 c00acfc:	19011016 	blt	r3,r4,c00b140 <__muldf3+0x6d4>
 c00ad00:	00c00744 	movi	r3,29
 c00ad04:	14bffe04 	addi	r18,r2,-8
 c00ad08:	1907c83a 	sub	r3,r3,r4
 c00ad0c:	8ca2983a 	sll	r17,r17,r18
 c00ad10:	30c6d83a 	srl	r3,r6,r3
 c00ad14:	34a4983a 	sll	r18,r6,r18
 c00ad18:	1c62b03a 	or	r17,r3,r17
 c00ad1c:	1080fcc4 	addi	r2,r2,1011
 c00ad20:	0085c83a 	sub	r2,zero,r2
 c00ad24:	000f883a 	mov	r7,zero
 c00ad28:	003f8106 	br	c00ab30 <__alt_data_end+0xfc00ab30>
 c00ad2c:	3027883a 	mov	r19,r6
 c00ad30:	0081ffc4 	movi	r2,2047
 c00ad34:	0021883a 	mov	r16,zero
 c00ad38:	002d883a 	mov	r22,zero
 c00ad3c:	003faa06 	br	c00abe8 <__alt_data_end+0xfc00abe8>
 c00ad40:	0023883a 	mov	r17,zero
 c00ad44:	0025883a 	mov	r18,zero
 c00ad48:	01c00044 	movi	r7,1
 c00ad4c:	003f7806 	br	c00ab30 <__alt_data_end+0xfc00ab30>
 c00ad50:	01c000c4 	movi	r7,3
 c00ad54:	003f7606 	br	c00ab30 <__alt_data_end+0xfc00ab30>
 c00ad58:	05400104 	movi	r21,4
 c00ad5c:	0021883a 	mov	r16,zero
 c00ad60:	002d883a 	mov	r22,zero
 c00ad64:	01400044 	movi	r5,1
 c00ad68:	003f5f06 	br	c00aae8 <__alt_data_end+0xfc00aae8>
 c00ad6c:	05400304 	movi	r21,12
 c00ad70:	014000c4 	movi	r5,3
 c00ad74:	003f5c06 	br	c00aae8 <__alt_data_end+0xfc00aae8>
 c00ad78:	04000434 	movhi	r16,16
 c00ad7c:	0027883a 	mov	r19,zero
 c00ad80:	843fffc4 	addi	r16,r16,-1
 c00ad84:	05bfffc4 	movi	r22,-1
 c00ad88:	0081ffc4 	movi	r2,2047
 c00ad8c:	003f9606 	br	c00abe8 <__alt_data_end+0xfc00abe8>
 c00ad90:	8023883a 	mov	r17,r16
 c00ad94:	b025883a 	mov	r18,r22
 c00ad98:	280f883a 	mov	r7,r5
 c00ad9c:	003f8806 	br	c00abc0 <__alt_data_end+0xfc00abc0>
 c00ada0:	8023883a 	mov	r17,r16
 c00ada4:	b025883a 	mov	r18,r22
 c00ada8:	480d883a 	mov	r6,r9
 c00adac:	280f883a 	mov	r7,r5
 c00adb0:	003f8306 	br	c00abc0 <__alt_data_end+0xfc00abc0>
 c00adb4:	b026d43a 	srli	r19,r22,16
 c00adb8:	902ed43a 	srli	r23,r18,16
 c00adbc:	b5bfffcc 	andi	r22,r22,65535
 c00adc0:	94bfffcc 	andi	r18,r18,65535
 c00adc4:	b00b883a 	mov	r5,r22
 c00adc8:	9009883a 	mov	r4,r18
 c00adcc:	d8c00515 	stw	r3,20(sp)
 c00add0:	d9800715 	stw	r6,28(sp)
 c00add4:	da000615 	stw	r8,24(sp)
 c00add8:	c000b880 	call	c000b88 <__mulsi3>
 c00addc:	980b883a 	mov	r5,r19
 c00ade0:	9009883a 	mov	r4,r18
 c00ade4:	1029883a 	mov	r20,r2
 c00ade8:	c000b880 	call	c000b88 <__mulsi3>
 c00adec:	b80b883a 	mov	r5,r23
 c00adf0:	9809883a 	mov	r4,r19
 c00adf4:	102b883a 	mov	r21,r2
 c00adf8:	c000b880 	call	c000b88 <__mulsi3>
 c00adfc:	b809883a 	mov	r4,r23
 c00ae00:	b00b883a 	mov	r5,r22
 c00ae04:	1039883a 	mov	fp,r2
 c00ae08:	c000b880 	call	c000b88 <__mulsi3>
 c00ae0c:	a008d43a 	srli	r4,r20,16
 c00ae10:	1545883a 	add	r2,r2,r21
 c00ae14:	d8c00517 	ldw	r3,20(sp)
 c00ae18:	2085883a 	add	r2,r4,r2
 c00ae1c:	d9800717 	ldw	r6,28(sp)
 c00ae20:	da000617 	ldw	r8,24(sp)
 c00ae24:	1540022e 	bgeu	r2,r21,c00ae30 <__muldf3+0x3c4>
 c00ae28:	01000074 	movhi	r4,1
 c00ae2c:	e139883a 	add	fp,fp,r4
 c00ae30:	100e943a 	slli	r7,r2,16
 c00ae34:	1004d43a 	srli	r2,r2,16
 c00ae38:	882ad43a 	srli	r21,r17,16
 c00ae3c:	a53fffcc 	andi	r20,r20,65535
 c00ae40:	8c7fffcc 	andi	r17,r17,65535
 c00ae44:	3d29883a 	add	r20,r7,r20
 c00ae48:	b00b883a 	mov	r5,r22
 c00ae4c:	8809883a 	mov	r4,r17
 c00ae50:	d8c00515 	stw	r3,20(sp)
 c00ae54:	d9800715 	stw	r6,28(sp)
 c00ae58:	da000615 	stw	r8,24(sp)
 c00ae5c:	dd000115 	stw	r20,4(sp)
 c00ae60:	d8800015 	stw	r2,0(sp)
 c00ae64:	c000b880 	call	c000b88 <__mulsi3>
 c00ae68:	980b883a 	mov	r5,r19
 c00ae6c:	8809883a 	mov	r4,r17
 c00ae70:	d8800215 	stw	r2,8(sp)
 c00ae74:	c000b880 	call	c000b88 <__mulsi3>
 c00ae78:	9809883a 	mov	r4,r19
 c00ae7c:	a80b883a 	mov	r5,r21
 c00ae80:	1029883a 	mov	r20,r2
 c00ae84:	c000b880 	call	c000b88 <__mulsi3>
 c00ae88:	b00b883a 	mov	r5,r22
 c00ae8c:	a809883a 	mov	r4,r21
 c00ae90:	d8800415 	stw	r2,16(sp)
 c00ae94:	c000b880 	call	c000b88 <__mulsi3>
 c00ae98:	d9c00217 	ldw	r7,8(sp)
 c00ae9c:	1505883a 	add	r2,r2,r20
 c00aea0:	d8c00517 	ldw	r3,20(sp)
 c00aea4:	3826d43a 	srli	r19,r7,16
 c00aea8:	d9800717 	ldw	r6,28(sp)
 c00aeac:	da000617 	ldw	r8,24(sp)
 c00aeb0:	9885883a 	add	r2,r19,r2
 c00aeb4:	da400417 	ldw	r9,16(sp)
 c00aeb8:	1500022e 	bgeu	r2,r20,c00aec4 <__muldf3+0x458>
 c00aebc:	01000074 	movhi	r4,1
 c00aec0:	4913883a 	add	r9,r9,r4
 c00aec4:	1028d43a 	srli	r20,r2,16
 c00aec8:	1004943a 	slli	r2,r2,16
 c00aecc:	802cd43a 	srli	r22,r16,16
 c00aed0:	843fffcc 	andi	r16,r16,65535
 c00aed4:	3cffffcc 	andi	r19,r7,65535
 c00aed8:	9009883a 	mov	r4,r18
 c00aedc:	800b883a 	mov	r5,r16
 c00aee0:	a269883a 	add	r20,r20,r9
 c00aee4:	d8c00515 	stw	r3,20(sp)
 c00aee8:	d9800715 	stw	r6,28(sp)
 c00aeec:	da000615 	stw	r8,24(sp)
 c00aef0:	14e7883a 	add	r19,r2,r19
 c00aef4:	c000b880 	call	c000b88 <__mulsi3>
 c00aef8:	9009883a 	mov	r4,r18
 c00aefc:	b00b883a 	mov	r5,r22
 c00af00:	d8800315 	stw	r2,12(sp)
 c00af04:	c000b880 	call	c000b88 <__mulsi3>
 c00af08:	b809883a 	mov	r4,r23
 c00af0c:	b00b883a 	mov	r5,r22
 c00af10:	d8800215 	stw	r2,8(sp)
 c00af14:	c000b880 	call	c000b88 <__mulsi3>
 c00af18:	b80b883a 	mov	r5,r23
 c00af1c:	8009883a 	mov	r4,r16
 c00af20:	d8800415 	stw	r2,16(sp)
 c00af24:	c000b880 	call	c000b88 <__mulsi3>
 c00af28:	da800317 	ldw	r10,12(sp)
 c00af2c:	d9c00217 	ldw	r7,8(sp)
 c00af30:	d9000017 	ldw	r4,0(sp)
 c00af34:	502ed43a 	srli	r23,r10,16
 c00af38:	11c5883a 	add	r2,r2,r7
 c00af3c:	24e5883a 	add	r18,r4,r19
 c00af40:	b885883a 	add	r2,r23,r2
 c00af44:	d8c00517 	ldw	r3,20(sp)
 c00af48:	d9800717 	ldw	r6,28(sp)
 c00af4c:	da000617 	ldw	r8,24(sp)
 c00af50:	da400417 	ldw	r9,16(sp)
 c00af54:	11c0022e 	bgeu	r2,r7,c00af60 <__muldf3+0x4f4>
 c00af58:	01000074 	movhi	r4,1
 c00af5c:	4913883a 	add	r9,r9,r4
 c00af60:	100ed43a 	srli	r7,r2,16
 c00af64:	1004943a 	slli	r2,r2,16
 c00af68:	55ffffcc 	andi	r23,r10,65535
 c00af6c:	3a53883a 	add	r9,r7,r9
 c00af70:	8809883a 	mov	r4,r17
 c00af74:	800b883a 	mov	r5,r16
 c00af78:	d8c00515 	stw	r3,20(sp)
 c00af7c:	d9800715 	stw	r6,28(sp)
 c00af80:	da000615 	stw	r8,24(sp)
 c00af84:	da400415 	stw	r9,16(sp)
 c00af88:	15ef883a 	add	r23,r2,r23
 c00af8c:	c000b880 	call	c000b88 <__mulsi3>
 c00af90:	8809883a 	mov	r4,r17
 c00af94:	b00b883a 	mov	r5,r22
 c00af98:	d8800215 	stw	r2,8(sp)
 c00af9c:	c000b880 	call	c000b88 <__mulsi3>
 c00afa0:	b00b883a 	mov	r5,r22
 c00afa4:	a809883a 	mov	r4,r21
 c00afa8:	d8800315 	stw	r2,12(sp)
 c00afac:	c000b880 	call	c000b88 <__mulsi3>
 c00afb0:	8009883a 	mov	r4,r16
 c00afb4:	a80b883a 	mov	r5,r21
 c00afb8:	1023883a 	mov	r17,r2
 c00afbc:	c000b880 	call	c000b88 <__mulsi3>
 c00afc0:	d9c00217 	ldw	r7,8(sp)
 c00afc4:	da800317 	ldw	r10,12(sp)
 c00afc8:	d8c00517 	ldw	r3,20(sp)
 c00afcc:	3808d43a 	srli	r4,r7,16
 c00afd0:	1285883a 	add	r2,r2,r10
 c00afd4:	d9800717 	ldw	r6,28(sp)
 c00afd8:	2085883a 	add	r2,r4,r2
 c00afdc:	da000617 	ldw	r8,24(sp)
 c00afe0:	da400417 	ldw	r9,16(sp)
 c00afe4:	1280022e 	bgeu	r2,r10,c00aff0 <__muldf3+0x584>
 c00afe8:	01000074 	movhi	r4,1
 c00afec:	8923883a 	add	r17,r17,r4
 c00aff0:	1008943a 	slli	r4,r2,16
 c00aff4:	39ffffcc 	andi	r7,r7,65535
 c00aff8:	e4b9883a 	add	fp,fp,r18
 c00affc:	21cf883a 	add	r7,r4,r7
 c00b000:	e4e7803a 	cmpltu	r19,fp,r19
 c00b004:	3d0f883a 	add	r7,r7,r20
 c00b008:	bf39883a 	add	fp,r23,fp
 c00b00c:	99c9883a 	add	r4,r19,r7
 c00b010:	e5ef803a 	cmpltu	r23,fp,r23
 c00b014:	490b883a 	add	r5,r9,r4
 c00b018:	1004d43a 	srli	r2,r2,16
 c00b01c:	b965883a 	add	r18,r23,r5
 c00b020:	24c9803a 	cmpltu	r4,r4,r19
 c00b024:	3d29803a 	cmpltu	r20,r7,r20
 c00b028:	a128b03a 	or	r20,r20,r4
 c00b02c:	95ef803a 	cmpltu	r23,r18,r23
 c00b030:	2a53803a 	cmpltu	r9,r5,r9
 c00b034:	a0a9883a 	add	r20,r20,r2
 c00b038:	4deeb03a 	or	r23,r9,r23
 c00b03c:	a5ef883a 	add	r23,r20,r23
 c00b040:	bc63883a 	add	r17,r23,r17
 c00b044:	e004927a 	slli	r2,fp,9
 c00b048:	d9000117 	ldw	r4,4(sp)
 c00b04c:	882e927a 	slli	r23,r17,9
 c00b050:	9022d5fa 	srli	r17,r18,23
 c00b054:	e038d5fa 	srli	fp,fp,23
 c00b058:	1104b03a 	or	r2,r2,r4
 c00b05c:	9024927a 	slli	r18,r18,9
 c00b060:	1004c03a 	cmpne	r2,r2,zero
 c00b064:	bc62b03a 	or	r17,r23,r17
 c00b068:	1738b03a 	or	fp,r2,fp
 c00b06c:	8880402c 	andhi	r2,r17,256
 c00b070:	e4a4b03a 	or	r18,fp,r18
 c00b074:	10000726 	beq	r2,zero,c00b094 <__muldf3+0x628>
 c00b078:	9006d07a 	srli	r3,r18,1
 c00b07c:	880497fa 	slli	r2,r17,31
 c00b080:	9480004c 	andi	r18,r18,1
 c00b084:	8822d07a 	srli	r17,r17,1
 c00b088:	1ca4b03a 	or	r18,r3,r18
 c00b08c:	14a4b03a 	or	r18,r2,r18
 c00b090:	4007883a 	mov	r3,r8
 c00b094:	1880ffc4 	addi	r2,r3,1023
 c00b098:	0080460e 	bge	zero,r2,c00b1b4 <__muldf3+0x748>
 c00b09c:	910001cc 	andi	r4,r18,7
 c00b0a0:	20000726 	beq	r4,zero,c00b0c0 <__muldf3+0x654>
 c00b0a4:	910003cc 	andi	r4,r18,15
 c00b0a8:	01400104 	movi	r5,4
 c00b0ac:	21400426 	beq	r4,r5,c00b0c0 <__muldf3+0x654>
 c00b0b0:	9149883a 	add	r4,r18,r5
 c00b0b4:	24a5803a 	cmpltu	r18,r4,r18
 c00b0b8:	8ca3883a 	add	r17,r17,r18
 c00b0bc:	2025883a 	mov	r18,r4
 c00b0c0:	8900402c 	andhi	r4,r17,256
 c00b0c4:	20000426 	beq	r4,zero,c00b0d8 <__muldf3+0x66c>
 c00b0c8:	18810004 	addi	r2,r3,1024
 c00b0cc:	00ffc034 	movhi	r3,65280
 c00b0d0:	18ffffc4 	addi	r3,r3,-1
 c00b0d4:	88e2703a 	and	r17,r17,r3
 c00b0d8:	00c1ff84 	movi	r3,2046
 c00b0dc:	18bf1316 	blt	r3,r2,c00ad2c <__alt_data_end+0xfc00ad2c>
 c00b0e0:	882c977a 	slli	r22,r17,29
 c00b0e4:	9024d0fa 	srli	r18,r18,3
 c00b0e8:	8822927a 	slli	r17,r17,9
 c00b0ec:	1081ffcc 	andi	r2,r2,2047
 c00b0f0:	b4acb03a 	or	r22,r22,r18
 c00b0f4:	8820d33a 	srli	r16,r17,12
 c00b0f8:	3027883a 	mov	r19,r6
 c00b0fc:	003eba06 	br	c00abe8 <__alt_data_end+0xfc00abe8>
 c00b100:	8080022c 	andhi	r2,r16,8
 c00b104:	10000926 	beq	r2,zero,c00b12c <__muldf3+0x6c0>
 c00b108:	8880022c 	andhi	r2,r17,8
 c00b10c:	1000071e 	bne	r2,zero,c00b12c <__muldf3+0x6c0>
 c00b110:	00800434 	movhi	r2,16
 c00b114:	8c000234 	orhi	r16,r17,8
 c00b118:	10bfffc4 	addi	r2,r2,-1
 c00b11c:	e027883a 	mov	r19,fp
 c00b120:	80a0703a 	and	r16,r16,r2
 c00b124:	902d883a 	mov	r22,r18
 c00b128:	003f1706 	br	c00ad88 <__alt_data_end+0xfc00ad88>
 c00b12c:	00800434 	movhi	r2,16
 c00b130:	84000234 	orhi	r16,r16,8
 c00b134:	10bfffc4 	addi	r2,r2,-1
 c00b138:	80a0703a 	and	r16,r16,r2
 c00b13c:	003f1206 	br	c00ad88 <__alt_data_end+0xfc00ad88>
 c00b140:	147ff604 	addi	r17,r2,-40
 c00b144:	3462983a 	sll	r17,r6,r17
 c00b148:	0025883a 	mov	r18,zero
 c00b14c:	003ef306 	br	c00ad1c <__alt_data_end+0xfc00ad1c>
 c00b150:	3009883a 	mov	r4,r6
 c00b154:	d9400215 	stw	r5,8(sp)
 c00b158:	d9800715 	stw	r6,28(sp)
 c00b15c:	da400415 	stw	r9,16(sp)
 c00b160:	da800315 	stw	r10,12(sp)
 c00b164:	c00bdd80 	call	c00bdd8 <__clzsi2>
 c00b168:	10800804 	addi	r2,r2,32
 c00b16c:	da800317 	ldw	r10,12(sp)
 c00b170:	da400417 	ldw	r9,16(sp)
 c00b174:	d9800717 	ldw	r6,28(sp)
 c00b178:	d9400217 	ldw	r5,8(sp)
 c00b17c:	003edd06 	br	c00acf4 <__alt_data_end+0xfc00acf4>
 c00b180:	143ff604 	addi	r16,r2,-40
 c00b184:	ac20983a 	sll	r16,r21,r16
 c00b188:	002d883a 	mov	r22,zero
 c00b18c:	003ec106 	br	c00ac94 <__alt_data_end+0xfc00ac94>
 c00b190:	d9800715 	stw	r6,28(sp)
 c00b194:	d9c00215 	stw	r7,8(sp)
 c00b198:	da400415 	stw	r9,16(sp)
 c00b19c:	c00bdd80 	call	c00bdd8 <__clzsi2>
 c00b1a0:	10800804 	addi	r2,r2,32
 c00b1a4:	da400417 	ldw	r9,16(sp)
 c00b1a8:	d9c00217 	ldw	r7,8(sp)
 c00b1ac:	d9800717 	ldw	r6,28(sp)
 c00b1b0:	003eae06 	br	c00ac6c <__alt_data_end+0xfc00ac6c>
 c00b1b4:	00c00044 	movi	r3,1
 c00b1b8:	1887c83a 	sub	r3,r3,r2
 c00b1bc:	01000e04 	movi	r4,56
 c00b1c0:	20fe8516 	blt	r4,r3,c00abd8 <__alt_data_end+0xfc00abd8>
 c00b1c4:	010007c4 	movi	r4,31
 c00b1c8:	20c01b16 	blt	r4,r3,c00b238 <__muldf3+0x7cc>
 c00b1cc:	00800804 	movi	r2,32
 c00b1d0:	10c5c83a 	sub	r2,r2,r3
 c00b1d4:	888a983a 	sll	r5,r17,r2
 c00b1d8:	90c8d83a 	srl	r4,r18,r3
 c00b1dc:	9084983a 	sll	r2,r18,r2
 c00b1e0:	88e2d83a 	srl	r17,r17,r3
 c00b1e4:	2906b03a 	or	r3,r5,r4
 c00b1e8:	1004c03a 	cmpne	r2,r2,zero
 c00b1ec:	1886b03a 	or	r3,r3,r2
 c00b1f0:	188001cc 	andi	r2,r3,7
 c00b1f4:	10000726 	beq	r2,zero,c00b214 <__muldf3+0x7a8>
 c00b1f8:	188003cc 	andi	r2,r3,15
 c00b1fc:	01000104 	movi	r4,4
 c00b200:	11000426 	beq	r2,r4,c00b214 <__muldf3+0x7a8>
 c00b204:	1805883a 	mov	r2,r3
 c00b208:	10c00104 	addi	r3,r2,4
 c00b20c:	1885803a 	cmpltu	r2,r3,r2
 c00b210:	88a3883a 	add	r17,r17,r2
 c00b214:	8880202c 	andhi	r2,r17,128
 c00b218:	10001c26 	beq	r2,zero,c00b28c <__muldf3+0x820>
 c00b21c:	3027883a 	mov	r19,r6
 c00b220:	00800044 	movi	r2,1
 c00b224:	0021883a 	mov	r16,zero
 c00b228:	002d883a 	mov	r22,zero
 c00b22c:	003e6e06 	br	c00abe8 <__alt_data_end+0xfc00abe8>
 c00b230:	4007883a 	mov	r3,r8
 c00b234:	003f9706 	br	c00b094 <__alt_data_end+0xfc00b094>
 c00b238:	017ff844 	movi	r5,-31
 c00b23c:	2885c83a 	sub	r2,r5,r2
 c00b240:	888ad83a 	srl	r5,r17,r2
 c00b244:	00800804 	movi	r2,32
 c00b248:	18801a26 	beq	r3,r2,c00b2b4 <__muldf3+0x848>
 c00b24c:	01001004 	movi	r4,64
 c00b250:	20c7c83a 	sub	r3,r4,r3
 c00b254:	88e2983a 	sll	r17,r17,r3
 c00b258:	8ca4b03a 	or	r18,r17,r18
 c00b25c:	9004c03a 	cmpne	r2,r18,zero
 c00b260:	2884b03a 	or	r2,r5,r2
 c00b264:	144001cc 	andi	r17,r2,7
 c00b268:	88000d1e 	bne	r17,zero,c00b2a0 <__muldf3+0x834>
 c00b26c:	0021883a 	mov	r16,zero
 c00b270:	102cd0fa 	srli	r22,r2,3
 c00b274:	3027883a 	mov	r19,r6
 c00b278:	0005883a 	mov	r2,zero
 c00b27c:	b46cb03a 	or	r22,r22,r17
 c00b280:	003e5906 	br	c00abe8 <__alt_data_end+0xfc00abe8>
 c00b284:	1007883a 	mov	r3,r2
 c00b288:	0023883a 	mov	r17,zero
 c00b28c:	8820927a 	slli	r16,r17,9
 c00b290:	1805883a 	mov	r2,r3
 c00b294:	8822977a 	slli	r17,r17,29
 c00b298:	8020d33a 	srli	r16,r16,12
 c00b29c:	003ff406 	br	c00b270 <__alt_data_end+0xfc00b270>
 c00b2a0:	10c003cc 	andi	r3,r2,15
 c00b2a4:	01000104 	movi	r4,4
 c00b2a8:	193ff626 	beq	r3,r4,c00b284 <__alt_data_end+0xfc00b284>
 c00b2ac:	0023883a 	mov	r17,zero
 c00b2b0:	003fd506 	br	c00b208 <__alt_data_end+0xfc00b208>
 c00b2b4:	0023883a 	mov	r17,zero
 c00b2b8:	003fe706 	br	c00b258 <__alt_data_end+0xfc00b258>
 c00b2bc:	00800434 	movhi	r2,16
 c00b2c0:	8c000234 	orhi	r16,r17,8
 c00b2c4:	10bfffc4 	addi	r2,r2,-1
 c00b2c8:	3027883a 	mov	r19,r6
 c00b2cc:	80a0703a 	and	r16,r16,r2
 c00b2d0:	902d883a 	mov	r22,r18
 c00b2d4:	003eac06 	br	c00ad88 <__alt_data_end+0xfc00ad88>

0c00b2d8 <__subdf3>:
 c00b2d8:	02000434 	movhi	r8,16
 c00b2dc:	423fffc4 	addi	r8,r8,-1
 c00b2e0:	defffb04 	addi	sp,sp,-20
 c00b2e4:	2a14703a 	and	r10,r5,r8
 c00b2e8:	3812d53a 	srli	r9,r7,20
 c00b2ec:	3a10703a 	and	r8,r7,r8
 c00b2f0:	2006d77a 	srli	r3,r4,29
 c00b2f4:	3004d77a 	srli	r2,r6,29
 c00b2f8:	dc000015 	stw	r16,0(sp)
 c00b2fc:	501490fa 	slli	r10,r10,3
 c00b300:	2820d53a 	srli	r16,r5,20
 c00b304:	401090fa 	slli	r8,r8,3
 c00b308:	dc800215 	stw	r18,8(sp)
 c00b30c:	dc400115 	stw	r17,4(sp)
 c00b310:	dfc00415 	stw	ra,16(sp)
 c00b314:	202290fa 	slli	r17,r4,3
 c00b318:	dcc00315 	stw	r19,12(sp)
 c00b31c:	4a41ffcc 	andi	r9,r9,2047
 c00b320:	0101ffc4 	movi	r4,2047
 c00b324:	2824d7fa 	srli	r18,r5,31
 c00b328:	8401ffcc 	andi	r16,r16,2047
 c00b32c:	50c6b03a 	or	r3,r10,r3
 c00b330:	380ed7fa 	srli	r7,r7,31
 c00b334:	408ab03a 	or	r5,r8,r2
 c00b338:	300c90fa 	slli	r6,r6,3
 c00b33c:	49009626 	beq	r9,r4,c00b598 <__subdf3+0x2c0>
 c00b340:	39c0005c 	xori	r7,r7,1
 c00b344:	8245c83a 	sub	r2,r16,r9
 c00b348:	3c807426 	beq	r7,r18,c00b51c <__subdf3+0x244>
 c00b34c:	0080af0e 	bge	zero,r2,c00b60c <__subdf3+0x334>
 c00b350:	48002a1e 	bne	r9,zero,c00b3fc <__subdf3+0x124>
 c00b354:	2988b03a 	or	r4,r5,r6
 c00b358:	20009a1e 	bne	r4,zero,c00b5c4 <__subdf3+0x2ec>
 c00b35c:	888001cc 	andi	r2,r17,7
 c00b360:	10000726 	beq	r2,zero,c00b380 <__subdf3+0xa8>
 c00b364:	888003cc 	andi	r2,r17,15
 c00b368:	01000104 	movi	r4,4
 c00b36c:	11000426 	beq	r2,r4,c00b380 <__subdf3+0xa8>
 c00b370:	890b883a 	add	r5,r17,r4
 c00b374:	2c63803a 	cmpltu	r17,r5,r17
 c00b378:	1c47883a 	add	r3,r3,r17
 c00b37c:	2823883a 	mov	r17,r5
 c00b380:	1880202c 	andhi	r2,r3,128
 c00b384:	10005926 	beq	r2,zero,c00b4ec <__subdf3+0x214>
 c00b388:	84000044 	addi	r16,r16,1
 c00b38c:	0081ffc4 	movi	r2,2047
 c00b390:	8080be26 	beq	r16,r2,c00b68c <__subdf3+0x3b4>
 c00b394:	017fe034 	movhi	r5,65408
 c00b398:	297fffc4 	addi	r5,r5,-1
 c00b39c:	1946703a 	and	r3,r3,r5
 c00b3a0:	1804977a 	slli	r2,r3,29
 c00b3a4:	1806927a 	slli	r3,r3,9
 c00b3a8:	8822d0fa 	srli	r17,r17,3
 c00b3ac:	8401ffcc 	andi	r16,r16,2047
 c00b3b0:	180ad33a 	srli	r5,r3,12
 c00b3b4:	9100004c 	andi	r4,r18,1
 c00b3b8:	1444b03a 	or	r2,r2,r17
 c00b3bc:	80c1ffcc 	andi	r3,r16,2047
 c00b3c0:	1820953a 	slli	r16,r3,20
 c00b3c4:	20c03fcc 	andi	r3,r4,255
 c00b3c8:	180897fa 	slli	r4,r3,31
 c00b3cc:	00c00434 	movhi	r3,16
 c00b3d0:	18ffffc4 	addi	r3,r3,-1
 c00b3d4:	28c6703a 	and	r3,r5,r3
 c00b3d8:	1c06b03a 	or	r3,r3,r16
 c00b3dc:	1906b03a 	or	r3,r3,r4
 c00b3e0:	dfc00417 	ldw	ra,16(sp)
 c00b3e4:	dcc00317 	ldw	r19,12(sp)
 c00b3e8:	dc800217 	ldw	r18,8(sp)
 c00b3ec:	dc400117 	ldw	r17,4(sp)
 c00b3f0:	dc000017 	ldw	r16,0(sp)
 c00b3f4:	dec00504 	addi	sp,sp,20
 c00b3f8:	f800283a 	ret
 c00b3fc:	0101ffc4 	movi	r4,2047
 c00b400:	813fd626 	beq	r16,r4,c00b35c <__alt_data_end+0xfc00b35c>
 c00b404:	29402034 	orhi	r5,r5,128
 c00b408:	01000e04 	movi	r4,56
 c00b40c:	2080a316 	blt	r4,r2,c00b69c <__subdf3+0x3c4>
 c00b410:	010007c4 	movi	r4,31
 c00b414:	2080c616 	blt	r4,r2,c00b730 <__subdf3+0x458>
 c00b418:	01000804 	movi	r4,32
 c00b41c:	2089c83a 	sub	r4,r4,r2
 c00b420:	2910983a 	sll	r8,r5,r4
 c00b424:	308ed83a 	srl	r7,r6,r2
 c00b428:	3108983a 	sll	r4,r6,r4
 c00b42c:	2884d83a 	srl	r2,r5,r2
 c00b430:	41ccb03a 	or	r6,r8,r7
 c00b434:	2008c03a 	cmpne	r4,r4,zero
 c00b438:	310cb03a 	or	r6,r6,r4
 c00b43c:	898dc83a 	sub	r6,r17,r6
 c00b440:	89a3803a 	cmpltu	r17,r17,r6
 c00b444:	1887c83a 	sub	r3,r3,r2
 c00b448:	1c47c83a 	sub	r3,r3,r17
 c00b44c:	3023883a 	mov	r17,r6
 c00b450:	1880202c 	andhi	r2,r3,128
 c00b454:	10002326 	beq	r2,zero,c00b4e4 <__subdf3+0x20c>
 c00b458:	04c02034 	movhi	r19,128
 c00b45c:	9cffffc4 	addi	r19,r19,-1
 c00b460:	1ce6703a 	and	r19,r3,r19
 c00b464:	98007a26 	beq	r19,zero,c00b650 <__subdf3+0x378>
 c00b468:	9809883a 	mov	r4,r19
 c00b46c:	c00bdd80 	call	c00bdd8 <__clzsi2>
 c00b470:	113ffe04 	addi	r4,r2,-8
 c00b474:	00c007c4 	movi	r3,31
 c00b478:	19007b16 	blt	r3,r4,c00b668 <__subdf3+0x390>
 c00b47c:	00800804 	movi	r2,32
 c00b480:	1105c83a 	sub	r2,r2,r4
 c00b484:	8884d83a 	srl	r2,r17,r2
 c00b488:	9906983a 	sll	r3,r19,r4
 c00b48c:	8922983a 	sll	r17,r17,r4
 c00b490:	10c4b03a 	or	r2,r2,r3
 c00b494:	24007816 	blt	r4,r16,c00b678 <__subdf3+0x3a0>
 c00b498:	2421c83a 	sub	r16,r4,r16
 c00b49c:	80c00044 	addi	r3,r16,1
 c00b4a0:	010007c4 	movi	r4,31
 c00b4a4:	20c09516 	blt	r4,r3,c00b6fc <__subdf3+0x424>
 c00b4a8:	01400804 	movi	r5,32
 c00b4ac:	28cbc83a 	sub	r5,r5,r3
 c00b4b0:	88c8d83a 	srl	r4,r17,r3
 c00b4b4:	8962983a 	sll	r17,r17,r5
 c00b4b8:	114a983a 	sll	r5,r2,r5
 c00b4bc:	10c6d83a 	srl	r3,r2,r3
 c00b4c0:	8804c03a 	cmpne	r2,r17,zero
 c00b4c4:	290ab03a 	or	r5,r5,r4
 c00b4c8:	28a2b03a 	or	r17,r5,r2
 c00b4cc:	0021883a 	mov	r16,zero
 c00b4d0:	003fa206 	br	c00b35c <__alt_data_end+0xfc00b35c>
 c00b4d4:	2090b03a 	or	r8,r4,r2
 c00b4d8:	40018e26 	beq	r8,zero,c00bb14 <__subdf3+0x83c>
 c00b4dc:	1007883a 	mov	r3,r2
 c00b4e0:	2023883a 	mov	r17,r4
 c00b4e4:	888001cc 	andi	r2,r17,7
 c00b4e8:	103f9e1e 	bne	r2,zero,c00b364 <__alt_data_end+0xfc00b364>
 c00b4ec:	1804977a 	slli	r2,r3,29
 c00b4f0:	8822d0fa 	srli	r17,r17,3
 c00b4f4:	1810d0fa 	srli	r8,r3,3
 c00b4f8:	9100004c 	andi	r4,r18,1
 c00b4fc:	1444b03a 	or	r2,r2,r17
 c00b500:	00c1ffc4 	movi	r3,2047
 c00b504:	80c02826 	beq	r16,r3,c00b5a8 <__subdf3+0x2d0>
 c00b508:	01400434 	movhi	r5,16
 c00b50c:	297fffc4 	addi	r5,r5,-1
 c00b510:	80e0703a 	and	r16,r16,r3
 c00b514:	414a703a 	and	r5,r8,r5
 c00b518:	003fa806 	br	c00b3bc <__alt_data_end+0xfc00b3bc>
 c00b51c:	0080630e 	bge	zero,r2,c00b6ac <__subdf3+0x3d4>
 c00b520:	48003026 	beq	r9,zero,c00b5e4 <__subdf3+0x30c>
 c00b524:	0101ffc4 	movi	r4,2047
 c00b528:	813f8c26 	beq	r16,r4,c00b35c <__alt_data_end+0xfc00b35c>
 c00b52c:	29402034 	orhi	r5,r5,128
 c00b530:	01000e04 	movi	r4,56
 c00b534:	2080a90e 	bge	r4,r2,c00b7dc <__subdf3+0x504>
 c00b538:	298cb03a 	or	r6,r5,r6
 c00b53c:	3012c03a 	cmpne	r9,r6,zero
 c00b540:	0005883a 	mov	r2,zero
 c00b544:	4c53883a 	add	r9,r9,r17
 c00b548:	4c63803a 	cmpltu	r17,r9,r17
 c00b54c:	10c7883a 	add	r3,r2,r3
 c00b550:	88c7883a 	add	r3,r17,r3
 c00b554:	4823883a 	mov	r17,r9
 c00b558:	1880202c 	andhi	r2,r3,128
 c00b55c:	1000d026 	beq	r2,zero,c00b8a0 <__subdf3+0x5c8>
 c00b560:	84000044 	addi	r16,r16,1
 c00b564:	0081ffc4 	movi	r2,2047
 c00b568:	8080fe26 	beq	r16,r2,c00b964 <__subdf3+0x68c>
 c00b56c:	00bfe034 	movhi	r2,65408
 c00b570:	10bfffc4 	addi	r2,r2,-1
 c00b574:	1886703a 	and	r3,r3,r2
 c00b578:	880ad07a 	srli	r5,r17,1
 c00b57c:	180497fa 	slli	r2,r3,31
 c00b580:	8900004c 	andi	r4,r17,1
 c00b584:	2922b03a 	or	r17,r5,r4
 c00b588:	1806d07a 	srli	r3,r3,1
 c00b58c:	1462b03a 	or	r17,r2,r17
 c00b590:	3825883a 	mov	r18,r7
 c00b594:	003f7106 	br	c00b35c <__alt_data_end+0xfc00b35c>
 c00b598:	2984b03a 	or	r2,r5,r6
 c00b59c:	103f6826 	beq	r2,zero,c00b340 <__alt_data_end+0xfc00b340>
 c00b5a0:	39c03fcc 	andi	r7,r7,255
 c00b5a4:	003f6706 	br	c00b344 <__alt_data_end+0xfc00b344>
 c00b5a8:	4086b03a 	or	r3,r8,r2
 c00b5ac:	18015226 	beq	r3,zero,c00baf8 <__subdf3+0x820>
 c00b5b0:	00c00434 	movhi	r3,16
 c00b5b4:	41400234 	orhi	r5,r8,8
 c00b5b8:	18ffffc4 	addi	r3,r3,-1
 c00b5bc:	28ca703a 	and	r5,r5,r3
 c00b5c0:	003f7e06 	br	c00b3bc <__alt_data_end+0xfc00b3bc>
 c00b5c4:	10bfffc4 	addi	r2,r2,-1
 c00b5c8:	1000491e 	bne	r2,zero,c00b6f0 <__subdf3+0x418>
 c00b5cc:	898fc83a 	sub	r7,r17,r6
 c00b5d0:	89e3803a 	cmpltu	r17,r17,r7
 c00b5d4:	1947c83a 	sub	r3,r3,r5
 c00b5d8:	1c47c83a 	sub	r3,r3,r17
 c00b5dc:	3823883a 	mov	r17,r7
 c00b5e0:	003f9b06 	br	c00b450 <__alt_data_end+0xfc00b450>
 c00b5e4:	2988b03a 	or	r4,r5,r6
 c00b5e8:	203f5c26 	beq	r4,zero,c00b35c <__alt_data_end+0xfc00b35c>
 c00b5ec:	10bfffc4 	addi	r2,r2,-1
 c00b5f0:	1000931e 	bne	r2,zero,c00b840 <__subdf3+0x568>
 c00b5f4:	898d883a 	add	r6,r17,r6
 c00b5f8:	3463803a 	cmpltu	r17,r6,r17
 c00b5fc:	1947883a 	add	r3,r3,r5
 c00b600:	88c7883a 	add	r3,r17,r3
 c00b604:	3023883a 	mov	r17,r6
 c00b608:	003fd306 	br	c00b558 <__alt_data_end+0xfc00b558>
 c00b60c:	1000541e 	bne	r2,zero,c00b760 <__subdf3+0x488>
 c00b610:	80800044 	addi	r2,r16,1
 c00b614:	1081ffcc 	andi	r2,r2,2047
 c00b618:	01000044 	movi	r4,1
 c00b61c:	2080a20e 	bge	r4,r2,c00b8a8 <__subdf3+0x5d0>
 c00b620:	8989c83a 	sub	r4,r17,r6
 c00b624:	8905803a 	cmpltu	r2,r17,r4
 c00b628:	1967c83a 	sub	r19,r3,r5
 c00b62c:	98a7c83a 	sub	r19,r19,r2
 c00b630:	9880202c 	andhi	r2,r19,128
 c00b634:	10006326 	beq	r2,zero,c00b7c4 <__subdf3+0x4ec>
 c00b638:	3463c83a 	sub	r17,r6,r17
 c00b63c:	28c7c83a 	sub	r3,r5,r3
 c00b640:	344d803a 	cmpltu	r6,r6,r17
 c00b644:	19a7c83a 	sub	r19,r3,r6
 c00b648:	3825883a 	mov	r18,r7
 c00b64c:	983f861e 	bne	r19,zero,c00b468 <__alt_data_end+0xfc00b468>
 c00b650:	8809883a 	mov	r4,r17
 c00b654:	c00bdd80 	call	c00bdd8 <__clzsi2>
 c00b658:	10800804 	addi	r2,r2,32
 c00b65c:	113ffe04 	addi	r4,r2,-8
 c00b660:	00c007c4 	movi	r3,31
 c00b664:	193f850e 	bge	r3,r4,c00b47c <__alt_data_end+0xfc00b47c>
 c00b668:	10bff604 	addi	r2,r2,-40
 c00b66c:	8884983a 	sll	r2,r17,r2
 c00b670:	0023883a 	mov	r17,zero
 c00b674:	243f880e 	bge	r4,r16,c00b498 <__alt_data_end+0xfc00b498>
 c00b678:	00ffe034 	movhi	r3,65408
 c00b67c:	18ffffc4 	addi	r3,r3,-1
 c00b680:	8121c83a 	sub	r16,r16,r4
 c00b684:	10c6703a 	and	r3,r2,r3
 c00b688:	003f3406 	br	c00b35c <__alt_data_end+0xfc00b35c>
 c00b68c:	9100004c 	andi	r4,r18,1
 c00b690:	000b883a 	mov	r5,zero
 c00b694:	0005883a 	mov	r2,zero
 c00b698:	003f4806 	br	c00b3bc <__alt_data_end+0xfc00b3bc>
 c00b69c:	298cb03a 	or	r6,r5,r6
 c00b6a0:	300cc03a 	cmpne	r6,r6,zero
 c00b6a4:	0005883a 	mov	r2,zero
 c00b6a8:	003f6406 	br	c00b43c <__alt_data_end+0xfc00b43c>
 c00b6ac:	10009a1e 	bne	r2,zero,c00b918 <__subdf3+0x640>
 c00b6b0:	82400044 	addi	r9,r16,1
 c00b6b4:	4881ffcc 	andi	r2,r9,2047
 c00b6b8:	02800044 	movi	r10,1
 c00b6bc:	5080670e 	bge	r10,r2,c00b85c <__subdf3+0x584>
 c00b6c0:	0081ffc4 	movi	r2,2047
 c00b6c4:	4880af26 	beq	r9,r2,c00b984 <__subdf3+0x6ac>
 c00b6c8:	898d883a 	add	r6,r17,r6
 c00b6cc:	1945883a 	add	r2,r3,r5
 c00b6d0:	3447803a 	cmpltu	r3,r6,r17
 c00b6d4:	1887883a 	add	r3,r3,r2
 c00b6d8:	182297fa 	slli	r17,r3,31
 c00b6dc:	300cd07a 	srli	r6,r6,1
 c00b6e0:	1806d07a 	srli	r3,r3,1
 c00b6e4:	4821883a 	mov	r16,r9
 c00b6e8:	89a2b03a 	or	r17,r17,r6
 c00b6ec:	003f1b06 	br	c00b35c <__alt_data_end+0xfc00b35c>
 c00b6f0:	0101ffc4 	movi	r4,2047
 c00b6f4:	813f441e 	bne	r16,r4,c00b408 <__alt_data_end+0xfc00b408>
 c00b6f8:	003f1806 	br	c00b35c <__alt_data_end+0xfc00b35c>
 c00b6fc:	843ff844 	addi	r16,r16,-31
 c00b700:	01400804 	movi	r5,32
 c00b704:	1408d83a 	srl	r4,r2,r16
 c00b708:	19405026 	beq	r3,r5,c00b84c <__subdf3+0x574>
 c00b70c:	01401004 	movi	r5,64
 c00b710:	28c7c83a 	sub	r3,r5,r3
 c00b714:	10c4983a 	sll	r2,r2,r3
 c00b718:	88a2b03a 	or	r17,r17,r2
 c00b71c:	8822c03a 	cmpne	r17,r17,zero
 c00b720:	2462b03a 	or	r17,r4,r17
 c00b724:	0007883a 	mov	r3,zero
 c00b728:	0021883a 	mov	r16,zero
 c00b72c:	003f6d06 	br	c00b4e4 <__alt_data_end+0xfc00b4e4>
 c00b730:	11fff804 	addi	r7,r2,-32
 c00b734:	01000804 	movi	r4,32
 c00b738:	29ced83a 	srl	r7,r5,r7
 c00b73c:	11004526 	beq	r2,r4,c00b854 <__subdf3+0x57c>
 c00b740:	01001004 	movi	r4,64
 c00b744:	2089c83a 	sub	r4,r4,r2
 c00b748:	2904983a 	sll	r2,r5,r4
 c00b74c:	118cb03a 	or	r6,r2,r6
 c00b750:	300cc03a 	cmpne	r6,r6,zero
 c00b754:	398cb03a 	or	r6,r7,r6
 c00b758:	0005883a 	mov	r2,zero
 c00b75c:	003f3706 	br	c00b43c <__alt_data_end+0xfc00b43c>
 c00b760:	80002a26 	beq	r16,zero,c00b80c <__subdf3+0x534>
 c00b764:	0101ffc4 	movi	r4,2047
 c00b768:	49006626 	beq	r9,r4,c00b904 <__subdf3+0x62c>
 c00b76c:	0085c83a 	sub	r2,zero,r2
 c00b770:	18c02034 	orhi	r3,r3,128
 c00b774:	01000e04 	movi	r4,56
 c00b778:	20807e16 	blt	r4,r2,c00b974 <__subdf3+0x69c>
 c00b77c:	010007c4 	movi	r4,31
 c00b780:	2080e716 	blt	r4,r2,c00bb20 <__subdf3+0x848>
 c00b784:	01000804 	movi	r4,32
 c00b788:	2089c83a 	sub	r4,r4,r2
 c00b78c:	1914983a 	sll	r10,r3,r4
 c00b790:	8890d83a 	srl	r8,r17,r2
 c00b794:	8908983a 	sll	r4,r17,r4
 c00b798:	1884d83a 	srl	r2,r3,r2
 c00b79c:	5222b03a 	or	r17,r10,r8
 c00b7a0:	2006c03a 	cmpne	r3,r4,zero
 c00b7a4:	88e2b03a 	or	r17,r17,r3
 c00b7a8:	3463c83a 	sub	r17,r6,r17
 c00b7ac:	2885c83a 	sub	r2,r5,r2
 c00b7b0:	344d803a 	cmpltu	r6,r6,r17
 c00b7b4:	1187c83a 	sub	r3,r2,r6
 c00b7b8:	4821883a 	mov	r16,r9
 c00b7bc:	3825883a 	mov	r18,r7
 c00b7c0:	003f2306 	br	c00b450 <__alt_data_end+0xfc00b450>
 c00b7c4:	24d0b03a 	or	r8,r4,r19
 c00b7c8:	40001b1e 	bne	r8,zero,c00b838 <__subdf3+0x560>
 c00b7cc:	0005883a 	mov	r2,zero
 c00b7d0:	0009883a 	mov	r4,zero
 c00b7d4:	0021883a 	mov	r16,zero
 c00b7d8:	003f4906 	br	c00b500 <__alt_data_end+0xfc00b500>
 c00b7dc:	010007c4 	movi	r4,31
 c00b7e0:	20803a16 	blt	r4,r2,c00b8cc <__subdf3+0x5f4>
 c00b7e4:	01000804 	movi	r4,32
 c00b7e8:	2089c83a 	sub	r4,r4,r2
 c00b7ec:	2912983a 	sll	r9,r5,r4
 c00b7f0:	3090d83a 	srl	r8,r6,r2
 c00b7f4:	3108983a 	sll	r4,r6,r4
 c00b7f8:	2884d83a 	srl	r2,r5,r2
 c00b7fc:	4a12b03a 	or	r9,r9,r8
 c00b800:	2008c03a 	cmpne	r4,r4,zero
 c00b804:	4912b03a 	or	r9,r9,r4
 c00b808:	003f4e06 	br	c00b544 <__alt_data_end+0xfc00b544>
 c00b80c:	1c48b03a 	or	r4,r3,r17
 c00b810:	20003c26 	beq	r4,zero,c00b904 <__subdf3+0x62c>
 c00b814:	0084303a 	nor	r2,zero,r2
 c00b818:	1000381e 	bne	r2,zero,c00b8fc <__subdf3+0x624>
 c00b81c:	3463c83a 	sub	r17,r6,r17
 c00b820:	28c5c83a 	sub	r2,r5,r3
 c00b824:	344d803a 	cmpltu	r6,r6,r17
 c00b828:	1187c83a 	sub	r3,r2,r6
 c00b82c:	4821883a 	mov	r16,r9
 c00b830:	3825883a 	mov	r18,r7
 c00b834:	003f0606 	br	c00b450 <__alt_data_end+0xfc00b450>
 c00b838:	2023883a 	mov	r17,r4
 c00b83c:	003f0906 	br	c00b464 <__alt_data_end+0xfc00b464>
 c00b840:	0101ffc4 	movi	r4,2047
 c00b844:	813f3a1e 	bne	r16,r4,c00b530 <__alt_data_end+0xfc00b530>
 c00b848:	003ec406 	br	c00b35c <__alt_data_end+0xfc00b35c>
 c00b84c:	0005883a 	mov	r2,zero
 c00b850:	003fb106 	br	c00b718 <__alt_data_end+0xfc00b718>
 c00b854:	0005883a 	mov	r2,zero
 c00b858:	003fbc06 	br	c00b74c <__alt_data_end+0xfc00b74c>
 c00b85c:	1c44b03a 	or	r2,r3,r17
 c00b860:	80008e1e 	bne	r16,zero,c00ba9c <__subdf3+0x7c4>
 c00b864:	1000c826 	beq	r2,zero,c00bb88 <__subdf3+0x8b0>
 c00b868:	2984b03a 	or	r2,r5,r6
 c00b86c:	103ebb26 	beq	r2,zero,c00b35c <__alt_data_end+0xfc00b35c>
 c00b870:	8989883a 	add	r4,r17,r6
 c00b874:	1945883a 	add	r2,r3,r5
 c00b878:	2447803a 	cmpltu	r3,r4,r17
 c00b87c:	1887883a 	add	r3,r3,r2
 c00b880:	1880202c 	andhi	r2,r3,128
 c00b884:	2023883a 	mov	r17,r4
 c00b888:	103f1626 	beq	r2,zero,c00b4e4 <__alt_data_end+0xfc00b4e4>
 c00b88c:	00bfe034 	movhi	r2,65408
 c00b890:	10bfffc4 	addi	r2,r2,-1
 c00b894:	5021883a 	mov	r16,r10
 c00b898:	1886703a 	and	r3,r3,r2
 c00b89c:	003eaf06 	br	c00b35c <__alt_data_end+0xfc00b35c>
 c00b8a0:	3825883a 	mov	r18,r7
 c00b8a4:	003f0f06 	br	c00b4e4 <__alt_data_end+0xfc00b4e4>
 c00b8a8:	1c44b03a 	or	r2,r3,r17
 c00b8ac:	8000251e 	bne	r16,zero,c00b944 <__subdf3+0x66c>
 c00b8b0:	1000661e 	bne	r2,zero,c00ba4c <__subdf3+0x774>
 c00b8b4:	2990b03a 	or	r8,r5,r6
 c00b8b8:	40009626 	beq	r8,zero,c00bb14 <__subdf3+0x83c>
 c00b8bc:	2807883a 	mov	r3,r5
 c00b8c0:	3023883a 	mov	r17,r6
 c00b8c4:	3825883a 	mov	r18,r7
 c00b8c8:	003ea406 	br	c00b35c <__alt_data_end+0xfc00b35c>
 c00b8cc:	127ff804 	addi	r9,r2,-32
 c00b8d0:	01000804 	movi	r4,32
 c00b8d4:	2a52d83a 	srl	r9,r5,r9
 c00b8d8:	11008c26 	beq	r2,r4,c00bb0c <__subdf3+0x834>
 c00b8dc:	01001004 	movi	r4,64
 c00b8e0:	2085c83a 	sub	r2,r4,r2
 c00b8e4:	2884983a 	sll	r2,r5,r2
 c00b8e8:	118cb03a 	or	r6,r2,r6
 c00b8ec:	300cc03a 	cmpne	r6,r6,zero
 c00b8f0:	4992b03a 	or	r9,r9,r6
 c00b8f4:	0005883a 	mov	r2,zero
 c00b8f8:	003f1206 	br	c00b544 <__alt_data_end+0xfc00b544>
 c00b8fc:	0101ffc4 	movi	r4,2047
 c00b900:	493f9c1e 	bne	r9,r4,c00b774 <__alt_data_end+0xfc00b774>
 c00b904:	2807883a 	mov	r3,r5
 c00b908:	3023883a 	mov	r17,r6
 c00b90c:	4821883a 	mov	r16,r9
 c00b910:	3825883a 	mov	r18,r7
 c00b914:	003e9106 	br	c00b35c <__alt_data_end+0xfc00b35c>
 c00b918:	80001f1e 	bne	r16,zero,c00b998 <__subdf3+0x6c0>
 c00b91c:	1c48b03a 	or	r4,r3,r17
 c00b920:	20005a26 	beq	r4,zero,c00ba8c <__subdf3+0x7b4>
 c00b924:	0084303a 	nor	r2,zero,r2
 c00b928:	1000561e 	bne	r2,zero,c00ba84 <__subdf3+0x7ac>
 c00b92c:	89a3883a 	add	r17,r17,r6
 c00b930:	1945883a 	add	r2,r3,r5
 c00b934:	898d803a 	cmpltu	r6,r17,r6
 c00b938:	3087883a 	add	r3,r6,r2
 c00b93c:	4821883a 	mov	r16,r9
 c00b940:	003f0506 	br	c00b558 <__alt_data_end+0xfc00b558>
 c00b944:	10002b1e 	bne	r2,zero,c00b9f4 <__subdf3+0x71c>
 c00b948:	2984b03a 	or	r2,r5,r6
 c00b94c:	10008026 	beq	r2,zero,c00bb50 <__subdf3+0x878>
 c00b950:	2807883a 	mov	r3,r5
 c00b954:	3023883a 	mov	r17,r6
 c00b958:	3825883a 	mov	r18,r7
 c00b95c:	0401ffc4 	movi	r16,2047
 c00b960:	003e7e06 	br	c00b35c <__alt_data_end+0xfc00b35c>
 c00b964:	3809883a 	mov	r4,r7
 c00b968:	0011883a 	mov	r8,zero
 c00b96c:	0005883a 	mov	r2,zero
 c00b970:	003ee306 	br	c00b500 <__alt_data_end+0xfc00b500>
 c00b974:	1c62b03a 	or	r17,r3,r17
 c00b978:	8822c03a 	cmpne	r17,r17,zero
 c00b97c:	0005883a 	mov	r2,zero
 c00b980:	003f8906 	br	c00b7a8 <__alt_data_end+0xfc00b7a8>
 c00b984:	3809883a 	mov	r4,r7
 c00b988:	4821883a 	mov	r16,r9
 c00b98c:	0011883a 	mov	r8,zero
 c00b990:	0005883a 	mov	r2,zero
 c00b994:	003eda06 	br	c00b500 <__alt_data_end+0xfc00b500>
 c00b998:	0101ffc4 	movi	r4,2047
 c00b99c:	49003b26 	beq	r9,r4,c00ba8c <__subdf3+0x7b4>
 c00b9a0:	0085c83a 	sub	r2,zero,r2
 c00b9a4:	18c02034 	orhi	r3,r3,128
 c00b9a8:	01000e04 	movi	r4,56
 c00b9ac:	20806e16 	blt	r4,r2,c00bb68 <__subdf3+0x890>
 c00b9b0:	010007c4 	movi	r4,31
 c00b9b4:	20807716 	blt	r4,r2,c00bb94 <__subdf3+0x8bc>
 c00b9b8:	01000804 	movi	r4,32
 c00b9bc:	2089c83a 	sub	r4,r4,r2
 c00b9c0:	1914983a 	sll	r10,r3,r4
 c00b9c4:	8890d83a 	srl	r8,r17,r2
 c00b9c8:	8908983a 	sll	r4,r17,r4
 c00b9cc:	1884d83a 	srl	r2,r3,r2
 c00b9d0:	5222b03a 	or	r17,r10,r8
 c00b9d4:	2006c03a 	cmpne	r3,r4,zero
 c00b9d8:	88e2b03a 	or	r17,r17,r3
 c00b9dc:	89a3883a 	add	r17,r17,r6
 c00b9e0:	1145883a 	add	r2,r2,r5
 c00b9e4:	898d803a 	cmpltu	r6,r17,r6
 c00b9e8:	3087883a 	add	r3,r6,r2
 c00b9ec:	4821883a 	mov	r16,r9
 c00b9f0:	003ed906 	br	c00b558 <__alt_data_end+0xfc00b558>
 c00b9f4:	2984b03a 	or	r2,r5,r6
 c00b9f8:	10004226 	beq	r2,zero,c00bb04 <__subdf3+0x82c>
 c00b9fc:	1808d0fa 	srli	r4,r3,3
 c00ba00:	8822d0fa 	srli	r17,r17,3
 c00ba04:	1806977a 	slli	r3,r3,29
 c00ba08:	2080022c 	andhi	r2,r4,8
 c00ba0c:	1c62b03a 	or	r17,r3,r17
 c00ba10:	10000826 	beq	r2,zero,c00ba34 <__subdf3+0x75c>
 c00ba14:	2812d0fa 	srli	r9,r5,3
 c00ba18:	4880022c 	andhi	r2,r9,8
 c00ba1c:	1000051e 	bne	r2,zero,c00ba34 <__subdf3+0x75c>
 c00ba20:	300cd0fa 	srli	r6,r6,3
 c00ba24:	2804977a 	slli	r2,r5,29
 c00ba28:	4809883a 	mov	r4,r9
 c00ba2c:	3825883a 	mov	r18,r7
 c00ba30:	11a2b03a 	or	r17,r2,r6
 c00ba34:	8806d77a 	srli	r3,r17,29
 c00ba38:	200890fa 	slli	r4,r4,3
 c00ba3c:	882290fa 	slli	r17,r17,3
 c00ba40:	0401ffc4 	movi	r16,2047
 c00ba44:	1906b03a 	or	r3,r3,r4
 c00ba48:	003e4406 	br	c00b35c <__alt_data_end+0xfc00b35c>
 c00ba4c:	2984b03a 	or	r2,r5,r6
 c00ba50:	103e4226 	beq	r2,zero,c00b35c <__alt_data_end+0xfc00b35c>
 c00ba54:	8989c83a 	sub	r4,r17,r6
 c00ba58:	8911803a 	cmpltu	r8,r17,r4
 c00ba5c:	1945c83a 	sub	r2,r3,r5
 c00ba60:	1205c83a 	sub	r2,r2,r8
 c00ba64:	1200202c 	andhi	r8,r2,128
 c00ba68:	403e9a26 	beq	r8,zero,c00b4d4 <__alt_data_end+0xfc00b4d4>
 c00ba6c:	3463c83a 	sub	r17,r6,r17
 c00ba70:	28c5c83a 	sub	r2,r5,r3
 c00ba74:	344d803a 	cmpltu	r6,r6,r17
 c00ba78:	1187c83a 	sub	r3,r2,r6
 c00ba7c:	3825883a 	mov	r18,r7
 c00ba80:	003e3606 	br	c00b35c <__alt_data_end+0xfc00b35c>
 c00ba84:	0101ffc4 	movi	r4,2047
 c00ba88:	493fc71e 	bne	r9,r4,c00b9a8 <__alt_data_end+0xfc00b9a8>
 c00ba8c:	2807883a 	mov	r3,r5
 c00ba90:	3023883a 	mov	r17,r6
 c00ba94:	4821883a 	mov	r16,r9
 c00ba98:	003e3006 	br	c00b35c <__alt_data_end+0xfc00b35c>
 c00ba9c:	10003626 	beq	r2,zero,c00bb78 <__subdf3+0x8a0>
 c00baa0:	2984b03a 	or	r2,r5,r6
 c00baa4:	10001726 	beq	r2,zero,c00bb04 <__subdf3+0x82c>
 c00baa8:	1808d0fa 	srli	r4,r3,3
 c00baac:	8822d0fa 	srli	r17,r17,3
 c00bab0:	1806977a 	slli	r3,r3,29
 c00bab4:	2080022c 	andhi	r2,r4,8
 c00bab8:	1c62b03a 	or	r17,r3,r17
 c00babc:	10000726 	beq	r2,zero,c00badc <__subdf3+0x804>
 c00bac0:	2812d0fa 	srli	r9,r5,3
 c00bac4:	4880022c 	andhi	r2,r9,8
 c00bac8:	1000041e 	bne	r2,zero,c00badc <__subdf3+0x804>
 c00bacc:	300cd0fa 	srli	r6,r6,3
 c00bad0:	2804977a 	slli	r2,r5,29
 c00bad4:	4809883a 	mov	r4,r9
 c00bad8:	11a2b03a 	or	r17,r2,r6
 c00badc:	8806d77a 	srli	r3,r17,29
 c00bae0:	200890fa 	slli	r4,r4,3
 c00bae4:	882290fa 	slli	r17,r17,3
 c00bae8:	3825883a 	mov	r18,r7
 c00baec:	1906b03a 	or	r3,r3,r4
 c00baf0:	0401ffc4 	movi	r16,2047
 c00baf4:	003e1906 	br	c00b35c <__alt_data_end+0xfc00b35c>
 c00baf8:	000b883a 	mov	r5,zero
 c00bafc:	0005883a 	mov	r2,zero
 c00bb00:	003e2e06 	br	c00b3bc <__alt_data_end+0xfc00b3bc>
 c00bb04:	0401ffc4 	movi	r16,2047
 c00bb08:	003e1406 	br	c00b35c <__alt_data_end+0xfc00b35c>
 c00bb0c:	0005883a 	mov	r2,zero
 c00bb10:	003f7506 	br	c00b8e8 <__alt_data_end+0xfc00b8e8>
 c00bb14:	0005883a 	mov	r2,zero
 c00bb18:	0009883a 	mov	r4,zero
 c00bb1c:	003e7806 	br	c00b500 <__alt_data_end+0xfc00b500>
 c00bb20:	123ff804 	addi	r8,r2,-32
 c00bb24:	01000804 	movi	r4,32
 c00bb28:	1a10d83a 	srl	r8,r3,r8
 c00bb2c:	11002526 	beq	r2,r4,c00bbc4 <__subdf3+0x8ec>
 c00bb30:	01001004 	movi	r4,64
 c00bb34:	2085c83a 	sub	r2,r4,r2
 c00bb38:	1884983a 	sll	r2,r3,r2
 c00bb3c:	1444b03a 	or	r2,r2,r17
 c00bb40:	1004c03a 	cmpne	r2,r2,zero
 c00bb44:	40a2b03a 	or	r17,r8,r2
 c00bb48:	0005883a 	mov	r2,zero
 c00bb4c:	003f1606 	br	c00b7a8 <__alt_data_end+0xfc00b7a8>
 c00bb50:	02000434 	movhi	r8,16
 c00bb54:	0009883a 	mov	r4,zero
 c00bb58:	423fffc4 	addi	r8,r8,-1
 c00bb5c:	00bfffc4 	movi	r2,-1
 c00bb60:	0401ffc4 	movi	r16,2047
 c00bb64:	003e6606 	br	c00b500 <__alt_data_end+0xfc00b500>
 c00bb68:	1c62b03a 	or	r17,r3,r17
 c00bb6c:	8822c03a 	cmpne	r17,r17,zero
 c00bb70:	0005883a 	mov	r2,zero
 c00bb74:	003f9906 	br	c00b9dc <__alt_data_end+0xfc00b9dc>
 c00bb78:	2807883a 	mov	r3,r5
 c00bb7c:	3023883a 	mov	r17,r6
 c00bb80:	0401ffc4 	movi	r16,2047
 c00bb84:	003df506 	br	c00b35c <__alt_data_end+0xfc00b35c>
 c00bb88:	2807883a 	mov	r3,r5
 c00bb8c:	3023883a 	mov	r17,r6
 c00bb90:	003df206 	br	c00b35c <__alt_data_end+0xfc00b35c>
 c00bb94:	123ff804 	addi	r8,r2,-32
 c00bb98:	01000804 	movi	r4,32
 c00bb9c:	1a10d83a 	srl	r8,r3,r8
 c00bba0:	11000a26 	beq	r2,r4,c00bbcc <__subdf3+0x8f4>
 c00bba4:	01001004 	movi	r4,64
 c00bba8:	2085c83a 	sub	r2,r4,r2
 c00bbac:	1884983a 	sll	r2,r3,r2
 c00bbb0:	1444b03a 	or	r2,r2,r17
 c00bbb4:	1004c03a 	cmpne	r2,r2,zero
 c00bbb8:	40a2b03a 	or	r17,r8,r2
 c00bbbc:	0005883a 	mov	r2,zero
 c00bbc0:	003f8606 	br	c00b9dc <__alt_data_end+0xfc00b9dc>
 c00bbc4:	0005883a 	mov	r2,zero
 c00bbc8:	003fdc06 	br	c00bb3c <__alt_data_end+0xfc00bb3c>
 c00bbcc:	0005883a 	mov	r2,zero
 c00bbd0:	003ff706 	br	c00bbb0 <__alt_data_end+0xfc00bbb0>

0c00bbd4 <__fixdfsi>:
 c00bbd4:	280cd53a 	srli	r6,r5,20
 c00bbd8:	00c00434 	movhi	r3,16
 c00bbdc:	18ffffc4 	addi	r3,r3,-1
 c00bbe0:	3181ffcc 	andi	r6,r6,2047
 c00bbe4:	01c0ff84 	movi	r7,1022
 c00bbe8:	28c6703a 	and	r3,r5,r3
 c00bbec:	280ad7fa 	srli	r5,r5,31
 c00bbf0:	3980120e 	bge	r7,r6,c00bc3c <__fixdfsi+0x68>
 c00bbf4:	00810744 	movi	r2,1053
 c00bbf8:	11800c16 	blt	r2,r6,c00bc2c <__fixdfsi+0x58>
 c00bbfc:	00810cc4 	movi	r2,1075
 c00bc00:	1185c83a 	sub	r2,r2,r6
 c00bc04:	01c007c4 	movi	r7,31
 c00bc08:	18c00434 	orhi	r3,r3,16
 c00bc0c:	38800d16 	blt	r7,r2,c00bc44 <__fixdfsi+0x70>
 c00bc10:	31befb44 	addi	r6,r6,-1043
 c00bc14:	2084d83a 	srl	r2,r4,r2
 c00bc18:	1986983a 	sll	r3,r3,r6
 c00bc1c:	1884b03a 	or	r2,r3,r2
 c00bc20:	28000726 	beq	r5,zero,c00bc40 <__fixdfsi+0x6c>
 c00bc24:	0085c83a 	sub	r2,zero,r2
 c00bc28:	f800283a 	ret
 c00bc2c:	00a00034 	movhi	r2,32768
 c00bc30:	10bfffc4 	addi	r2,r2,-1
 c00bc34:	2885883a 	add	r2,r5,r2
 c00bc38:	f800283a 	ret
 c00bc3c:	0005883a 	mov	r2,zero
 c00bc40:	f800283a 	ret
 c00bc44:	008104c4 	movi	r2,1043
 c00bc48:	1185c83a 	sub	r2,r2,r6
 c00bc4c:	1884d83a 	srl	r2,r3,r2
 c00bc50:	003ff306 	br	c00bc20 <__alt_data_end+0xfc00bc20>

0c00bc54 <__floatsidf>:
 c00bc54:	defffd04 	addi	sp,sp,-12
 c00bc58:	dfc00215 	stw	ra,8(sp)
 c00bc5c:	dc400115 	stw	r17,4(sp)
 c00bc60:	dc000015 	stw	r16,0(sp)
 c00bc64:	20002b26 	beq	r4,zero,c00bd14 <__floatsidf+0xc0>
 c00bc68:	2023883a 	mov	r17,r4
 c00bc6c:	2020d7fa 	srli	r16,r4,31
 c00bc70:	20002d16 	blt	r4,zero,c00bd28 <__floatsidf+0xd4>
 c00bc74:	8809883a 	mov	r4,r17
 c00bc78:	c00bdd80 	call	c00bdd8 <__clzsi2>
 c00bc7c:	01410784 	movi	r5,1054
 c00bc80:	288bc83a 	sub	r5,r5,r2
 c00bc84:	01010cc4 	movi	r4,1075
 c00bc88:	2149c83a 	sub	r4,r4,r5
 c00bc8c:	00c007c4 	movi	r3,31
 c00bc90:	1900160e 	bge	r3,r4,c00bcec <__floatsidf+0x98>
 c00bc94:	00c104c4 	movi	r3,1043
 c00bc98:	1947c83a 	sub	r3,r3,r5
 c00bc9c:	88c6983a 	sll	r3,r17,r3
 c00bca0:	00800434 	movhi	r2,16
 c00bca4:	10bfffc4 	addi	r2,r2,-1
 c00bca8:	1886703a 	and	r3,r3,r2
 c00bcac:	2941ffcc 	andi	r5,r5,2047
 c00bcb0:	800d883a 	mov	r6,r16
 c00bcb4:	0005883a 	mov	r2,zero
 c00bcb8:	280a953a 	slli	r5,r5,20
 c00bcbc:	31803fcc 	andi	r6,r6,255
 c00bcc0:	01000434 	movhi	r4,16
 c00bcc4:	300c97fa 	slli	r6,r6,31
 c00bcc8:	213fffc4 	addi	r4,r4,-1
 c00bccc:	1906703a 	and	r3,r3,r4
 c00bcd0:	1946b03a 	or	r3,r3,r5
 c00bcd4:	1986b03a 	or	r3,r3,r6
 c00bcd8:	dfc00217 	ldw	ra,8(sp)
 c00bcdc:	dc400117 	ldw	r17,4(sp)
 c00bce0:	dc000017 	ldw	r16,0(sp)
 c00bce4:	dec00304 	addi	sp,sp,12
 c00bce8:	f800283a 	ret
 c00bcec:	00c002c4 	movi	r3,11
 c00bcf0:	1887c83a 	sub	r3,r3,r2
 c00bcf4:	88c6d83a 	srl	r3,r17,r3
 c00bcf8:	8904983a 	sll	r2,r17,r4
 c00bcfc:	01000434 	movhi	r4,16
 c00bd00:	213fffc4 	addi	r4,r4,-1
 c00bd04:	2941ffcc 	andi	r5,r5,2047
 c00bd08:	1906703a 	and	r3,r3,r4
 c00bd0c:	800d883a 	mov	r6,r16
 c00bd10:	003fe906 	br	c00bcb8 <__alt_data_end+0xfc00bcb8>
 c00bd14:	000d883a 	mov	r6,zero
 c00bd18:	000b883a 	mov	r5,zero
 c00bd1c:	0007883a 	mov	r3,zero
 c00bd20:	0005883a 	mov	r2,zero
 c00bd24:	003fe406 	br	c00bcb8 <__alt_data_end+0xfc00bcb8>
 c00bd28:	0123c83a 	sub	r17,zero,r4
 c00bd2c:	003fd106 	br	c00bc74 <__alt_data_end+0xfc00bc74>

0c00bd30 <__floatunsidf>:
 c00bd30:	defffe04 	addi	sp,sp,-8
 c00bd34:	dc000015 	stw	r16,0(sp)
 c00bd38:	dfc00115 	stw	ra,4(sp)
 c00bd3c:	2021883a 	mov	r16,r4
 c00bd40:	20002226 	beq	r4,zero,c00bdcc <__floatunsidf+0x9c>
 c00bd44:	c00bdd80 	call	c00bdd8 <__clzsi2>
 c00bd48:	01010784 	movi	r4,1054
 c00bd4c:	2089c83a 	sub	r4,r4,r2
 c00bd50:	01810cc4 	movi	r6,1075
 c00bd54:	310dc83a 	sub	r6,r6,r4
 c00bd58:	00c007c4 	movi	r3,31
 c00bd5c:	1980120e 	bge	r3,r6,c00bda8 <__floatunsidf+0x78>
 c00bd60:	00c104c4 	movi	r3,1043
 c00bd64:	1907c83a 	sub	r3,r3,r4
 c00bd68:	80ca983a 	sll	r5,r16,r3
 c00bd6c:	00800434 	movhi	r2,16
 c00bd70:	10bfffc4 	addi	r2,r2,-1
 c00bd74:	2101ffcc 	andi	r4,r4,2047
 c00bd78:	0021883a 	mov	r16,zero
 c00bd7c:	288a703a 	and	r5,r5,r2
 c00bd80:	2008953a 	slli	r4,r4,20
 c00bd84:	00c00434 	movhi	r3,16
 c00bd88:	18ffffc4 	addi	r3,r3,-1
 c00bd8c:	28c6703a 	and	r3,r5,r3
 c00bd90:	8005883a 	mov	r2,r16
 c00bd94:	1906b03a 	or	r3,r3,r4
 c00bd98:	dfc00117 	ldw	ra,4(sp)
 c00bd9c:	dc000017 	ldw	r16,0(sp)
 c00bda0:	dec00204 	addi	sp,sp,8
 c00bda4:	f800283a 	ret
 c00bda8:	00c002c4 	movi	r3,11
 c00bdac:	188bc83a 	sub	r5,r3,r2
 c00bdb0:	814ad83a 	srl	r5,r16,r5
 c00bdb4:	00c00434 	movhi	r3,16
 c00bdb8:	18ffffc4 	addi	r3,r3,-1
 c00bdbc:	81a0983a 	sll	r16,r16,r6
 c00bdc0:	2101ffcc 	andi	r4,r4,2047
 c00bdc4:	28ca703a 	and	r5,r5,r3
 c00bdc8:	003fed06 	br	c00bd80 <__alt_data_end+0xfc00bd80>
 c00bdcc:	0009883a 	mov	r4,zero
 c00bdd0:	000b883a 	mov	r5,zero
 c00bdd4:	003fea06 	br	c00bd80 <__alt_data_end+0xfc00bd80>

0c00bdd8 <__clzsi2>:
 c00bdd8:	00bfffd4 	movui	r2,65535
 c00bddc:	11000536 	bltu	r2,r4,c00bdf4 <__clzsi2+0x1c>
 c00bde0:	00803fc4 	movi	r2,255
 c00bde4:	11000f36 	bltu	r2,r4,c00be24 <__clzsi2+0x4c>
 c00bde8:	00800804 	movi	r2,32
 c00bdec:	0007883a 	mov	r3,zero
 c00bdf0:	00000506 	br	c00be08 <__clzsi2+0x30>
 c00bdf4:	00804034 	movhi	r2,256
 c00bdf8:	10bfffc4 	addi	r2,r2,-1
 c00bdfc:	11000c2e 	bgeu	r2,r4,c00be30 <__clzsi2+0x58>
 c00be00:	00800204 	movi	r2,8
 c00be04:	00c00604 	movi	r3,24
 c00be08:	20c8d83a 	srl	r4,r4,r3
 c00be0c:	00c30074 	movhi	r3,3073
 c00be10:	18f90504 	addi	r3,r3,-7148
 c00be14:	1909883a 	add	r4,r3,r4
 c00be18:	20c00003 	ldbu	r3,0(r4)
 c00be1c:	10c5c83a 	sub	r2,r2,r3
 c00be20:	f800283a 	ret
 c00be24:	00800604 	movi	r2,24
 c00be28:	00c00204 	movi	r3,8
 c00be2c:	003ff606 	br	c00be08 <__alt_data_end+0xfc00be08>
 c00be30:	00800404 	movi	r2,16
 c00be34:	1007883a 	mov	r3,r2
 c00be38:	003ff306 	br	c00be08 <__alt_data_end+0xfc00be08>

0c00be3c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 c00be3c:	defffc04 	addi	sp,sp,-16
 c00be40:	df000315 	stw	fp,12(sp)
 c00be44:	df000304 	addi	fp,sp,12
 c00be48:	e13ffd15 	stw	r4,-12(fp)
 c00be4c:	e17ffe15 	stw	r5,-8(fp)
 c00be50:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 c00be54:	e0fffe17 	ldw	r3,-8(fp)
 c00be58:	e0bffd17 	ldw	r2,-12(fp)
 c00be5c:	18800c26 	beq	r3,r2,c00be90 <alt_load_section+0x54>
  {
    while( to != end )
 c00be60:	00000806 	br	c00be84 <alt_load_section+0x48>
    {
      *to++ = *from++;
 c00be64:	e0bffe17 	ldw	r2,-8(fp)
 c00be68:	10c00104 	addi	r3,r2,4
 c00be6c:	e0fffe15 	stw	r3,-8(fp)
 c00be70:	e0fffd17 	ldw	r3,-12(fp)
 c00be74:	19000104 	addi	r4,r3,4
 c00be78:	e13ffd15 	stw	r4,-12(fp)
 c00be7c:	18c00017 	ldw	r3,0(r3)
 c00be80:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 c00be84:	e0fffe17 	ldw	r3,-8(fp)
 c00be88:	e0bfff17 	ldw	r2,-4(fp)
 c00be8c:	18bff51e 	bne	r3,r2,c00be64 <__alt_data_end+0xfc00be64>
    {
      *to++ = *from++;
    }
  }
}
 c00be90:	0001883a 	nop
 c00be94:	e037883a 	mov	sp,fp
 c00be98:	df000017 	ldw	fp,0(sp)
 c00be9c:	dec00104 	addi	sp,sp,4
 c00bea0:	f800283a 	ret

0c00bea4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 c00bea4:	defffe04 	addi	sp,sp,-8
 c00bea8:	dfc00115 	stw	ra,4(sp)
 c00beac:	df000015 	stw	fp,0(sp)
 c00beb0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 c00beb4:	01830074 	movhi	r6,3073
 c00beb8:	3180c604 	addi	r6,r6,792
 c00bebc:	01430074 	movhi	r5,3073
 c00bec0:	29795204 	addi	r5,r5,-6840
 c00bec4:	01030074 	movhi	r4,3073
 c00bec8:	2100c604 	addi	r4,r4,792
 c00becc:	c00be3c0 	call	c00be3c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 c00bed0:	01830034 	movhi	r6,3072
 c00bed4:	31808c04 	addi	r6,r6,560
 c00bed8:	01430034 	movhi	r5,3072
 c00bedc:	29400804 	addi	r5,r5,32
 c00bee0:	01030034 	movhi	r4,3072
 c00bee4:	21000804 	addi	r4,r4,32
 c00bee8:	c00be3c0 	call	c00be3c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 c00beec:	01830074 	movhi	r6,3073
 c00bef0:	31b95204 	addi	r6,r6,-6840
 c00bef4:	01430074 	movhi	r5,3073
 c00bef8:	29787e04 	addi	r5,r5,-7688
 c00befc:	01030074 	movhi	r4,3073
 c00bf00:	21387e04 	addi	r4,r4,-7688
 c00bf04:	c00be3c0 	call	c00be3c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 c00bf08:	c00d0900 	call	c00d090 <alt_dcache_flush_all>
  alt_icache_flush_all();
 c00bf0c:	c00d27c0 	call	c00d27c <alt_icache_flush_all>
}
 c00bf10:	0001883a 	nop
 c00bf14:	e037883a 	mov	sp,fp
 c00bf18:	dfc00117 	ldw	ra,4(sp)
 c00bf1c:	df000017 	ldw	fp,0(sp)
 c00bf20:	dec00204 	addi	sp,sp,8
 c00bf24:	f800283a 	ret

0c00bf28 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 c00bf28:	defffd04 	addi	sp,sp,-12
 c00bf2c:	dfc00215 	stw	ra,8(sp)
 c00bf30:	df000115 	stw	fp,4(sp)
 c00bf34:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 c00bf38:	0009883a 	mov	r4,zero
 c00bf3c:	c00c1000 	call	c00c100 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 c00bf40:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 c00bf44:	c00c1380 	call	c00c138 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 c00bf48:	01830074 	movhi	r6,3073
 c00bf4c:	31b94504 	addi	r6,r6,-6892
 c00bf50:	01430074 	movhi	r5,3073
 c00bf54:	29794504 	addi	r5,r5,-6892
 c00bf58:	01030074 	movhi	r4,3073
 c00bf5c:	21394504 	addi	r4,r4,-6892
 c00bf60:	c00d6200 	call	c00d620 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 c00bf64:	c00d1bc0 	call	c00d1bc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 c00bf68:	01030074 	movhi	r4,3073
 c00bf6c:	21348704 	addi	r4,r4,-11748
 c00bf70:	c00de640 	call	c00de64 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 c00bf74:	d0a78c17 	ldw	r2,-25040(gp)
 c00bf78:	d0e78d17 	ldw	r3,-25036(gp)
 c00bf7c:	d1278e17 	ldw	r4,-25032(gp)
 c00bf80:	200d883a 	mov	r6,r4
 c00bf84:	180b883a 	mov	r5,r3
 c00bf88:	1009883a 	mov	r4,r2
 c00bf8c:	c00026c0 	call	c00026c <main>
 c00bf90:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 c00bf94:	01000044 	movi	r4,1
 c00bf98:	c00cfb80 	call	c00cfb8 <close>
  exit (result);
 c00bf9c:	e13fff17 	ldw	r4,-4(fp)
 c00bfa0:	c00de780 	call	c00de78 <exit>

0c00bfa4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 c00bfa4:	defffe04 	addi	sp,sp,-8
 c00bfa8:	df000115 	stw	fp,4(sp)
 c00bfac:	df000104 	addi	fp,sp,4
 c00bfb0:	e13fff15 	stw	r4,-4(fp)
}
 c00bfb4:	0001883a 	nop
 c00bfb8:	e037883a 	mov	sp,fp
 c00bfbc:	df000017 	ldw	fp,0(sp)
 c00bfc0:	dec00104 	addi	sp,sp,4
 c00bfc4:	f800283a 	ret

0c00bfc8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 c00bfc8:	defffe04 	addi	sp,sp,-8
 c00bfcc:	df000115 	stw	fp,4(sp)
 c00bfd0:	df000104 	addi	fp,sp,4
 c00bfd4:	e13fff15 	stw	r4,-4(fp)
}
 c00bfd8:	0001883a 	nop
 c00bfdc:	e037883a 	mov	sp,fp
 c00bfe0:	df000017 	ldw	fp,0(sp)
 c00bfe4:	dec00104 	addi	sp,sp,4
 c00bfe8:	f800283a 	ret

0c00bfec <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 c00bfec:	defff904 	addi	sp,sp,-28
 c00bff0:	df000615 	stw	fp,24(sp)
 c00bff4:	df000604 	addi	fp,sp,24
 c00bff8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00bffc:	0005303a 	rdctl	r2,status
 c00c000:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00c004:	e0fffe17 	ldw	r3,-8(fp)
 c00c008:	00bfff84 	movi	r2,-2
 c00c00c:	1884703a 	and	r2,r3,r2
 c00c010:	1001703a 	wrctl	status,r2
  
  return context;
 c00c014:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 c00c018:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 c00c01c:	d0a00717 	ldw	r2,-32740(gp)
 c00c020:	10c000c4 	addi	r3,r2,3
 c00c024:	00bfff04 	movi	r2,-4
 c00c028:	1884703a 	and	r2,r3,r2
 c00c02c:	d0a00715 	stw	r2,-32740(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 c00c030:	d0e00717 	ldw	r3,-32740(gp)
 c00c034:	e0bfff17 	ldw	r2,-4(fp)
 c00c038:	1887883a 	add	r3,r3,r2
 c00c03c:	00840034 	movhi	r2,4096
 c00c040:	10800004 	addi	r2,r2,0
 c00c044:	10c0062e 	bgeu	r2,r3,c00c060 <sbrk+0x74>
 c00c048:	e0bffb17 	ldw	r2,-20(fp)
 c00c04c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00c050:	e0bffa17 	ldw	r2,-24(fp)
 c00c054:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 c00c058:	00bfffc4 	movi	r2,-1
 c00c05c:	00000b06 	br	c00c08c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 c00c060:	d0a00717 	ldw	r2,-32740(gp)
 c00c064:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 c00c068:	d0e00717 	ldw	r3,-32740(gp)
 c00c06c:	e0bfff17 	ldw	r2,-4(fp)
 c00c070:	1885883a 	add	r2,r3,r2
 c00c074:	d0a00715 	stw	r2,-32740(gp)
 c00c078:	e0bffb17 	ldw	r2,-20(fp)
 c00c07c:	e0bffc15 	stw	r2,-16(fp)
 c00c080:	e0bffc17 	ldw	r2,-16(fp)
 c00c084:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 c00c088:	e0bffd17 	ldw	r2,-12(fp)
} 
 c00c08c:	e037883a 	mov	sp,fp
 c00c090:	df000017 	ldw	fp,0(sp)
 c00c094:	dec00104 	addi	sp,sp,4
 c00c098:	f800283a 	ret

0c00c09c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 c00c09c:	defffd04 	addi	sp,sp,-12
 c00c0a0:	dfc00215 	stw	ra,8(sp)
 c00c0a4:	df000115 	stw	fp,4(sp)
 c00c0a8:	df000104 	addi	fp,sp,4
 c00c0ac:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 c00c0b0:	e13fff17 	ldw	r4,-4(fp)
 c00c0b4:	c00ce240 	call	c00ce24 <alt_busy_sleep>
}
 c00c0b8:	e037883a 	mov	sp,fp
 c00c0bc:	dfc00117 	ldw	ra,4(sp)
 c00c0c0:	df000017 	ldw	fp,0(sp)
 c00c0c4:	dec00204 	addi	sp,sp,8
 c00c0c8:	f800283a 	ret

0c00c0cc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 c00c0cc:	defffd04 	addi	sp,sp,-12
 c00c0d0:	dfc00215 	stw	ra,8(sp)
 c00c0d4:	df000115 	stw	fp,4(sp)
 c00c0d8:	df000104 	addi	fp,sp,4
 c00c0dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 c00c0e0:	d1600a04 	addi	r5,gp,-32728
 c00c0e4:	e13fff17 	ldw	r4,-4(fp)
 c00c0e8:	c00d1180 	call	c00d118 <alt_dev_llist_insert>
}
 c00c0ec:	e037883a 	mov	sp,fp
 c00c0f0:	dfc00117 	ldw	ra,4(sp)
 c00c0f4:	df000017 	ldw	fp,0(sp)
 c00c0f8:	dec00204 	addi	sp,sp,8
 c00c0fc:	f800283a 	ret

0c00c100 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 c00c100:	defffd04 	addi	sp,sp,-12
 c00c104:	dfc00215 	stw	ra,8(sp)
 c00c108:	df000115 	stw	fp,4(sp)
 c00c10c:	df000104 	addi	fp,sp,4
 c00c110:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 c00c114:	c00db480 	call	c00db48 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 c00c118:	00800044 	movi	r2,1
 c00c11c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 c00c120:	0001883a 	nop
 c00c124:	e037883a 	mov	sp,fp
 c00c128:	dfc00117 	ldw	ra,4(sp)
 c00c12c:	df000017 	ldw	fp,0(sp)
 c00c130:	dec00204 	addi	sp,sp,8
 c00c134:	f800283a 	ret

0c00c138 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 c00c138:	defffe04 	addi	sp,sp,-8
 c00c13c:	dfc00115 	stw	ra,4(sp)
 c00c140:	df000015 	stw	fp,0(sp)
 c00c144:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 c00c148:	01c0fa04 	movi	r7,1000
 c00c14c:	01800084 	movi	r6,2
 c00c150:	000b883a 	mov	r5,zero
 c00c154:	01005004 	movi	r4,320
 c00c158:	c00cc7c0 	call	c00cc7c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 c00c15c:	01800044 	movi	r6,1
 c00c160:	000b883a 	mov	r5,zero
 c00c164:	01030074 	movhi	r4,3073
 c00c168:	213c3d04 	addi	r4,r4,-3852
 c00c16c:	c00c3000 	call	c00c300 <altera_avalon_jtag_uart_init>
 c00c170:	01030074 	movhi	r4,3073
 c00c174:	213c3304 	addi	r4,r4,-3892
 c00c178:	c00c0cc0 	call	c00c0cc <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 c00c17c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 c00c180:	0001883a 	nop
}
 c00c184:	0001883a 	nop
 c00c188:	e037883a 	mov	sp,fp
 c00c18c:	dfc00117 	ldw	ra,4(sp)
 c00c190:	df000017 	ldw	fp,0(sp)
 c00c194:	dec00204 	addi	sp,sp,8
 c00c198:	f800283a 	ret

0c00c19c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 c00c19c:	defffa04 	addi	sp,sp,-24
 c00c1a0:	dfc00515 	stw	ra,20(sp)
 c00c1a4:	df000415 	stw	fp,16(sp)
 c00c1a8:	df000404 	addi	fp,sp,16
 c00c1ac:	e13ffd15 	stw	r4,-12(fp)
 c00c1b0:	e17ffe15 	stw	r5,-8(fp)
 c00c1b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c00c1b8:	e0bffd17 	ldw	r2,-12(fp)
 c00c1bc:	10800017 	ldw	r2,0(r2)
 c00c1c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 c00c1c4:	e0bffc17 	ldw	r2,-16(fp)
 c00c1c8:	10c00a04 	addi	r3,r2,40
 c00c1cc:	e0bffd17 	ldw	r2,-12(fp)
 c00c1d0:	10800217 	ldw	r2,8(r2)
 c00c1d4:	100f883a 	mov	r7,r2
 c00c1d8:	e1bfff17 	ldw	r6,-4(fp)
 c00c1dc:	e17ffe17 	ldw	r5,-8(fp)
 c00c1e0:	1809883a 	mov	r4,r3
 c00c1e4:	c00c7c40 	call	c00c7c4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 c00c1e8:	e037883a 	mov	sp,fp
 c00c1ec:	dfc00117 	ldw	ra,4(sp)
 c00c1f0:	df000017 	ldw	fp,0(sp)
 c00c1f4:	dec00204 	addi	sp,sp,8
 c00c1f8:	f800283a 	ret

0c00c1fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 c00c1fc:	defffa04 	addi	sp,sp,-24
 c00c200:	dfc00515 	stw	ra,20(sp)
 c00c204:	df000415 	stw	fp,16(sp)
 c00c208:	df000404 	addi	fp,sp,16
 c00c20c:	e13ffd15 	stw	r4,-12(fp)
 c00c210:	e17ffe15 	stw	r5,-8(fp)
 c00c214:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c00c218:	e0bffd17 	ldw	r2,-12(fp)
 c00c21c:	10800017 	ldw	r2,0(r2)
 c00c220:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 c00c224:	e0bffc17 	ldw	r2,-16(fp)
 c00c228:	10c00a04 	addi	r3,r2,40
 c00c22c:	e0bffd17 	ldw	r2,-12(fp)
 c00c230:	10800217 	ldw	r2,8(r2)
 c00c234:	100f883a 	mov	r7,r2
 c00c238:	e1bfff17 	ldw	r6,-4(fp)
 c00c23c:	e17ffe17 	ldw	r5,-8(fp)
 c00c240:	1809883a 	mov	r4,r3
 c00c244:	c00c9e00 	call	c00c9e0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 c00c248:	e037883a 	mov	sp,fp
 c00c24c:	dfc00117 	ldw	ra,4(sp)
 c00c250:	df000017 	ldw	fp,0(sp)
 c00c254:	dec00204 	addi	sp,sp,8
 c00c258:	f800283a 	ret

0c00c25c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 c00c25c:	defffc04 	addi	sp,sp,-16
 c00c260:	dfc00315 	stw	ra,12(sp)
 c00c264:	df000215 	stw	fp,8(sp)
 c00c268:	df000204 	addi	fp,sp,8
 c00c26c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c00c270:	e0bfff17 	ldw	r2,-4(fp)
 c00c274:	10800017 	ldw	r2,0(r2)
 c00c278:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 c00c27c:	e0bffe17 	ldw	r2,-8(fp)
 c00c280:	10c00a04 	addi	r3,r2,40
 c00c284:	e0bfff17 	ldw	r2,-4(fp)
 c00c288:	10800217 	ldw	r2,8(r2)
 c00c28c:	100b883a 	mov	r5,r2
 c00c290:	1809883a 	mov	r4,r3
 c00c294:	c00c66c0 	call	c00c66c <altera_avalon_jtag_uart_close>
}
 c00c298:	e037883a 	mov	sp,fp
 c00c29c:	dfc00117 	ldw	ra,4(sp)
 c00c2a0:	df000017 	ldw	fp,0(sp)
 c00c2a4:	dec00204 	addi	sp,sp,8
 c00c2a8:	f800283a 	ret

0c00c2ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 c00c2ac:	defffa04 	addi	sp,sp,-24
 c00c2b0:	dfc00515 	stw	ra,20(sp)
 c00c2b4:	df000415 	stw	fp,16(sp)
 c00c2b8:	df000404 	addi	fp,sp,16
 c00c2bc:	e13ffd15 	stw	r4,-12(fp)
 c00c2c0:	e17ffe15 	stw	r5,-8(fp)
 c00c2c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 c00c2c8:	e0bffd17 	ldw	r2,-12(fp)
 c00c2cc:	10800017 	ldw	r2,0(r2)
 c00c2d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 c00c2d4:	e0bffc17 	ldw	r2,-16(fp)
 c00c2d8:	10800a04 	addi	r2,r2,40
 c00c2dc:	e1bfff17 	ldw	r6,-4(fp)
 c00c2e0:	e17ffe17 	ldw	r5,-8(fp)
 c00c2e4:	1009883a 	mov	r4,r2
 c00c2e8:	c00c6d40 	call	c00c6d4 <altera_avalon_jtag_uart_ioctl>
}
 c00c2ec:	e037883a 	mov	sp,fp
 c00c2f0:	dfc00117 	ldw	ra,4(sp)
 c00c2f4:	df000017 	ldw	fp,0(sp)
 c00c2f8:	dec00204 	addi	sp,sp,8
 c00c2fc:	f800283a 	ret

0c00c300 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 c00c300:	defffa04 	addi	sp,sp,-24
 c00c304:	dfc00515 	stw	ra,20(sp)
 c00c308:	df000415 	stw	fp,16(sp)
 c00c30c:	df000404 	addi	fp,sp,16
 c00c310:	e13ffd15 	stw	r4,-12(fp)
 c00c314:	e17ffe15 	stw	r5,-8(fp)
 c00c318:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c00c31c:	e0bffd17 	ldw	r2,-12(fp)
 c00c320:	00c00044 	movi	r3,1
 c00c324:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 c00c328:	e0bffd17 	ldw	r2,-12(fp)
 c00c32c:	10800017 	ldw	r2,0(r2)
 c00c330:	10800104 	addi	r2,r2,4
 c00c334:	1007883a 	mov	r3,r2
 c00c338:	e0bffd17 	ldw	r2,-12(fp)
 c00c33c:	10800817 	ldw	r2,32(r2)
 c00c340:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 c00c344:	e0bffe17 	ldw	r2,-8(fp)
 c00c348:	e0ffff17 	ldw	r3,-4(fp)
 c00c34c:	d8000015 	stw	zero,0(sp)
 c00c350:	e1fffd17 	ldw	r7,-12(fp)
 c00c354:	01830074 	movhi	r6,3073
 c00c358:	31b0f004 	addi	r6,r6,-15424
 c00c35c:	180b883a 	mov	r5,r3
 c00c360:	1009883a 	mov	r4,r2
 c00c364:	c00d29c0 	call	c00d29c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 c00c368:	e0bffd17 	ldw	r2,-12(fp)
 c00c36c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 c00c370:	e0bffd17 	ldw	r2,-12(fp)
 c00c374:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c00c378:	d0e79017 	ldw	r3,-25024(gp)
 c00c37c:	e1fffd17 	ldw	r7,-12(fp)
 c00c380:	01830074 	movhi	r6,3073
 c00c384:	31b17304 	addi	r6,r6,-14900
 c00c388:	180b883a 	mov	r5,r3
 c00c38c:	1009883a 	mov	r4,r2
 c00c390:	c00ccf80 	call	c00ccf8 <alt_alarm_start>
 c00c394:	1000040e 	bge	r2,zero,c00c3a8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 c00c398:	e0fffd17 	ldw	r3,-12(fp)
 c00c39c:	00a00034 	movhi	r2,32768
 c00c3a0:	10bfffc4 	addi	r2,r2,-1
 c00c3a4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 c00c3a8:	0001883a 	nop
 c00c3ac:	e037883a 	mov	sp,fp
 c00c3b0:	dfc00117 	ldw	ra,4(sp)
 c00c3b4:	df000017 	ldw	fp,0(sp)
 c00c3b8:	dec00204 	addi	sp,sp,8
 c00c3bc:	f800283a 	ret

0c00c3c0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 c00c3c0:	defff804 	addi	sp,sp,-32
 c00c3c4:	df000715 	stw	fp,28(sp)
 c00c3c8:	df000704 	addi	fp,sp,28
 c00c3cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 c00c3d0:	e0bfff17 	ldw	r2,-4(fp)
 c00c3d4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 c00c3d8:	e0bffb17 	ldw	r2,-20(fp)
 c00c3dc:	10800017 	ldw	r2,0(r2)
 c00c3e0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c00c3e4:	e0bffc17 	ldw	r2,-16(fp)
 c00c3e8:	10800104 	addi	r2,r2,4
 c00c3ec:	10800037 	ldwio	r2,0(r2)
 c00c3f0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 c00c3f4:	e0bffd17 	ldw	r2,-12(fp)
 c00c3f8:	1080c00c 	andi	r2,r2,768
 c00c3fc:	10006d26 	beq	r2,zero,c00c5b4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 c00c400:	e0bffd17 	ldw	r2,-12(fp)
 c00c404:	1080400c 	andi	r2,r2,256
 c00c408:	10003526 	beq	r2,zero,c00c4e0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 c00c40c:	00800074 	movhi	r2,1
 c00c410:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c00c414:	e0bffb17 	ldw	r2,-20(fp)
 c00c418:	10800a17 	ldw	r2,40(r2)
 c00c41c:	10800044 	addi	r2,r2,1
 c00c420:	1081ffcc 	andi	r2,r2,2047
 c00c424:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 c00c428:	e0bffb17 	ldw	r2,-20(fp)
 c00c42c:	10c00b17 	ldw	r3,44(r2)
 c00c430:	e0bffe17 	ldw	r2,-8(fp)
 c00c434:	18801526 	beq	r3,r2,c00c48c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 c00c438:	e0bffc17 	ldw	r2,-16(fp)
 c00c43c:	10800037 	ldwio	r2,0(r2)
 c00c440:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 c00c444:	e0bff917 	ldw	r2,-28(fp)
 c00c448:	10a0000c 	andi	r2,r2,32768
 c00c44c:	10001126 	beq	r2,zero,c00c494 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 c00c450:	e0bffb17 	ldw	r2,-20(fp)
 c00c454:	10800a17 	ldw	r2,40(r2)
 c00c458:	e0fff917 	ldw	r3,-28(fp)
 c00c45c:	1809883a 	mov	r4,r3
 c00c460:	e0fffb17 	ldw	r3,-20(fp)
 c00c464:	1885883a 	add	r2,r3,r2
 c00c468:	10800e04 	addi	r2,r2,56
 c00c46c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c00c470:	e0bffb17 	ldw	r2,-20(fp)
 c00c474:	10800a17 	ldw	r2,40(r2)
 c00c478:	10800044 	addi	r2,r2,1
 c00c47c:	10c1ffcc 	andi	r3,r2,2047
 c00c480:	e0bffb17 	ldw	r2,-20(fp)
 c00c484:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 c00c488:	003fe206 	br	c00c414 <__alt_data_end+0xfc00c414>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 c00c48c:	0001883a 	nop
 c00c490:	00000106 	br	c00c498 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 c00c494:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 c00c498:	e0bff917 	ldw	r2,-28(fp)
 c00c49c:	10bfffec 	andhi	r2,r2,65535
 c00c4a0:	10000f26 	beq	r2,zero,c00c4e0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c00c4a4:	e0bffb17 	ldw	r2,-20(fp)
 c00c4a8:	10c00817 	ldw	r3,32(r2)
 c00c4ac:	00bfff84 	movi	r2,-2
 c00c4b0:	1886703a 	and	r3,r3,r2
 c00c4b4:	e0bffb17 	ldw	r2,-20(fp)
 c00c4b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 c00c4bc:	e0bffc17 	ldw	r2,-16(fp)
 c00c4c0:	10800104 	addi	r2,r2,4
 c00c4c4:	1007883a 	mov	r3,r2
 c00c4c8:	e0bffb17 	ldw	r2,-20(fp)
 c00c4cc:	10800817 	ldw	r2,32(r2)
 c00c4d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c00c4d4:	e0bffc17 	ldw	r2,-16(fp)
 c00c4d8:	10800104 	addi	r2,r2,4
 c00c4dc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 c00c4e0:	e0bffd17 	ldw	r2,-12(fp)
 c00c4e4:	1080800c 	andi	r2,r2,512
 c00c4e8:	103fbe26 	beq	r2,zero,c00c3e4 <__alt_data_end+0xfc00c3e4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 c00c4ec:	e0bffd17 	ldw	r2,-12(fp)
 c00c4f0:	1004d43a 	srli	r2,r2,16
 c00c4f4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 c00c4f8:	00001406 	br	c00c54c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 c00c4fc:	e0bffc17 	ldw	r2,-16(fp)
 c00c500:	e0fffb17 	ldw	r3,-20(fp)
 c00c504:	18c00d17 	ldw	r3,52(r3)
 c00c508:	e13ffb17 	ldw	r4,-20(fp)
 c00c50c:	20c7883a 	add	r3,r4,r3
 c00c510:	18c20e04 	addi	r3,r3,2104
 c00c514:	18c00003 	ldbu	r3,0(r3)
 c00c518:	18c03fcc 	andi	r3,r3,255
 c00c51c:	18c0201c 	xori	r3,r3,128
 c00c520:	18ffe004 	addi	r3,r3,-128
 c00c524:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c00c528:	e0bffb17 	ldw	r2,-20(fp)
 c00c52c:	10800d17 	ldw	r2,52(r2)
 c00c530:	10800044 	addi	r2,r2,1
 c00c534:	10c1ffcc 	andi	r3,r2,2047
 c00c538:	e0bffb17 	ldw	r2,-20(fp)
 c00c53c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 c00c540:	e0bffa17 	ldw	r2,-24(fp)
 c00c544:	10bfffc4 	addi	r2,r2,-1
 c00c548:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 c00c54c:	e0bffa17 	ldw	r2,-24(fp)
 c00c550:	10000526 	beq	r2,zero,c00c568 <altera_avalon_jtag_uart_irq+0x1a8>
 c00c554:	e0bffb17 	ldw	r2,-20(fp)
 c00c558:	10c00d17 	ldw	r3,52(r2)
 c00c55c:	e0bffb17 	ldw	r2,-20(fp)
 c00c560:	10800c17 	ldw	r2,48(r2)
 c00c564:	18bfe51e 	bne	r3,r2,c00c4fc <__alt_data_end+0xfc00c4fc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 c00c568:	e0bffa17 	ldw	r2,-24(fp)
 c00c56c:	103f9d26 	beq	r2,zero,c00c3e4 <__alt_data_end+0xfc00c3e4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c00c570:	e0bffb17 	ldw	r2,-20(fp)
 c00c574:	10c00817 	ldw	r3,32(r2)
 c00c578:	00bfff44 	movi	r2,-3
 c00c57c:	1886703a 	and	r3,r3,r2
 c00c580:	e0bffb17 	ldw	r2,-20(fp)
 c00c584:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c00c588:	e0bffb17 	ldw	r2,-20(fp)
 c00c58c:	10800017 	ldw	r2,0(r2)
 c00c590:	10800104 	addi	r2,r2,4
 c00c594:	1007883a 	mov	r3,r2
 c00c598:	e0bffb17 	ldw	r2,-20(fp)
 c00c59c:	10800817 	ldw	r2,32(r2)
 c00c5a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c00c5a4:	e0bffc17 	ldw	r2,-16(fp)
 c00c5a8:	10800104 	addi	r2,r2,4
 c00c5ac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 c00c5b0:	003f8c06 	br	c00c3e4 <__alt_data_end+0xfc00c3e4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 c00c5b4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 c00c5b8:	0001883a 	nop
 c00c5bc:	e037883a 	mov	sp,fp
 c00c5c0:	df000017 	ldw	fp,0(sp)
 c00c5c4:	dec00104 	addi	sp,sp,4
 c00c5c8:	f800283a 	ret

0c00c5cc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 c00c5cc:	defff804 	addi	sp,sp,-32
 c00c5d0:	df000715 	stw	fp,28(sp)
 c00c5d4:	df000704 	addi	fp,sp,28
 c00c5d8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 c00c5dc:	e0bffb17 	ldw	r2,-20(fp)
 c00c5e0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 c00c5e4:	e0bff917 	ldw	r2,-28(fp)
 c00c5e8:	10800017 	ldw	r2,0(r2)
 c00c5ec:	10800104 	addi	r2,r2,4
 c00c5f0:	10800037 	ldwio	r2,0(r2)
 c00c5f4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 c00c5f8:	e0bffa17 	ldw	r2,-24(fp)
 c00c5fc:	1081000c 	andi	r2,r2,1024
 c00c600:	10000b26 	beq	r2,zero,c00c630 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 c00c604:	e0bff917 	ldw	r2,-28(fp)
 c00c608:	10800017 	ldw	r2,0(r2)
 c00c60c:	10800104 	addi	r2,r2,4
 c00c610:	1007883a 	mov	r3,r2
 c00c614:	e0bff917 	ldw	r2,-28(fp)
 c00c618:	10800817 	ldw	r2,32(r2)
 c00c61c:	10810014 	ori	r2,r2,1024
 c00c620:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 c00c624:	e0bff917 	ldw	r2,-28(fp)
 c00c628:	10000915 	stw	zero,36(r2)
 c00c62c:	00000a06 	br	c00c658 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 c00c630:	e0bff917 	ldw	r2,-28(fp)
 c00c634:	10c00917 	ldw	r3,36(r2)
 c00c638:	00a00034 	movhi	r2,32768
 c00c63c:	10bfff04 	addi	r2,r2,-4
 c00c640:	10c00536 	bltu	r2,r3,c00c658 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 c00c644:	e0bff917 	ldw	r2,-28(fp)
 c00c648:	10800917 	ldw	r2,36(r2)
 c00c64c:	10c00044 	addi	r3,r2,1
 c00c650:	e0bff917 	ldw	r2,-28(fp)
 c00c654:	10c00915 	stw	r3,36(r2)
 c00c658:	d0a79017 	ldw	r2,-25024(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 c00c65c:	e037883a 	mov	sp,fp
 c00c660:	df000017 	ldw	fp,0(sp)
 c00c664:	dec00104 	addi	sp,sp,4
 c00c668:	f800283a 	ret

0c00c66c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 c00c66c:	defffd04 	addi	sp,sp,-12
 c00c670:	df000215 	stw	fp,8(sp)
 c00c674:	df000204 	addi	fp,sp,8
 c00c678:	e13ffe15 	stw	r4,-8(fp)
 c00c67c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c00c680:	00000506 	br	c00c698 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 c00c684:	e0bfff17 	ldw	r2,-4(fp)
 c00c688:	1090000c 	andi	r2,r2,16384
 c00c68c:	10000226 	beq	r2,zero,c00c698 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 c00c690:	00bffd44 	movi	r2,-11
 c00c694:	00000b06 	br	c00c6c4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c00c698:	e0bffe17 	ldw	r2,-8(fp)
 c00c69c:	10c00d17 	ldw	r3,52(r2)
 c00c6a0:	e0bffe17 	ldw	r2,-8(fp)
 c00c6a4:	10800c17 	ldw	r2,48(r2)
 c00c6a8:	18800526 	beq	r3,r2,c00c6c0 <altera_avalon_jtag_uart_close+0x54>
 c00c6ac:	e0bffe17 	ldw	r2,-8(fp)
 c00c6b0:	10c00917 	ldw	r3,36(r2)
 c00c6b4:	e0bffe17 	ldw	r2,-8(fp)
 c00c6b8:	10800117 	ldw	r2,4(r2)
 c00c6bc:	18bff136 	bltu	r3,r2,c00c684 <__alt_data_end+0xfc00c684>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 c00c6c0:	0005883a 	mov	r2,zero
}
 c00c6c4:	e037883a 	mov	sp,fp
 c00c6c8:	df000017 	ldw	fp,0(sp)
 c00c6cc:	dec00104 	addi	sp,sp,4
 c00c6d0:	f800283a 	ret

0c00c6d4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 c00c6d4:	defffa04 	addi	sp,sp,-24
 c00c6d8:	df000515 	stw	fp,20(sp)
 c00c6dc:	df000504 	addi	fp,sp,20
 c00c6e0:	e13ffd15 	stw	r4,-12(fp)
 c00c6e4:	e17ffe15 	stw	r5,-8(fp)
 c00c6e8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 c00c6ec:	00bff9c4 	movi	r2,-25
 c00c6f0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 c00c6f4:	e0bffe17 	ldw	r2,-8(fp)
 c00c6f8:	10da8060 	cmpeqi	r3,r2,27137
 c00c6fc:	1800031e 	bne	r3,zero,c00c70c <altera_avalon_jtag_uart_ioctl+0x38>
 c00c700:	109a80a0 	cmpeqi	r2,r2,27138
 c00c704:	1000181e 	bne	r2,zero,c00c768 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 c00c708:	00002906 	br	c00c7b0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 c00c70c:	e0bffd17 	ldw	r2,-12(fp)
 c00c710:	10c00117 	ldw	r3,4(r2)
 c00c714:	00a00034 	movhi	r2,32768
 c00c718:	10bfffc4 	addi	r2,r2,-1
 c00c71c:	18802126 	beq	r3,r2,c00c7a4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 c00c720:	e0bfff17 	ldw	r2,-4(fp)
 c00c724:	10800017 	ldw	r2,0(r2)
 c00c728:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 c00c72c:	e0bffc17 	ldw	r2,-16(fp)
 c00c730:	10800090 	cmplti	r2,r2,2
 c00c734:	1000061e 	bne	r2,zero,c00c750 <altera_avalon_jtag_uart_ioctl+0x7c>
 c00c738:	e0fffc17 	ldw	r3,-16(fp)
 c00c73c:	00a00034 	movhi	r2,32768
 c00c740:	10bfffc4 	addi	r2,r2,-1
 c00c744:	18800226 	beq	r3,r2,c00c750 <altera_avalon_jtag_uart_ioctl+0x7c>
 c00c748:	e0bffc17 	ldw	r2,-16(fp)
 c00c74c:	00000206 	br	c00c758 <altera_avalon_jtag_uart_ioctl+0x84>
 c00c750:	00a00034 	movhi	r2,32768
 c00c754:	10bfff84 	addi	r2,r2,-2
 c00c758:	e0fffd17 	ldw	r3,-12(fp)
 c00c75c:	18800115 	stw	r2,4(r3)
      rc = 0;
 c00c760:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 c00c764:	00000f06 	br	c00c7a4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 c00c768:	e0bffd17 	ldw	r2,-12(fp)
 c00c76c:	10c00117 	ldw	r3,4(r2)
 c00c770:	00a00034 	movhi	r2,32768
 c00c774:	10bfffc4 	addi	r2,r2,-1
 c00c778:	18800c26 	beq	r3,r2,c00c7ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 c00c77c:	e0bffd17 	ldw	r2,-12(fp)
 c00c780:	10c00917 	ldw	r3,36(r2)
 c00c784:	e0bffd17 	ldw	r2,-12(fp)
 c00c788:	10800117 	ldw	r2,4(r2)
 c00c78c:	1885803a 	cmpltu	r2,r3,r2
 c00c790:	10c03fcc 	andi	r3,r2,255
 c00c794:	e0bfff17 	ldw	r2,-4(fp)
 c00c798:	10c00015 	stw	r3,0(r2)
      rc = 0;
 c00c79c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 c00c7a0:	00000206 	br	c00c7ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 c00c7a4:	0001883a 	nop
 c00c7a8:	00000106 	br	c00c7b0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 c00c7ac:	0001883a 	nop

  default:
    break;
  }

  return rc;
 c00c7b0:	e0bffb17 	ldw	r2,-20(fp)
}
 c00c7b4:	e037883a 	mov	sp,fp
 c00c7b8:	df000017 	ldw	fp,0(sp)
 c00c7bc:	dec00104 	addi	sp,sp,4
 c00c7c0:	f800283a 	ret

0c00c7c4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 c00c7c4:	defff304 	addi	sp,sp,-52
 c00c7c8:	dfc00c15 	stw	ra,48(sp)
 c00c7cc:	df000b15 	stw	fp,44(sp)
 c00c7d0:	df000b04 	addi	fp,sp,44
 c00c7d4:	e13ffc15 	stw	r4,-16(fp)
 c00c7d8:	e17ffd15 	stw	r5,-12(fp)
 c00c7dc:	e1bffe15 	stw	r6,-8(fp)
 c00c7e0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 c00c7e4:	e0bffd17 	ldw	r2,-12(fp)
 c00c7e8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c00c7ec:	00004706 	br	c00c90c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 c00c7f0:	e0bffc17 	ldw	r2,-16(fp)
 c00c7f4:	10800a17 	ldw	r2,40(r2)
 c00c7f8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 c00c7fc:	e0bffc17 	ldw	r2,-16(fp)
 c00c800:	10800b17 	ldw	r2,44(r2)
 c00c804:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 c00c808:	e0fff717 	ldw	r3,-36(fp)
 c00c80c:	e0bff817 	ldw	r2,-32(fp)
 c00c810:	18800536 	bltu	r3,r2,c00c828 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 c00c814:	e0fff717 	ldw	r3,-36(fp)
 c00c818:	e0bff817 	ldw	r2,-32(fp)
 c00c81c:	1885c83a 	sub	r2,r3,r2
 c00c820:	e0bff615 	stw	r2,-40(fp)
 c00c824:	00000406 	br	c00c838 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 c00c828:	00c20004 	movi	r3,2048
 c00c82c:	e0bff817 	ldw	r2,-32(fp)
 c00c830:	1885c83a 	sub	r2,r3,r2
 c00c834:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 c00c838:	e0bff617 	ldw	r2,-40(fp)
 c00c83c:	10001e26 	beq	r2,zero,c00c8b8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 c00c840:	e0fffe17 	ldw	r3,-8(fp)
 c00c844:	e0bff617 	ldw	r2,-40(fp)
 c00c848:	1880022e 	bgeu	r3,r2,c00c854 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 c00c84c:	e0bffe17 	ldw	r2,-8(fp)
 c00c850:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 c00c854:	e0bffc17 	ldw	r2,-16(fp)
 c00c858:	10c00e04 	addi	r3,r2,56
 c00c85c:	e0bff817 	ldw	r2,-32(fp)
 c00c860:	1885883a 	add	r2,r3,r2
 c00c864:	e1bff617 	ldw	r6,-40(fp)
 c00c868:	100b883a 	mov	r5,r2
 c00c86c:	e13ff517 	ldw	r4,-44(fp)
 c00c870:	c0052c00 	call	c0052c0 <memcpy>
      ptr   += n;
 c00c874:	e0fff517 	ldw	r3,-44(fp)
 c00c878:	e0bff617 	ldw	r2,-40(fp)
 c00c87c:	1885883a 	add	r2,r3,r2
 c00c880:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 c00c884:	e0fffe17 	ldw	r3,-8(fp)
 c00c888:	e0bff617 	ldw	r2,-40(fp)
 c00c88c:	1885c83a 	sub	r2,r3,r2
 c00c890:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c00c894:	e0fff817 	ldw	r3,-32(fp)
 c00c898:	e0bff617 	ldw	r2,-40(fp)
 c00c89c:	1885883a 	add	r2,r3,r2
 c00c8a0:	10c1ffcc 	andi	r3,r2,2047
 c00c8a4:	e0bffc17 	ldw	r2,-16(fp)
 c00c8a8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 c00c8ac:	e0bffe17 	ldw	r2,-8(fp)
 c00c8b0:	00bfcf16 	blt	zero,r2,c00c7f0 <__alt_data_end+0xfc00c7f0>
 c00c8b4:	00000106 	br	c00c8bc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 c00c8b8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 c00c8bc:	e0fff517 	ldw	r3,-44(fp)
 c00c8c0:	e0bffd17 	ldw	r2,-12(fp)
 c00c8c4:	1880141e 	bne	r3,r2,c00c918 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 c00c8c8:	e0bfff17 	ldw	r2,-4(fp)
 c00c8cc:	1090000c 	andi	r2,r2,16384
 c00c8d0:	1000131e 	bne	r2,zero,c00c920 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 c00c8d4:	0001883a 	nop
 c00c8d8:	e0bffc17 	ldw	r2,-16(fp)
 c00c8dc:	10c00a17 	ldw	r3,40(r2)
 c00c8e0:	e0bff717 	ldw	r2,-36(fp)
 c00c8e4:	1880051e 	bne	r3,r2,c00c8fc <altera_avalon_jtag_uart_read+0x138>
 c00c8e8:	e0bffc17 	ldw	r2,-16(fp)
 c00c8ec:	10c00917 	ldw	r3,36(r2)
 c00c8f0:	e0bffc17 	ldw	r2,-16(fp)
 c00c8f4:	10800117 	ldw	r2,4(r2)
 c00c8f8:	18bff736 	bltu	r3,r2,c00c8d8 <__alt_data_end+0xfc00c8d8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 c00c8fc:	e0bffc17 	ldw	r2,-16(fp)
 c00c900:	10c00a17 	ldw	r3,40(r2)
 c00c904:	e0bff717 	ldw	r2,-36(fp)
 c00c908:	18800726 	beq	r3,r2,c00c928 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c00c90c:	e0bffe17 	ldw	r2,-8(fp)
 c00c910:	00bfb716 	blt	zero,r2,c00c7f0 <__alt_data_end+0xfc00c7f0>
 c00c914:	00000506 	br	c00c92c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 c00c918:	0001883a 	nop
 c00c91c:	00000306 	br	c00c92c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 c00c920:	0001883a 	nop
 c00c924:	00000106 	br	c00c92c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 c00c928:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 c00c92c:	e0fff517 	ldw	r3,-44(fp)
 c00c930:	e0bffd17 	ldw	r2,-12(fp)
 c00c934:	18801826 	beq	r3,r2,c00c998 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00c938:	0005303a 	rdctl	r2,status
 c00c93c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00c940:	e0fffb17 	ldw	r3,-20(fp)
 c00c944:	00bfff84 	movi	r2,-2
 c00c948:	1884703a 	and	r2,r3,r2
 c00c94c:	1001703a 	wrctl	status,r2
  
  return context;
 c00c950:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 c00c954:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c00c958:	e0bffc17 	ldw	r2,-16(fp)
 c00c95c:	10800817 	ldw	r2,32(r2)
 c00c960:	10c00054 	ori	r3,r2,1
 c00c964:	e0bffc17 	ldw	r2,-16(fp)
 c00c968:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c00c96c:	e0bffc17 	ldw	r2,-16(fp)
 c00c970:	10800017 	ldw	r2,0(r2)
 c00c974:	10800104 	addi	r2,r2,4
 c00c978:	1007883a 	mov	r3,r2
 c00c97c:	e0bffc17 	ldw	r2,-16(fp)
 c00c980:	10800817 	ldw	r2,32(r2)
 c00c984:	18800035 	stwio	r2,0(r3)
 c00c988:	e0bffa17 	ldw	r2,-24(fp)
 c00c98c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00c990:	e0bff917 	ldw	r2,-28(fp)
 c00c994:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 c00c998:	e0fff517 	ldw	r3,-44(fp)
 c00c99c:	e0bffd17 	ldw	r2,-12(fp)
 c00c9a0:	18800426 	beq	r3,r2,c00c9b4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 c00c9a4:	e0fff517 	ldw	r3,-44(fp)
 c00c9a8:	e0bffd17 	ldw	r2,-12(fp)
 c00c9ac:	1885c83a 	sub	r2,r3,r2
 c00c9b0:	00000606 	br	c00c9cc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 c00c9b4:	e0bfff17 	ldw	r2,-4(fp)
 c00c9b8:	1090000c 	andi	r2,r2,16384
 c00c9bc:	10000226 	beq	r2,zero,c00c9c8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 c00c9c0:	00bffd44 	movi	r2,-11
 c00c9c4:	00000106 	br	c00c9cc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 c00c9c8:	00bffec4 	movi	r2,-5
}
 c00c9cc:	e037883a 	mov	sp,fp
 c00c9d0:	dfc00117 	ldw	ra,4(sp)
 c00c9d4:	df000017 	ldw	fp,0(sp)
 c00c9d8:	dec00204 	addi	sp,sp,8
 c00c9dc:	f800283a 	ret

0c00c9e0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 c00c9e0:	defff304 	addi	sp,sp,-52
 c00c9e4:	dfc00c15 	stw	ra,48(sp)
 c00c9e8:	df000b15 	stw	fp,44(sp)
 c00c9ec:	df000b04 	addi	fp,sp,44
 c00c9f0:	e13ffc15 	stw	r4,-16(fp)
 c00c9f4:	e17ffd15 	stw	r5,-12(fp)
 c00c9f8:	e1bffe15 	stw	r6,-8(fp)
 c00c9fc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 c00ca00:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 c00ca04:	e0bffd17 	ldw	r2,-12(fp)
 c00ca08:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c00ca0c:	00003706 	br	c00caec <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 c00ca10:	e0bffc17 	ldw	r2,-16(fp)
 c00ca14:	10800c17 	ldw	r2,48(r2)
 c00ca18:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 c00ca1c:	e0bffc17 	ldw	r2,-16(fp)
 c00ca20:	10800d17 	ldw	r2,52(r2)
 c00ca24:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 c00ca28:	e0fff917 	ldw	r3,-28(fp)
 c00ca2c:	e0bff517 	ldw	r2,-44(fp)
 c00ca30:	1880062e 	bgeu	r3,r2,c00ca4c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 c00ca34:	e0fff517 	ldw	r3,-44(fp)
 c00ca38:	e0bff917 	ldw	r2,-28(fp)
 c00ca3c:	1885c83a 	sub	r2,r3,r2
 c00ca40:	10bfffc4 	addi	r2,r2,-1
 c00ca44:	e0bff615 	stw	r2,-40(fp)
 c00ca48:	00000b06 	br	c00ca78 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 c00ca4c:	e0bff517 	ldw	r2,-44(fp)
 c00ca50:	10000526 	beq	r2,zero,c00ca68 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 c00ca54:	00c20004 	movi	r3,2048
 c00ca58:	e0bff917 	ldw	r2,-28(fp)
 c00ca5c:	1885c83a 	sub	r2,r3,r2
 c00ca60:	e0bff615 	stw	r2,-40(fp)
 c00ca64:	00000406 	br	c00ca78 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 c00ca68:	00c1ffc4 	movi	r3,2047
 c00ca6c:	e0bff917 	ldw	r2,-28(fp)
 c00ca70:	1885c83a 	sub	r2,r3,r2
 c00ca74:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 c00ca78:	e0bff617 	ldw	r2,-40(fp)
 c00ca7c:	10001e26 	beq	r2,zero,c00caf8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 c00ca80:	e0fffe17 	ldw	r3,-8(fp)
 c00ca84:	e0bff617 	ldw	r2,-40(fp)
 c00ca88:	1880022e 	bgeu	r3,r2,c00ca94 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 c00ca8c:	e0bffe17 	ldw	r2,-8(fp)
 c00ca90:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 c00ca94:	e0bffc17 	ldw	r2,-16(fp)
 c00ca98:	10c20e04 	addi	r3,r2,2104
 c00ca9c:	e0bff917 	ldw	r2,-28(fp)
 c00caa0:	1885883a 	add	r2,r3,r2
 c00caa4:	e1bff617 	ldw	r6,-40(fp)
 c00caa8:	e17ffd17 	ldw	r5,-12(fp)
 c00caac:	1009883a 	mov	r4,r2
 c00cab0:	c0052c00 	call	c0052c0 <memcpy>
      ptr   += n;
 c00cab4:	e0fffd17 	ldw	r3,-12(fp)
 c00cab8:	e0bff617 	ldw	r2,-40(fp)
 c00cabc:	1885883a 	add	r2,r3,r2
 c00cac0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 c00cac4:	e0fffe17 	ldw	r3,-8(fp)
 c00cac8:	e0bff617 	ldw	r2,-40(fp)
 c00cacc:	1885c83a 	sub	r2,r3,r2
 c00cad0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c00cad4:	e0fff917 	ldw	r3,-28(fp)
 c00cad8:	e0bff617 	ldw	r2,-40(fp)
 c00cadc:	1885883a 	add	r2,r3,r2
 c00cae0:	10c1ffcc 	andi	r3,r2,2047
 c00cae4:	e0bffc17 	ldw	r2,-16(fp)
 c00cae8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c00caec:	e0bffe17 	ldw	r2,-8(fp)
 c00caf0:	00bfc716 	blt	zero,r2,c00ca10 <__alt_data_end+0xfc00ca10>
 c00caf4:	00000106 	br	c00cafc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 c00caf8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00cafc:	0005303a 	rdctl	r2,status
 c00cb00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00cb04:	e0fffb17 	ldw	r3,-20(fp)
 c00cb08:	00bfff84 	movi	r2,-2
 c00cb0c:	1884703a 	and	r2,r3,r2
 c00cb10:	1001703a 	wrctl	status,r2
  
  return context;
 c00cb14:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 c00cb18:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c00cb1c:	e0bffc17 	ldw	r2,-16(fp)
 c00cb20:	10800817 	ldw	r2,32(r2)
 c00cb24:	10c00094 	ori	r3,r2,2
 c00cb28:	e0bffc17 	ldw	r2,-16(fp)
 c00cb2c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c00cb30:	e0bffc17 	ldw	r2,-16(fp)
 c00cb34:	10800017 	ldw	r2,0(r2)
 c00cb38:	10800104 	addi	r2,r2,4
 c00cb3c:	1007883a 	mov	r3,r2
 c00cb40:	e0bffc17 	ldw	r2,-16(fp)
 c00cb44:	10800817 	ldw	r2,32(r2)
 c00cb48:	18800035 	stwio	r2,0(r3)
 c00cb4c:	e0bffa17 	ldw	r2,-24(fp)
 c00cb50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00cb54:	e0bff817 	ldw	r2,-32(fp)
 c00cb58:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 c00cb5c:	e0bffe17 	ldw	r2,-8(fp)
 c00cb60:	0080100e 	bge	zero,r2,c00cba4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 c00cb64:	e0bfff17 	ldw	r2,-4(fp)
 c00cb68:	1090000c 	andi	r2,r2,16384
 c00cb6c:	1000101e 	bne	r2,zero,c00cbb0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 c00cb70:	0001883a 	nop
 c00cb74:	e0bffc17 	ldw	r2,-16(fp)
 c00cb78:	10c00d17 	ldw	r3,52(r2)
 c00cb7c:	e0bff517 	ldw	r2,-44(fp)
 c00cb80:	1880051e 	bne	r3,r2,c00cb98 <altera_avalon_jtag_uart_write+0x1b8>
 c00cb84:	e0bffc17 	ldw	r2,-16(fp)
 c00cb88:	10c00917 	ldw	r3,36(r2)
 c00cb8c:	e0bffc17 	ldw	r2,-16(fp)
 c00cb90:	10800117 	ldw	r2,4(r2)
 c00cb94:	18bff736 	bltu	r3,r2,c00cb74 <__alt_data_end+0xfc00cb74>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 c00cb98:	e0bffc17 	ldw	r2,-16(fp)
 c00cb9c:	10800917 	ldw	r2,36(r2)
 c00cba0:	1000051e 	bne	r2,zero,c00cbb8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 c00cba4:	e0bffe17 	ldw	r2,-8(fp)
 c00cba8:	00bfd016 	blt	zero,r2,c00caec <__alt_data_end+0xfc00caec>
 c00cbac:	00000306 	br	c00cbbc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 c00cbb0:	0001883a 	nop
 c00cbb4:	00000106 	br	c00cbbc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 c00cbb8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 c00cbbc:	e0fffd17 	ldw	r3,-12(fp)
 c00cbc0:	e0bff717 	ldw	r2,-36(fp)
 c00cbc4:	18800426 	beq	r3,r2,c00cbd8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 c00cbc8:	e0fffd17 	ldw	r3,-12(fp)
 c00cbcc:	e0bff717 	ldw	r2,-36(fp)
 c00cbd0:	1885c83a 	sub	r2,r3,r2
 c00cbd4:	00000606 	br	c00cbf0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 c00cbd8:	e0bfff17 	ldw	r2,-4(fp)
 c00cbdc:	1090000c 	andi	r2,r2,16384
 c00cbe0:	10000226 	beq	r2,zero,c00cbec <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 c00cbe4:	00bffd44 	movi	r2,-11
 c00cbe8:	00000106 	br	c00cbf0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 c00cbec:	00bffec4 	movi	r2,-5
}
 c00cbf0:	e037883a 	mov	sp,fp
 c00cbf4:	dfc00117 	ldw	ra,4(sp)
 c00cbf8:	df000017 	ldw	fp,0(sp)
 c00cbfc:	dec00204 	addi	sp,sp,8
 c00cc00:	f800283a 	ret

0c00cc04 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 c00cc04:	defffa04 	addi	sp,sp,-24
 c00cc08:	dfc00515 	stw	ra,20(sp)
 c00cc0c:	df000415 	stw	fp,16(sp)
 c00cc10:	df000404 	addi	fp,sp,16
 c00cc14:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 c00cc18:	0007883a 	mov	r3,zero
 c00cc1c:	e0bfff17 	ldw	r2,-4(fp)
 c00cc20:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 c00cc24:	e0bfff17 	ldw	r2,-4(fp)
 c00cc28:	10800104 	addi	r2,r2,4
 c00cc2c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00cc30:	0005303a 	rdctl	r2,status
 c00cc34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00cc38:	e0fffd17 	ldw	r3,-12(fp)
 c00cc3c:	00bfff84 	movi	r2,-2
 c00cc40:	1884703a 	and	r2,r3,r2
 c00cc44:	1001703a 	wrctl	status,r2
  
  return context;
 c00cc48:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 c00cc4c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 c00cc50:	c00da400 	call	c00da40 <alt_tick>
 c00cc54:	e0bffc17 	ldw	r2,-16(fp)
 c00cc58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00cc5c:	e0bffe17 	ldw	r2,-8(fp)
 c00cc60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 c00cc64:	0001883a 	nop
 c00cc68:	e037883a 	mov	sp,fp
 c00cc6c:	dfc00117 	ldw	ra,4(sp)
 c00cc70:	df000017 	ldw	fp,0(sp)
 c00cc74:	dec00204 	addi	sp,sp,8
 c00cc78:	f800283a 	ret

0c00cc7c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 c00cc7c:	defff804 	addi	sp,sp,-32
 c00cc80:	dfc00715 	stw	ra,28(sp)
 c00cc84:	df000615 	stw	fp,24(sp)
 c00cc88:	df000604 	addi	fp,sp,24
 c00cc8c:	e13ffc15 	stw	r4,-16(fp)
 c00cc90:	e17ffd15 	stw	r5,-12(fp)
 c00cc94:	e1bffe15 	stw	r6,-8(fp)
 c00cc98:	e1ffff15 	stw	r7,-4(fp)
 c00cc9c:	e0bfff17 	ldw	r2,-4(fp)
 c00cca0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 c00cca4:	d0a79017 	ldw	r2,-25024(gp)
 c00cca8:	1000021e 	bne	r2,zero,c00ccb4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 c00ccac:	e0bffb17 	ldw	r2,-20(fp)
 c00ccb0:	d0a79015 	stw	r2,-25024(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 c00ccb4:	e0bffc17 	ldw	r2,-16(fp)
 c00ccb8:	10800104 	addi	r2,r2,4
 c00ccbc:	00c001c4 	movi	r3,7
 c00ccc0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 c00ccc4:	d8000015 	stw	zero,0(sp)
 c00ccc8:	e1fffc17 	ldw	r7,-16(fp)
 c00cccc:	01830074 	movhi	r6,3073
 c00ccd0:	31b30104 	addi	r6,r6,-13308
 c00ccd4:	e17ffe17 	ldw	r5,-8(fp)
 c00ccd8:	e13ffd17 	ldw	r4,-12(fp)
 c00ccdc:	c00d29c0 	call	c00d29c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 c00cce0:	0001883a 	nop
 c00cce4:	e037883a 	mov	sp,fp
 c00cce8:	dfc00117 	ldw	ra,4(sp)
 c00ccec:	df000017 	ldw	fp,0(sp)
 c00ccf0:	dec00204 	addi	sp,sp,8
 c00ccf4:	f800283a 	ret

0c00ccf8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 c00ccf8:	defff504 	addi	sp,sp,-44
 c00ccfc:	df000a15 	stw	fp,40(sp)
 c00cd00:	df000a04 	addi	fp,sp,40
 c00cd04:	e13ffc15 	stw	r4,-16(fp)
 c00cd08:	e17ffd15 	stw	r5,-12(fp)
 c00cd0c:	e1bffe15 	stw	r6,-8(fp)
 c00cd10:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 c00cd14:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c00cd18:	d0a79017 	ldw	r2,-25024(gp)
  
  if (alt_ticks_per_second ())
 c00cd1c:	10003c26 	beq	r2,zero,c00ce10 <alt_alarm_start+0x118>
  {
    if (alarm)
 c00cd20:	e0bffc17 	ldw	r2,-16(fp)
 c00cd24:	10003826 	beq	r2,zero,c00ce08 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 c00cd28:	e0bffc17 	ldw	r2,-16(fp)
 c00cd2c:	e0fffe17 	ldw	r3,-8(fp)
 c00cd30:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 c00cd34:	e0bffc17 	ldw	r2,-16(fp)
 c00cd38:	e0ffff17 	ldw	r3,-4(fp)
 c00cd3c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00cd40:	0005303a 	rdctl	r2,status
 c00cd44:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00cd48:	e0fff917 	ldw	r3,-28(fp)
 c00cd4c:	00bfff84 	movi	r2,-2
 c00cd50:	1884703a 	and	r2,r3,r2
 c00cd54:	1001703a 	wrctl	status,r2
  
  return context;
 c00cd58:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 c00cd5c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c00cd60:	d0a79117 	ldw	r2,-25020(gp)
      
      current_nticks = alt_nticks();
 c00cd64:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 c00cd68:	e0fffd17 	ldw	r3,-12(fp)
 c00cd6c:	e0bff617 	ldw	r2,-40(fp)
 c00cd70:	1885883a 	add	r2,r3,r2
 c00cd74:	10c00044 	addi	r3,r2,1
 c00cd78:	e0bffc17 	ldw	r2,-16(fp)
 c00cd7c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 c00cd80:	e0bffc17 	ldw	r2,-16(fp)
 c00cd84:	10c00217 	ldw	r3,8(r2)
 c00cd88:	e0bff617 	ldw	r2,-40(fp)
 c00cd8c:	1880042e 	bgeu	r3,r2,c00cda0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 c00cd90:	e0bffc17 	ldw	r2,-16(fp)
 c00cd94:	00c00044 	movi	r3,1
 c00cd98:	10c00405 	stb	r3,16(r2)
 c00cd9c:	00000206 	br	c00cda8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 c00cda0:	e0bffc17 	ldw	r2,-16(fp)
 c00cda4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 c00cda8:	e0bffc17 	ldw	r2,-16(fp)
 c00cdac:	d0e00f04 	addi	r3,gp,-32708
 c00cdb0:	e0fffa15 	stw	r3,-24(fp)
 c00cdb4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c00cdb8:	e0bffb17 	ldw	r2,-20(fp)
 c00cdbc:	e0fffa17 	ldw	r3,-24(fp)
 c00cdc0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 c00cdc4:	e0bffa17 	ldw	r2,-24(fp)
 c00cdc8:	10c00017 	ldw	r3,0(r2)
 c00cdcc:	e0bffb17 	ldw	r2,-20(fp)
 c00cdd0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c00cdd4:	e0bffa17 	ldw	r2,-24(fp)
 c00cdd8:	10800017 	ldw	r2,0(r2)
 c00cddc:	e0fffb17 	ldw	r3,-20(fp)
 c00cde0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 c00cde4:	e0bffa17 	ldw	r2,-24(fp)
 c00cde8:	e0fffb17 	ldw	r3,-20(fp)
 c00cdec:	10c00015 	stw	r3,0(r2)
 c00cdf0:	e0bff817 	ldw	r2,-32(fp)
 c00cdf4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00cdf8:	e0bff717 	ldw	r2,-36(fp)
 c00cdfc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 c00ce00:	0005883a 	mov	r2,zero
 c00ce04:	00000306 	br	c00ce14 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 c00ce08:	00bffa84 	movi	r2,-22
 c00ce0c:	00000106 	br	c00ce14 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 c00ce10:	00bfde84 	movi	r2,-134
  }
}
 c00ce14:	e037883a 	mov	sp,fp
 c00ce18:	df000017 	ldw	fp,0(sp)
 c00ce1c:	dec00104 	addi	sp,sp,4
 c00ce20:	f800283a 	ret

0c00ce24 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 c00ce24:	defffa04 	addi	sp,sp,-24
 c00ce28:	dfc00515 	stw	ra,20(sp)
 c00ce2c:	df000415 	stw	fp,16(sp)
 c00ce30:	df000404 	addi	fp,sp,16
 c00ce34:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 c00ce38:	00800244 	movi	r2,9
 c00ce3c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 c00ce40:	014003f4 	movhi	r5,15
 c00ce44:	29509004 	addi	r5,r5,16960
 c00ce48:	e13ffd17 	ldw	r4,-12(fp)
 c00ce4c:	c000b880 	call	c000b88 <__mulsi3>
 c00ce50:	100b883a 	mov	r5,r2
 c00ce54:	0100bef4 	movhi	r4,763
 c00ce58:	213c2004 	addi	r4,r4,-3968
 c00ce5c:	c000acc0 	call	c000acc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 c00ce60:	100b883a 	mov	r5,r2
 c00ce64:	01200034 	movhi	r4,32768
 c00ce68:	213fffc4 	addi	r4,r4,-1
 c00ce6c:	c000acc0 	call	c000acc <__udivsi3>
 c00ce70:	100b883a 	mov	r5,r2
 c00ce74:	e13fff17 	ldw	r4,-4(fp)
 c00ce78:	c000acc0 	call	c000acc <__udivsi3>
 c00ce7c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 c00ce80:	e0bffe17 	ldw	r2,-8(fp)
 c00ce84:	10002a26 	beq	r2,zero,c00cf30 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 c00ce88:	e03ffc15 	stw	zero,-16(fp)
 c00ce8c:	00001706 	br	c00ceec <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 c00ce90:	00a00034 	movhi	r2,32768
 c00ce94:	10bfffc4 	addi	r2,r2,-1
 c00ce98:	10bfffc4 	addi	r2,r2,-1
 c00ce9c:	103ffe1e 	bne	r2,zero,c00ce98 <__alt_data_end+0xfc00ce98>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 c00cea0:	014003f4 	movhi	r5,15
 c00cea4:	29509004 	addi	r5,r5,16960
 c00cea8:	e13ffd17 	ldw	r4,-12(fp)
 c00ceac:	c000b880 	call	c000b88 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 c00ceb0:	100b883a 	mov	r5,r2
 c00ceb4:	0100bef4 	movhi	r4,763
 c00ceb8:	213c2004 	addi	r4,r4,-3968
 c00cebc:	c000acc0 	call	c000acc <__udivsi3>
 c00cec0:	100b883a 	mov	r5,r2
 c00cec4:	01200034 	movhi	r4,32768
 c00cec8:	213fffc4 	addi	r4,r4,-1
 c00cecc:	c000acc0 	call	c000acc <__udivsi3>
 c00ced0:	1007883a 	mov	r3,r2
 c00ced4:	e0bfff17 	ldw	r2,-4(fp)
 c00ced8:	10c5c83a 	sub	r2,r2,r3
 c00cedc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 c00cee0:	e0bffc17 	ldw	r2,-16(fp)
 c00cee4:	10800044 	addi	r2,r2,1
 c00cee8:	e0bffc15 	stw	r2,-16(fp)
 c00ceec:	e0fffc17 	ldw	r3,-16(fp)
 c00cef0:	e0bffe17 	ldw	r2,-8(fp)
 c00cef4:	18bfe616 	blt	r3,r2,c00ce90 <__alt_data_end+0xfc00ce90>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 c00cef8:	014003f4 	movhi	r5,15
 c00cefc:	29509004 	addi	r5,r5,16960
 c00cf00:	e13ffd17 	ldw	r4,-12(fp)
 c00cf04:	c000b880 	call	c000b88 <__mulsi3>
 c00cf08:	100b883a 	mov	r5,r2
 c00cf0c:	0100bef4 	movhi	r4,763
 c00cf10:	213c2004 	addi	r4,r4,-3968
 c00cf14:	c000acc0 	call	c000acc <__udivsi3>
 c00cf18:	e17fff17 	ldw	r5,-4(fp)
 c00cf1c:	1009883a 	mov	r4,r2
 c00cf20:	c000b880 	call	c000b88 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c00cf24:	10bfffc4 	addi	r2,r2,-1
 c00cf28:	103ffe1e 	bne	r2,zero,c00cf24 <__alt_data_end+0xfc00cf24>
 c00cf2c:	00000d06 	br	c00cf64 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 c00cf30:	014003f4 	movhi	r5,15
 c00cf34:	29509004 	addi	r5,r5,16960
 c00cf38:	e13ffd17 	ldw	r4,-12(fp)
 c00cf3c:	c000b880 	call	c000b88 <__mulsi3>
 c00cf40:	100b883a 	mov	r5,r2
 c00cf44:	0100bef4 	movhi	r4,763
 c00cf48:	213c2004 	addi	r4,r4,-3968
 c00cf4c:	c000acc0 	call	c000acc <__udivsi3>
 c00cf50:	e17fff17 	ldw	r5,-4(fp)
 c00cf54:	1009883a 	mov	r4,r2
 c00cf58:	c000b880 	call	c000b88 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c00cf5c:	10bfffc4 	addi	r2,r2,-1
 c00cf60:	00bffe16 	blt	zero,r2,c00cf5c <__alt_data_end+0xfc00cf5c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 c00cf64:	0005883a 	mov	r2,zero
}
 c00cf68:	e037883a 	mov	sp,fp
 c00cf6c:	dfc00117 	ldw	ra,4(sp)
 c00cf70:	df000017 	ldw	fp,0(sp)
 c00cf74:	dec00204 	addi	sp,sp,8
 c00cf78:	f800283a 	ret

0c00cf7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00cf7c:	defffe04 	addi	sp,sp,-8
 c00cf80:	dfc00115 	stw	ra,4(sp)
 c00cf84:	df000015 	stw	fp,0(sp)
 c00cf88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00cf8c:	d0a00d17 	ldw	r2,-32716(gp)
 c00cf90:	10000326 	beq	r2,zero,c00cfa0 <alt_get_errno+0x24>
 c00cf94:	d0a00d17 	ldw	r2,-32716(gp)
 c00cf98:	103ee83a 	callr	r2
 c00cf9c:	00000106 	br	c00cfa4 <alt_get_errno+0x28>
 c00cfa0:	d0a78b04 	addi	r2,gp,-25044
}
 c00cfa4:	e037883a 	mov	sp,fp
 c00cfa8:	dfc00117 	ldw	ra,4(sp)
 c00cfac:	df000017 	ldw	fp,0(sp)
 c00cfb0:	dec00204 	addi	sp,sp,8
 c00cfb4:	f800283a 	ret

0c00cfb8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 c00cfb8:	defffb04 	addi	sp,sp,-20
 c00cfbc:	dfc00415 	stw	ra,16(sp)
 c00cfc0:	df000315 	stw	fp,12(sp)
 c00cfc4:	df000304 	addi	fp,sp,12
 c00cfc8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 c00cfcc:	e0bfff17 	ldw	r2,-4(fp)
 c00cfd0:	10000816 	blt	r2,zero,c00cff4 <close+0x3c>
 c00cfd4:	01400304 	movi	r5,12
 c00cfd8:	e13fff17 	ldw	r4,-4(fp)
 c00cfdc:	c000b880 	call	c000b88 <__mulsi3>
 c00cfe0:	1007883a 	mov	r3,r2
 c00cfe4:	00830074 	movhi	r2,3073
 c00cfe8:	10805504 	addi	r2,r2,340
 c00cfec:	1885883a 	add	r2,r3,r2
 c00cff0:	00000106 	br	c00cff8 <close+0x40>
 c00cff4:	0005883a 	mov	r2,zero
 c00cff8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 c00cffc:	e0bffd17 	ldw	r2,-12(fp)
 c00d000:	10001926 	beq	r2,zero,c00d068 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 c00d004:	e0bffd17 	ldw	r2,-12(fp)
 c00d008:	10800017 	ldw	r2,0(r2)
 c00d00c:	10800417 	ldw	r2,16(r2)
 c00d010:	10000626 	beq	r2,zero,c00d02c <close+0x74>
 c00d014:	e0bffd17 	ldw	r2,-12(fp)
 c00d018:	10800017 	ldw	r2,0(r2)
 c00d01c:	10800417 	ldw	r2,16(r2)
 c00d020:	e13ffd17 	ldw	r4,-12(fp)
 c00d024:	103ee83a 	callr	r2
 c00d028:	00000106 	br	c00d030 <close+0x78>
 c00d02c:	0005883a 	mov	r2,zero
 c00d030:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 c00d034:	e13fff17 	ldw	r4,-4(fp)
 c00d038:	c00d9200 	call	c00d920 <alt_release_fd>
    if (rval < 0)
 c00d03c:	e0bffe17 	ldw	r2,-8(fp)
 c00d040:	1000070e 	bge	r2,zero,c00d060 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 c00d044:	c00cf7c0 	call	c00cf7c <alt_get_errno>
 c00d048:	1007883a 	mov	r3,r2
 c00d04c:	e0bffe17 	ldw	r2,-8(fp)
 c00d050:	0085c83a 	sub	r2,zero,r2
 c00d054:	18800015 	stw	r2,0(r3)
      return -1;
 c00d058:	00bfffc4 	movi	r2,-1
 c00d05c:	00000706 	br	c00d07c <close+0xc4>
    }
    return 0;
 c00d060:	0005883a 	mov	r2,zero
 c00d064:	00000506 	br	c00d07c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c00d068:	c00cf7c0 	call	c00cf7c <alt_get_errno>
 c00d06c:	1007883a 	mov	r3,r2
 c00d070:	00801444 	movi	r2,81
 c00d074:	18800015 	stw	r2,0(r3)
    return -1;
 c00d078:	00bfffc4 	movi	r2,-1
  }
}
 c00d07c:	e037883a 	mov	sp,fp
 c00d080:	dfc00117 	ldw	ra,4(sp)
 c00d084:	df000017 	ldw	fp,0(sp)
 c00d088:	dec00204 	addi	sp,sp,8
 c00d08c:	f800283a 	ret

0c00d090 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 c00d090:	deffff04 	addi	sp,sp,-4
 c00d094:	df000015 	stw	fp,0(sp)
 c00d098:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 c00d09c:	0001883a 	nop
 c00d0a0:	e037883a 	mov	sp,fp
 c00d0a4:	df000017 	ldw	fp,0(sp)
 c00d0a8:	dec00104 	addi	sp,sp,4
 c00d0ac:	f800283a 	ret

0c00d0b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 c00d0b0:	defffc04 	addi	sp,sp,-16
 c00d0b4:	df000315 	stw	fp,12(sp)
 c00d0b8:	df000304 	addi	fp,sp,12
 c00d0bc:	e13ffd15 	stw	r4,-12(fp)
 c00d0c0:	e17ffe15 	stw	r5,-8(fp)
 c00d0c4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 c00d0c8:	e0bfff17 	ldw	r2,-4(fp)
}
 c00d0cc:	e037883a 	mov	sp,fp
 c00d0d0:	df000017 	ldw	fp,0(sp)
 c00d0d4:	dec00104 	addi	sp,sp,4
 c00d0d8:	f800283a 	ret

0c00d0dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00d0dc:	defffe04 	addi	sp,sp,-8
 c00d0e0:	dfc00115 	stw	ra,4(sp)
 c00d0e4:	df000015 	stw	fp,0(sp)
 c00d0e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00d0ec:	d0a00d17 	ldw	r2,-32716(gp)
 c00d0f0:	10000326 	beq	r2,zero,c00d100 <alt_get_errno+0x24>
 c00d0f4:	d0a00d17 	ldw	r2,-32716(gp)
 c00d0f8:	103ee83a 	callr	r2
 c00d0fc:	00000106 	br	c00d104 <alt_get_errno+0x28>
 c00d100:	d0a78b04 	addi	r2,gp,-25044
}
 c00d104:	e037883a 	mov	sp,fp
 c00d108:	dfc00117 	ldw	ra,4(sp)
 c00d10c:	df000017 	ldw	fp,0(sp)
 c00d110:	dec00204 	addi	sp,sp,8
 c00d114:	f800283a 	ret

0c00d118 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 c00d118:	defffa04 	addi	sp,sp,-24
 c00d11c:	dfc00515 	stw	ra,20(sp)
 c00d120:	df000415 	stw	fp,16(sp)
 c00d124:	df000404 	addi	fp,sp,16
 c00d128:	e13ffe15 	stw	r4,-8(fp)
 c00d12c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 c00d130:	e0bffe17 	ldw	r2,-8(fp)
 c00d134:	10000326 	beq	r2,zero,c00d144 <alt_dev_llist_insert+0x2c>
 c00d138:	e0bffe17 	ldw	r2,-8(fp)
 c00d13c:	10800217 	ldw	r2,8(r2)
 c00d140:	1000061e 	bne	r2,zero,c00d15c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 c00d144:	c00d0dc0 	call	c00d0dc <alt_get_errno>
 c00d148:	1007883a 	mov	r3,r2
 c00d14c:	00800584 	movi	r2,22
 c00d150:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 c00d154:	00bffa84 	movi	r2,-22
 c00d158:	00001306 	br	c00d1a8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 c00d15c:	e0bffe17 	ldw	r2,-8(fp)
 c00d160:	e0ffff17 	ldw	r3,-4(fp)
 c00d164:	e0fffc15 	stw	r3,-16(fp)
 c00d168:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c00d16c:	e0bffd17 	ldw	r2,-12(fp)
 c00d170:	e0fffc17 	ldw	r3,-16(fp)
 c00d174:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 c00d178:	e0bffc17 	ldw	r2,-16(fp)
 c00d17c:	10c00017 	ldw	r3,0(r2)
 c00d180:	e0bffd17 	ldw	r2,-12(fp)
 c00d184:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c00d188:	e0bffc17 	ldw	r2,-16(fp)
 c00d18c:	10800017 	ldw	r2,0(r2)
 c00d190:	e0fffd17 	ldw	r3,-12(fp)
 c00d194:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 c00d198:	e0bffc17 	ldw	r2,-16(fp)
 c00d19c:	e0fffd17 	ldw	r3,-12(fp)
 c00d1a0:	10c00015 	stw	r3,0(r2)

  return 0;  
 c00d1a4:	0005883a 	mov	r2,zero
}
 c00d1a8:	e037883a 	mov	sp,fp
 c00d1ac:	dfc00117 	ldw	ra,4(sp)
 c00d1b0:	df000017 	ldw	fp,0(sp)
 c00d1b4:	dec00204 	addi	sp,sp,8
 c00d1b8:	f800283a 	ret

0c00d1bc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 c00d1bc:	defffd04 	addi	sp,sp,-12
 c00d1c0:	dfc00215 	stw	ra,8(sp)
 c00d1c4:	df000115 	stw	fp,4(sp)
 c00d1c8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c00d1cc:	00830074 	movhi	r2,3073
 c00d1d0:	10b87d04 	addi	r2,r2,-7692
 c00d1d4:	e0bfff15 	stw	r2,-4(fp)
 c00d1d8:	00000606 	br	c00d1f4 <_do_ctors+0x38>
        (*ctor) (); 
 c00d1dc:	e0bfff17 	ldw	r2,-4(fp)
 c00d1e0:	10800017 	ldw	r2,0(r2)
 c00d1e4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c00d1e8:	e0bfff17 	ldw	r2,-4(fp)
 c00d1ec:	10bfff04 	addi	r2,r2,-4
 c00d1f0:	e0bfff15 	stw	r2,-4(fp)
 c00d1f4:	e0ffff17 	ldw	r3,-4(fp)
 c00d1f8:	00830074 	movhi	r2,3073
 c00d1fc:	10b87e04 	addi	r2,r2,-7688
 c00d200:	18bff62e 	bgeu	r3,r2,c00d1dc <__alt_data_end+0xfc00d1dc>
        (*ctor) (); 
}
 c00d204:	0001883a 	nop
 c00d208:	e037883a 	mov	sp,fp
 c00d20c:	dfc00117 	ldw	ra,4(sp)
 c00d210:	df000017 	ldw	fp,0(sp)
 c00d214:	dec00204 	addi	sp,sp,8
 c00d218:	f800283a 	ret

0c00d21c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 c00d21c:	defffd04 	addi	sp,sp,-12
 c00d220:	dfc00215 	stw	ra,8(sp)
 c00d224:	df000115 	stw	fp,4(sp)
 c00d228:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c00d22c:	00830074 	movhi	r2,3073
 c00d230:	10b87d04 	addi	r2,r2,-7692
 c00d234:	e0bfff15 	stw	r2,-4(fp)
 c00d238:	00000606 	br	c00d254 <_do_dtors+0x38>
        (*dtor) (); 
 c00d23c:	e0bfff17 	ldw	r2,-4(fp)
 c00d240:	10800017 	ldw	r2,0(r2)
 c00d244:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c00d248:	e0bfff17 	ldw	r2,-4(fp)
 c00d24c:	10bfff04 	addi	r2,r2,-4
 c00d250:	e0bfff15 	stw	r2,-4(fp)
 c00d254:	e0ffff17 	ldw	r3,-4(fp)
 c00d258:	00830074 	movhi	r2,3073
 c00d25c:	10b87e04 	addi	r2,r2,-7688
 c00d260:	18bff62e 	bgeu	r3,r2,c00d23c <__alt_data_end+0xfc00d23c>
        (*dtor) (); 
}
 c00d264:	0001883a 	nop
 c00d268:	e037883a 	mov	sp,fp
 c00d26c:	dfc00117 	ldw	ra,4(sp)
 c00d270:	df000017 	ldw	fp,0(sp)
 c00d274:	dec00204 	addi	sp,sp,8
 c00d278:	f800283a 	ret

0c00d27c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 c00d27c:	deffff04 	addi	sp,sp,-4
 c00d280:	df000015 	stw	fp,0(sp)
 c00d284:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 c00d288:	0001883a 	nop
 c00d28c:	e037883a 	mov	sp,fp
 c00d290:	df000017 	ldw	fp,0(sp)
 c00d294:	dec00104 	addi	sp,sp,4
 c00d298:	f800283a 	ret

0c00d29c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c00d29c:	defff904 	addi	sp,sp,-28
 c00d2a0:	dfc00615 	stw	ra,24(sp)
 c00d2a4:	df000515 	stw	fp,20(sp)
 c00d2a8:	df000504 	addi	fp,sp,20
 c00d2ac:	e13ffc15 	stw	r4,-16(fp)
 c00d2b0:	e17ffd15 	stw	r5,-12(fp)
 c00d2b4:	e1bffe15 	stw	r6,-8(fp)
 c00d2b8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 c00d2bc:	e0800217 	ldw	r2,8(fp)
 c00d2c0:	d8800015 	stw	r2,0(sp)
 c00d2c4:	e1ffff17 	ldw	r7,-4(fp)
 c00d2c8:	e1bffe17 	ldw	r6,-8(fp)
 c00d2cc:	e17ffd17 	ldw	r5,-12(fp)
 c00d2d0:	e13ffc17 	ldw	r4,-16(fp)
 c00d2d4:	c00d44c0 	call	c00d44c <alt_iic_isr_register>
}  
 c00d2d8:	e037883a 	mov	sp,fp
 c00d2dc:	dfc00117 	ldw	ra,4(sp)
 c00d2e0:	df000017 	ldw	fp,0(sp)
 c00d2e4:	dec00204 	addi	sp,sp,8
 c00d2e8:	f800283a 	ret

0c00d2ec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 c00d2ec:	defff904 	addi	sp,sp,-28
 c00d2f0:	df000615 	stw	fp,24(sp)
 c00d2f4:	df000604 	addi	fp,sp,24
 c00d2f8:	e13ffe15 	stw	r4,-8(fp)
 c00d2fc:	e17fff15 	stw	r5,-4(fp)
 c00d300:	e0bfff17 	ldw	r2,-4(fp)
 c00d304:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00d308:	0005303a 	rdctl	r2,status
 c00d30c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00d310:	e0fffb17 	ldw	r3,-20(fp)
 c00d314:	00bfff84 	movi	r2,-2
 c00d318:	1884703a 	and	r2,r3,r2
 c00d31c:	1001703a 	wrctl	status,r2
  
  return context;
 c00d320:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c00d324:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 c00d328:	00c00044 	movi	r3,1
 c00d32c:	e0bffa17 	ldw	r2,-24(fp)
 c00d330:	1884983a 	sll	r2,r3,r2
 c00d334:	1007883a 	mov	r3,r2
 c00d338:	d0a78f17 	ldw	r2,-25028(gp)
 c00d33c:	1884b03a 	or	r2,r3,r2
 c00d340:	d0a78f15 	stw	r2,-25028(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c00d344:	d0a78f17 	ldw	r2,-25028(gp)
 c00d348:	100170fa 	wrctl	ienable,r2
 c00d34c:	e0bffc17 	ldw	r2,-16(fp)
 c00d350:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00d354:	e0bffd17 	ldw	r2,-12(fp)
 c00d358:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c00d35c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 c00d360:	0001883a 	nop
}
 c00d364:	e037883a 	mov	sp,fp
 c00d368:	df000017 	ldw	fp,0(sp)
 c00d36c:	dec00104 	addi	sp,sp,4
 c00d370:	f800283a 	ret

0c00d374 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 c00d374:	defff904 	addi	sp,sp,-28
 c00d378:	df000615 	stw	fp,24(sp)
 c00d37c:	df000604 	addi	fp,sp,24
 c00d380:	e13ffe15 	stw	r4,-8(fp)
 c00d384:	e17fff15 	stw	r5,-4(fp)
 c00d388:	e0bfff17 	ldw	r2,-4(fp)
 c00d38c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00d390:	0005303a 	rdctl	r2,status
 c00d394:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00d398:	e0fffb17 	ldw	r3,-20(fp)
 c00d39c:	00bfff84 	movi	r2,-2
 c00d3a0:	1884703a 	and	r2,r3,r2
 c00d3a4:	1001703a 	wrctl	status,r2
  
  return context;
 c00d3a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c00d3ac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 c00d3b0:	00c00044 	movi	r3,1
 c00d3b4:	e0bffa17 	ldw	r2,-24(fp)
 c00d3b8:	1884983a 	sll	r2,r3,r2
 c00d3bc:	0084303a 	nor	r2,zero,r2
 c00d3c0:	1007883a 	mov	r3,r2
 c00d3c4:	d0a78f17 	ldw	r2,-25028(gp)
 c00d3c8:	1884703a 	and	r2,r3,r2
 c00d3cc:	d0a78f15 	stw	r2,-25028(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c00d3d0:	d0a78f17 	ldw	r2,-25028(gp)
 c00d3d4:	100170fa 	wrctl	ienable,r2
 c00d3d8:	e0bffc17 	ldw	r2,-16(fp)
 c00d3dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00d3e0:	e0bffd17 	ldw	r2,-12(fp)
 c00d3e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c00d3e8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 c00d3ec:	0001883a 	nop
}
 c00d3f0:	e037883a 	mov	sp,fp
 c00d3f4:	df000017 	ldw	fp,0(sp)
 c00d3f8:	dec00104 	addi	sp,sp,4
 c00d3fc:	f800283a 	ret

0c00d400 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 c00d400:	defffc04 	addi	sp,sp,-16
 c00d404:	df000315 	stw	fp,12(sp)
 c00d408:	df000304 	addi	fp,sp,12
 c00d40c:	e13ffe15 	stw	r4,-8(fp)
 c00d410:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 c00d414:	000530fa 	rdctl	r2,ienable
 c00d418:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 c00d41c:	00c00044 	movi	r3,1
 c00d420:	e0bfff17 	ldw	r2,-4(fp)
 c00d424:	1884983a 	sll	r2,r3,r2
 c00d428:	1007883a 	mov	r3,r2
 c00d42c:	e0bffd17 	ldw	r2,-12(fp)
 c00d430:	1884703a 	and	r2,r3,r2
 c00d434:	1004c03a 	cmpne	r2,r2,zero
 c00d438:	10803fcc 	andi	r2,r2,255
}
 c00d43c:	e037883a 	mov	sp,fp
 c00d440:	df000017 	ldw	fp,0(sp)
 c00d444:	dec00104 	addi	sp,sp,4
 c00d448:	f800283a 	ret

0c00d44c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c00d44c:	defff504 	addi	sp,sp,-44
 c00d450:	dfc00a15 	stw	ra,40(sp)
 c00d454:	df000915 	stw	fp,36(sp)
 c00d458:	df000904 	addi	fp,sp,36
 c00d45c:	e13ffc15 	stw	r4,-16(fp)
 c00d460:	e17ffd15 	stw	r5,-12(fp)
 c00d464:	e1bffe15 	stw	r6,-8(fp)
 c00d468:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 c00d46c:	00bffa84 	movi	r2,-22
 c00d470:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 c00d474:	e0bffd17 	ldw	r2,-12(fp)
 c00d478:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 c00d47c:	e0bff817 	ldw	r2,-32(fp)
 c00d480:	10800808 	cmpgei	r2,r2,32
 c00d484:	1000271e 	bne	r2,zero,c00d524 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00d488:	0005303a 	rdctl	r2,status
 c00d48c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00d490:	e0fffb17 	ldw	r3,-20(fp)
 c00d494:	00bfff84 	movi	r2,-2
 c00d498:	1884703a 	and	r2,r3,r2
 c00d49c:	1001703a 	wrctl	status,r2
  
  return context;
 c00d4a0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 c00d4a4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 c00d4a8:	00830074 	movhi	r2,3073
 c00d4ac:	10885204 	addi	r2,r2,8520
 c00d4b0:	e0fff817 	ldw	r3,-32(fp)
 c00d4b4:	180690fa 	slli	r3,r3,3
 c00d4b8:	10c5883a 	add	r2,r2,r3
 c00d4bc:	e0fffe17 	ldw	r3,-8(fp)
 c00d4c0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 c00d4c4:	00830074 	movhi	r2,3073
 c00d4c8:	10885204 	addi	r2,r2,8520
 c00d4cc:	e0fff817 	ldw	r3,-32(fp)
 c00d4d0:	180690fa 	slli	r3,r3,3
 c00d4d4:	10c5883a 	add	r2,r2,r3
 c00d4d8:	10800104 	addi	r2,r2,4
 c00d4dc:	e0ffff17 	ldw	r3,-4(fp)
 c00d4e0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 c00d4e4:	e0bffe17 	ldw	r2,-8(fp)
 c00d4e8:	10000526 	beq	r2,zero,c00d500 <alt_iic_isr_register+0xb4>
 c00d4ec:	e0bff817 	ldw	r2,-32(fp)
 c00d4f0:	100b883a 	mov	r5,r2
 c00d4f4:	e13ffc17 	ldw	r4,-16(fp)
 c00d4f8:	c00d2ec0 	call	c00d2ec <alt_ic_irq_enable>
 c00d4fc:	00000406 	br	c00d510 <alt_iic_isr_register+0xc4>
 c00d500:	e0bff817 	ldw	r2,-32(fp)
 c00d504:	100b883a 	mov	r5,r2
 c00d508:	e13ffc17 	ldw	r4,-16(fp)
 c00d50c:	c00d3740 	call	c00d374 <alt_ic_irq_disable>
 c00d510:	e0bff715 	stw	r2,-36(fp)
 c00d514:	e0bffa17 	ldw	r2,-24(fp)
 c00d518:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00d51c:	e0bff917 	ldw	r2,-28(fp)
 c00d520:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 c00d524:	e0bff717 	ldw	r2,-36(fp)
}
 c00d528:	e037883a 	mov	sp,fp
 c00d52c:	dfc00117 	ldw	ra,4(sp)
 c00d530:	df000017 	ldw	fp,0(sp)
 c00d534:	dec00204 	addi	sp,sp,8
 c00d538:	f800283a 	ret

0c00d53c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 c00d53c:	defff804 	addi	sp,sp,-32
 c00d540:	dfc00715 	stw	ra,28(sp)
 c00d544:	df000615 	stw	fp,24(sp)
 c00d548:	dc000515 	stw	r16,20(sp)
 c00d54c:	df000604 	addi	fp,sp,24
 c00d550:	e13ffb15 	stw	r4,-20(fp)
 c00d554:	e17ffc15 	stw	r5,-16(fp)
 c00d558:	e1bffd15 	stw	r6,-12(fp)
 c00d55c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 c00d560:	e1bffe17 	ldw	r6,-8(fp)
 c00d564:	e17ffd17 	ldw	r5,-12(fp)
 c00d568:	e13ffc17 	ldw	r4,-16(fp)
 c00d56c:	c00d7c40 	call	c00d7c4 <open>
 c00d570:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 c00d574:	e0bffa17 	ldw	r2,-24(fp)
 c00d578:	10002216 	blt	r2,zero,c00d604 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 c00d57c:	04030074 	movhi	r16,3073
 c00d580:	84005504 	addi	r16,r16,340
 c00d584:	e0bffa17 	ldw	r2,-24(fp)
 c00d588:	01400304 	movi	r5,12
 c00d58c:	1009883a 	mov	r4,r2
 c00d590:	c000b880 	call	c000b88 <__mulsi3>
 c00d594:	8085883a 	add	r2,r16,r2
 c00d598:	10c00017 	ldw	r3,0(r2)
 c00d59c:	e0bffb17 	ldw	r2,-20(fp)
 c00d5a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 c00d5a4:	04030074 	movhi	r16,3073
 c00d5a8:	84005504 	addi	r16,r16,340
 c00d5ac:	e0bffa17 	ldw	r2,-24(fp)
 c00d5b0:	01400304 	movi	r5,12
 c00d5b4:	1009883a 	mov	r4,r2
 c00d5b8:	c000b880 	call	c000b88 <__mulsi3>
 c00d5bc:	8085883a 	add	r2,r16,r2
 c00d5c0:	10800104 	addi	r2,r2,4
 c00d5c4:	10c00017 	ldw	r3,0(r2)
 c00d5c8:	e0bffb17 	ldw	r2,-20(fp)
 c00d5cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 c00d5d0:	04030074 	movhi	r16,3073
 c00d5d4:	84005504 	addi	r16,r16,340
 c00d5d8:	e0bffa17 	ldw	r2,-24(fp)
 c00d5dc:	01400304 	movi	r5,12
 c00d5e0:	1009883a 	mov	r4,r2
 c00d5e4:	c000b880 	call	c000b88 <__mulsi3>
 c00d5e8:	8085883a 	add	r2,r16,r2
 c00d5ec:	10800204 	addi	r2,r2,8
 c00d5f0:	10c00017 	ldw	r3,0(r2)
 c00d5f4:	e0bffb17 	ldw	r2,-20(fp)
 c00d5f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 c00d5fc:	e13ffa17 	ldw	r4,-24(fp)
 c00d600:	c00d9200 	call	c00d920 <alt_release_fd>
  }
} 
 c00d604:	0001883a 	nop
 c00d608:	e6ffff04 	addi	sp,fp,-4
 c00d60c:	dfc00217 	ldw	ra,8(sp)
 c00d610:	df000117 	ldw	fp,4(sp)
 c00d614:	dc000017 	ldw	r16,0(sp)
 c00d618:	dec00304 	addi	sp,sp,12
 c00d61c:	f800283a 	ret

0c00d620 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 c00d620:	defffb04 	addi	sp,sp,-20
 c00d624:	dfc00415 	stw	ra,16(sp)
 c00d628:	df000315 	stw	fp,12(sp)
 c00d62c:	df000304 	addi	fp,sp,12
 c00d630:	e13ffd15 	stw	r4,-12(fp)
 c00d634:	e17ffe15 	stw	r5,-8(fp)
 c00d638:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 c00d63c:	01c07fc4 	movi	r7,511
 c00d640:	01800044 	movi	r6,1
 c00d644:	e17ffd17 	ldw	r5,-12(fp)
 c00d648:	01030074 	movhi	r4,3073
 c00d64c:	21005804 	addi	r4,r4,352
 c00d650:	c00d53c0 	call	c00d53c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 c00d654:	01c07fc4 	movi	r7,511
 c00d658:	000d883a 	mov	r6,zero
 c00d65c:	e17ffe17 	ldw	r5,-8(fp)
 c00d660:	01030074 	movhi	r4,3073
 c00d664:	21005504 	addi	r4,r4,340
 c00d668:	c00d53c0 	call	c00d53c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 c00d66c:	01c07fc4 	movi	r7,511
 c00d670:	01800044 	movi	r6,1
 c00d674:	e17fff17 	ldw	r5,-4(fp)
 c00d678:	01030074 	movhi	r4,3073
 c00d67c:	21005b04 	addi	r4,r4,364
 c00d680:	c00d53c0 	call	c00d53c <alt_open_fd>
}  
 c00d684:	0001883a 	nop
 c00d688:	e037883a 	mov	sp,fp
 c00d68c:	dfc00117 	ldw	ra,4(sp)
 c00d690:	df000017 	ldw	fp,0(sp)
 c00d694:	dec00204 	addi	sp,sp,8
 c00d698:	f800283a 	ret

0c00d69c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00d69c:	defffe04 	addi	sp,sp,-8
 c00d6a0:	dfc00115 	stw	ra,4(sp)
 c00d6a4:	df000015 	stw	fp,0(sp)
 c00d6a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00d6ac:	d0a00d17 	ldw	r2,-32716(gp)
 c00d6b0:	10000326 	beq	r2,zero,c00d6c0 <alt_get_errno+0x24>
 c00d6b4:	d0a00d17 	ldw	r2,-32716(gp)
 c00d6b8:	103ee83a 	callr	r2
 c00d6bc:	00000106 	br	c00d6c4 <alt_get_errno+0x28>
 c00d6c0:	d0a78b04 	addi	r2,gp,-25044
}
 c00d6c4:	e037883a 	mov	sp,fp
 c00d6c8:	dfc00117 	ldw	ra,4(sp)
 c00d6cc:	df000017 	ldw	fp,0(sp)
 c00d6d0:	dec00204 	addi	sp,sp,8
 c00d6d4:	f800283a 	ret

0c00d6d8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 c00d6d8:	defffb04 	addi	sp,sp,-20
 c00d6dc:	dfc00415 	stw	ra,16(sp)
 c00d6e0:	df000315 	stw	fp,12(sp)
 c00d6e4:	dc000215 	stw	r16,8(sp)
 c00d6e8:	df000304 	addi	fp,sp,12
 c00d6ec:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 c00d6f0:	e0bffe17 	ldw	r2,-8(fp)
 c00d6f4:	10800217 	ldw	r2,8(r2)
 c00d6f8:	10d00034 	orhi	r3,r2,16384
 c00d6fc:	e0bffe17 	ldw	r2,-8(fp)
 c00d700:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c00d704:	e03ffd15 	stw	zero,-12(fp)
 c00d708:	00002306 	br	c00d798 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c00d70c:	04030074 	movhi	r16,3073
 c00d710:	84005504 	addi	r16,r16,340
 c00d714:	e0bffd17 	ldw	r2,-12(fp)
 c00d718:	01400304 	movi	r5,12
 c00d71c:	1009883a 	mov	r4,r2
 c00d720:	c000b880 	call	c000b88 <__mulsi3>
 c00d724:	8085883a 	add	r2,r16,r2
 c00d728:	10c00017 	ldw	r3,0(r2)
 c00d72c:	e0bffe17 	ldw	r2,-8(fp)
 c00d730:	10800017 	ldw	r2,0(r2)
 c00d734:	1880151e 	bne	r3,r2,c00d78c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 c00d738:	04030074 	movhi	r16,3073
 c00d73c:	84005504 	addi	r16,r16,340
 c00d740:	e0bffd17 	ldw	r2,-12(fp)
 c00d744:	01400304 	movi	r5,12
 c00d748:	1009883a 	mov	r4,r2
 c00d74c:	c000b880 	call	c000b88 <__mulsi3>
 c00d750:	8085883a 	add	r2,r16,r2
 c00d754:	10800204 	addi	r2,r2,8
 c00d758:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c00d75c:	10000b0e 	bge	r2,zero,c00d78c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 c00d760:	01400304 	movi	r5,12
 c00d764:	e13ffd17 	ldw	r4,-12(fp)
 c00d768:	c000b880 	call	c000b88 <__mulsi3>
 c00d76c:	1007883a 	mov	r3,r2
 c00d770:	00830074 	movhi	r2,3073
 c00d774:	10805504 	addi	r2,r2,340
 c00d778:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 c00d77c:	e0bffe17 	ldw	r2,-8(fp)
 c00d780:	18800226 	beq	r3,r2,c00d78c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 c00d784:	00bffcc4 	movi	r2,-13
 c00d788:	00000806 	br	c00d7ac <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c00d78c:	e0bffd17 	ldw	r2,-12(fp)
 c00d790:	10800044 	addi	r2,r2,1
 c00d794:	e0bffd15 	stw	r2,-12(fp)
 c00d798:	d0a00c17 	ldw	r2,-32720(gp)
 c00d79c:	1007883a 	mov	r3,r2
 c00d7a0:	e0bffd17 	ldw	r2,-12(fp)
 c00d7a4:	18bfd92e 	bgeu	r3,r2,c00d70c <__alt_data_end+0xfc00d70c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 c00d7a8:	0005883a 	mov	r2,zero
}
 c00d7ac:	e6ffff04 	addi	sp,fp,-4
 c00d7b0:	dfc00217 	ldw	ra,8(sp)
 c00d7b4:	df000117 	ldw	fp,4(sp)
 c00d7b8:	dc000017 	ldw	r16,0(sp)
 c00d7bc:	dec00304 	addi	sp,sp,12
 c00d7c0:	f800283a 	ret

0c00d7c4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 c00d7c4:	defff604 	addi	sp,sp,-40
 c00d7c8:	dfc00915 	stw	ra,36(sp)
 c00d7cc:	df000815 	stw	fp,32(sp)
 c00d7d0:	df000804 	addi	fp,sp,32
 c00d7d4:	e13ffd15 	stw	r4,-12(fp)
 c00d7d8:	e17ffe15 	stw	r5,-8(fp)
 c00d7dc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 c00d7e0:	00bfffc4 	movi	r2,-1
 c00d7e4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 c00d7e8:	00bffb44 	movi	r2,-19
 c00d7ec:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 c00d7f0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 c00d7f4:	d1600a04 	addi	r5,gp,-32728
 c00d7f8:	e13ffd17 	ldw	r4,-12(fp)
 c00d7fc:	c00db6c0 	call	c00db6c <alt_find_dev>
 c00d800:	e0bff815 	stw	r2,-32(fp)
 c00d804:	e0bff817 	ldw	r2,-32(fp)
 c00d808:	1000051e 	bne	r2,zero,c00d820 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 c00d80c:	e13ffd17 	ldw	r4,-12(fp)
 c00d810:	c00dbfc0 	call	c00dbfc <alt_find_file>
 c00d814:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 c00d818:	00800044 	movi	r2,1
 c00d81c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 c00d820:	e0bff817 	ldw	r2,-32(fp)
 c00d824:	10002b26 	beq	r2,zero,c00d8d4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 c00d828:	e13ff817 	ldw	r4,-32(fp)
 c00d82c:	c00dd040 	call	c00dd04 <alt_get_fd>
 c00d830:	e0bff915 	stw	r2,-28(fp)
 c00d834:	e0bff917 	ldw	r2,-28(fp)
 c00d838:	1000030e 	bge	r2,zero,c00d848 <open+0x84>
    {
      status = index;
 c00d83c:	e0bff917 	ldw	r2,-28(fp)
 c00d840:	e0bffa15 	stw	r2,-24(fp)
 c00d844:	00002506 	br	c00d8dc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 c00d848:	01400304 	movi	r5,12
 c00d84c:	e13ff917 	ldw	r4,-28(fp)
 c00d850:	c000b880 	call	c000b88 <__mulsi3>
 c00d854:	1007883a 	mov	r3,r2
 c00d858:	00830074 	movhi	r2,3073
 c00d85c:	10805504 	addi	r2,r2,340
 c00d860:	1885883a 	add	r2,r3,r2
 c00d864:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 c00d868:	e0fffe17 	ldw	r3,-8(fp)
 c00d86c:	00900034 	movhi	r2,16384
 c00d870:	10bfffc4 	addi	r2,r2,-1
 c00d874:	1886703a 	and	r3,r3,r2
 c00d878:	e0bffc17 	ldw	r2,-16(fp)
 c00d87c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 c00d880:	e0bffb17 	ldw	r2,-20(fp)
 c00d884:	1000051e 	bne	r2,zero,c00d89c <open+0xd8>
 c00d888:	e13ffc17 	ldw	r4,-16(fp)
 c00d88c:	c00d6d80 	call	c00d6d8 <alt_file_locked>
 c00d890:	e0bffa15 	stw	r2,-24(fp)
 c00d894:	e0bffa17 	ldw	r2,-24(fp)
 c00d898:	10001016 	blt	r2,zero,c00d8dc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 c00d89c:	e0bff817 	ldw	r2,-32(fp)
 c00d8a0:	10800317 	ldw	r2,12(r2)
 c00d8a4:	10000826 	beq	r2,zero,c00d8c8 <open+0x104>
 c00d8a8:	e0bff817 	ldw	r2,-32(fp)
 c00d8ac:	10800317 	ldw	r2,12(r2)
 c00d8b0:	e1ffff17 	ldw	r7,-4(fp)
 c00d8b4:	e1bffe17 	ldw	r6,-8(fp)
 c00d8b8:	e17ffd17 	ldw	r5,-12(fp)
 c00d8bc:	e13ffc17 	ldw	r4,-16(fp)
 c00d8c0:	103ee83a 	callr	r2
 c00d8c4:	00000106 	br	c00d8cc <open+0x108>
 c00d8c8:	0005883a 	mov	r2,zero
 c00d8cc:	e0bffa15 	stw	r2,-24(fp)
 c00d8d0:	00000206 	br	c00d8dc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 c00d8d4:	00bffb44 	movi	r2,-19
 c00d8d8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 c00d8dc:	e0bffa17 	ldw	r2,-24(fp)
 c00d8e0:	1000090e 	bge	r2,zero,c00d908 <open+0x144>
  {
    alt_release_fd (index);  
 c00d8e4:	e13ff917 	ldw	r4,-28(fp)
 c00d8e8:	c00d9200 	call	c00d920 <alt_release_fd>
    ALT_ERRNO = -status;
 c00d8ec:	c00d69c0 	call	c00d69c <alt_get_errno>
 c00d8f0:	1007883a 	mov	r3,r2
 c00d8f4:	e0bffa17 	ldw	r2,-24(fp)
 c00d8f8:	0085c83a 	sub	r2,zero,r2
 c00d8fc:	18800015 	stw	r2,0(r3)
    return -1;
 c00d900:	00bfffc4 	movi	r2,-1
 c00d904:	00000106 	br	c00d90c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 c00d908:	e0bff917 	ldw	r2,-28(fp)
}
 c00d90c:	e037883a 	mov	sp,fp
 c00d910:	dfc00117 	ldw	ra,4(sp)
 c00d914:	df000017 	ldw	fp,0(sp)
 c00d918:	dec00204 	addi	sp,sp,8
 c00d91c:	f800283a 	ret

0c00d920 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 c00d920:	defffc04 	addi	sp,sp,-16
 c00d924:	dfc00315 	stw	ra,12(sp)
 c00d928:	df000215 	stw	fp,8(sp)
 c00d92c:	dc000115 	stw	r16,4(sp)
 c00d930:	df000204 	addi	fp,sp,8
 c00d934:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 c00d938:	e0bffe17 	ldw	r2,-8(fp)
 c00d93c:	108000d0 	cmplti	r2,r2,3
 c00d940:	1000111e 	bne	r2,zero,c00d988 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 c00d944:	04030074 	movhi	r16,3073
 c00d948:	84005504 	addi	r16,r16,340
 c00d94c:	e0bffe17 	ldw	r2,-8(fp)
 c00d950:	01400304 	movi	r5,12
 c00d954:	1009883a 	mov	r4,r2
 c00d958:	c000b880 	call	c000b88 <__mulsi3>
 c00d95c:	8085883a 	add	r2,r16,r2
 c00d960:	10800204 	addi	r2,r2,8
 c00d964:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 c00d968:	04030074 	movhi	r16,3073
 c00d96c:	84005504 	addi	r16,r16,340
 c00d970:	e0bffe17 	ldw	r2,-8(fp)
 c00d974:	01400304 	movi	r5,12
 c00d978:	1009883a 	mov	r4,r2
 c00d97c:	c000b880 	call	c000b88 <__mulsi3>
 c00d980:	8085883a 	add	r2,r16,r2
 c00d984:	10000015 	stw	zero,0(r2)
  }
}
 c00d988:	0001883a 	nop
 c00d98c:	e6ffff04 	addi	sp,fp,-4
 c00d990:	dfc00217 	ldw	ra,8(sp)
 c00d994:	df000117 	ldw	fp,4(sp)
 c00d998:	dc000017 	ldw	r16,0(sp)
 c00d99c:	dec00304 	addi	sp,sp,12
 c00d9a0:	f800283a 	ret

0c00d9a4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 c00d9a4:	defffa04 	addi	sp,sp,-24
 c00d9a8:	df000515 	stw	fp,20(sp)
 c00d9ac:	df000504 	addi	fp,sp,20
 c00d9b0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00d9b4:	0005303a 	rdctl	r2,status
 c00d9b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00d9bc:	e0fffc17 	ldw	r3,-16(fp)
 c00d9c0:	00bfff84 	movi	r2,-2
 c00d9c4:	1884703a 	and	r2,r3,r2
 c00d9c8:	1001703a 	wrctl	status,r2
  
  return context;
 c00d9cc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 c00d9d0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 c00d9d4:	e0bfff17 	ldw	r2,-4(fp)
 c00d9d8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 c00d9dc:	e0bffd17 	ldw	r2,-12(fp)
 c00d9e0:	10800017 	ldw	r2,0(r2)
 c00d9e4:	e0fffd17 	ldw	r3,-12(fp)
 c00d9e8:	18c00117 	ldw	r3,4(r3)
 c00d9ec:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 c00d9f0:	e0bffd17 	ldw	r2,-12(fp)
 c00d9f4:	10800117 	ldw	r2,4(r2)
 c00d9f8:	e0fffd17 	ldw	r3,-12(fp)
 c00d9fc:	18c00017 	ldw	r3,0(r3)
 c00da00:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 c00da04:	e0bffd17 	ldw	r2,-12(fp)
 c00da08:	e0fffd17 	ldw	r3,-12(fp)
 c00da0c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 c00da10:	e0bffd17 	ldw	r2,-12(fp)
 c00da14:	e0fffd17 	ldw	r3,-12(fp)
 c00da18:	10c00015 	stw	r3,0(r2)
 c00da1c:	e0bffb17 	ldw	r2,-20(fp)
 c00da20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00da24:	e0bffe17 	ldw	r2,-8(fp)
 c00da28:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 c00da2c:	0001883a 	nop
 c00da30:	e037883a 	mov	sp,fp
 c00da34:	df000017 	ldw	fp,0(sp)
 c00da38:	dec00104 	addi	sp,sp,4
 c00da3c:	f800283a 	ret

0c00da40 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 c00da40:	defffb04 	addi	sp,sp,-20
 c00da44:	dfc00415 	stw	ra,16(sp)
 c00da48:	df000315 	stw	fp,12(sp)
 c00da4c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 c00da50:	d0a00f17 	ldw	r2,-32708(gp)
 c00da54:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 c00da58:	d0a79117 	ldw	r2,-25020(gp)
 c00da5c:	10800044 	addi	r2,r2,1
 c00da60:	d0a79115 	stw	r2,-25020(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c00da64:	00002e06 	br	c00db20 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 c00da68:	e0bffd17 	ldw	r2,-12(fp)
 c00da6c:	10800017 	ldw	r2,0(r2)
 c00da70:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 c00da74:	e0bffd17 	ldw	r2,-12(fp)
 c00da78:	10800403 	ldbu	r2,16(r2)
 c00da7c:	10803fcc 	andi	r2,r2,255
 c00da80:	10000426 	beq	r2,zero,c00da94 <alt_tick+0x54>
 c00da84:	d0a79117 	ldw	r2,-25020(gp)
 c00da88:	1000021e 	bne	r2,zero,c00da94 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 c00da8c:	e0bffd17 	ldw	r2,-12(fp)
 c00da90:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 c00da94:	e0bffd17 	ldw	r2,-12(fp)
 c00da98:	10800217 	ldw	r2,8(r2)
 c00da9c:	d0e79117 	ldw	r3,-25020(gp)
 c00daa0:	18801d36 	bltu	r3,r2,c00db18 <alt_tick+0xd8>
 c00daa4:	e0bffd17 	ldw	r2,-12(fp)
 c00daa8:	10800403 	ldbu	r2,16(r2)
 c00daac:	10803fcc 	andi	r2,r2,255
 c00dab0:	1000191e 	bne	r2,zero,c00db18 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 c00dab4:	e0bffd17 	ldw	r2,-12(fp)
 c00dab8:	10800317 	ldw	r2,12(r2)
 c00dabc:	e0fffd17 	ldw	r3,-12(fp)
 c00dac0:	18c00517 	ldw	r3,20(r3)
 c00dac4:	1809883a 	mov	r4,r3
 c00dac8:	103ee83a 	callr	r2
 c00dacc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 c00dad0:	e0bfff17 	ldw	r2,-4(fp)
 c00dad4:	1000031e 	bne	r2,zero,c00dae4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 c00dad8:	e13ffd17 	ldw	r4,-12(fp)
 c00dadc:	c00d9a40 	call	c00d9a4 <alt_alarm_stop>
 c00dae0:	00000d06 	br	c00db18 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 c00dae4:	e0bffd17 	ldw	r2,-12(fp)
 c00dae8:	10c00217 	ldw	r3,8(r2)
 c00daec:	e0bfff17 	ldw	r2,-4(fp)
 c00daf0:	1887883a 	add	r3,r3,r2
 c00daf4:	e0bffd17 	ldw	r2,-12(fp)
 c00daf8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 c00dafc:	e0bffd17 	ldw	r2,-12(fp)
 c00db00:	10c00217 	ldw	r3,8(r2)
 c00db04:	d0a79117 	ldw	r2,-25020(gp)
 c00db08:	1880032e 	bgeu	r3,r2,c00db18 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 c00db0c:	e0bffd17 	ldw	r2,-12(fp)
 c00db10:	00c00044 	movi	r3,1
 c00db14:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 c00db18:	e0bffe17 	ldw	r2,-8(fp)
 c00db1c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c00db20:	e0fffd17 	ldw	r3,-12(fp)
 c00db24:	d0a00f04 	addi	r2,gp,-32708
 c00db28:	18bfcf1e 	bne	r3,r2,c00da68 <__alt_data_end+0xfc00da68>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 c00db2c:	0001883a 	nop
}
 c00db30:	0001883a 	nop
 c00db34:	e037883a 	mov	sp,fp
 c00db38:	dfc00117 	ldw	ra,4(sp)
 c00db3c:	df000017 	ldw	fp,0(sp)
 c00db40:	dec00204 	addi	sp,sp,8
 c00db44:	f800283a 	ret

0c00db48 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 c00db48:	deffff04 	addi	sp,sp,-4
 c00db4c:	df000015 	stw	fp,0(sp)
 c00db50:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 c00db54:	000170fa 	wrctl	ienable,zero
}
 c00db58:	0001883a 	nop
 c00db5c:	e037883a 	mov	sp,fp
 c00db60:	df000017 	ldw	fp,0(sp)
 c00db64:	dec00104 	addi	sp,sp,4
 c00db68:	f800283a 	ret

0c00db6c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 c00db6c:	defffa04 	addi	sp,sp,-24
 c00db70:	dfc00515 	stw	ra,20(sp)
 c00db74:	df000415 	stw	fp,16(sp)
 c00db78:	df000404 	addi	fp,sp,16
 c00db7c:	e13ffe15 	stw	r4,-8(fp)
 c00db80:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 c00db84:	e0bfff17 	ldw	r2,-4(fp)
 c00db88:	10800017 	ldw	r2,0(r2)
 c00db8c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 c00db90:	e13ffe17 	ldw	r4,-8(fp)
 c00db94:	c000cf00 	call	c000cf0 <strlen>
 c00db98:	10800044 	addi	r2,r2,1
 c00db9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c00dba0:	00000d06 	br	c00dbd8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 c00dba4:	e0bffc17 	ldw	r2,-16(fp)
 c00dba8:	10800217 	ldw	r2,8(r2)
 c00dbac:	e0fffd17 	ldw	r3,-12(fp)
 c00dbb0:	180d883a 	mov	r6,r3
 c00dbb4:	e17ffe17 	ldw	r5,-8(fp)
 c00dbb8:	1009883a 	mov	r4,r2
 c00dbbc:	c00deb00 	call	c00deb0 <memcmp>
 c00dbc0:	1000021e 	bne	r2,zero,c00dbcc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 c00dbc4:	e0bffc17 	ldw	r2,-16(fp)
 c00dbc8:	00000706 	br	c00dbe8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 c00dbcc:	e0bffc17 	ldw	r2,-16(fp)
 c00dbd0:	10800017 	ldw	r2,0(r2)
 c00dbd4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c00dbd8:	e0fffc17 	ldw	r3,-16(fp)
 c00dbdc:	e0bfff17 	ldw	r2,-4(fp)
 c00dbe0:	18bff01e 	bne	r3,r2,c00dba4 <__alt_data_end+0xfc00dba4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 c00dbe4:	0005883a 	mov	r2,zero
}
 c00dbe8:	e037883a 	mov	sp,fp
 c00dbec:	dfc00117 	ldw	ra,4(sp)
 c00dbf0:	df000017 	ldw	fp,0(sp)
 c00dbf4:	dec00204 	addi	sp,sp,8
 c00dbf8:	f800283a 	ret

0c00dbfc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 c00dbfc:	defffb04 	addi	sp,sp,-20
 c00dc00:	dfc00415 	stw	ra,16(sp)
 c00dc04:	df000315 	stw	fp,12(sp)
 c00dc08:	df000304 	addi	fp,sp,12
 c00dc0c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 c00dc10:	d0a00817 	ldw	r2,-32736(gp)
 c00dc14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c00dc18:	00003106 	br	c00dce0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 c00dc1c:	e0bffd17 	ldw	r2,-12(fp)
 c00dc20:	10800217 	ldw	r2,8(r2)
 c00dc24:	1009883a 	mov	r4,r2
 c00dc28:	c000cf00 	call	c000cf0 <strlen>
 c00dc2c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 c00dc30:	e0bffd17 	ldw	r2,-12(fp)
 c00dc34:	10c00217 	ldw	r3,8(r2)
 c00dc38:	e0bffe17 	ldw	r2,-8(fp)
 c00dc3c:	10bfffc4 	addi	r2,r2,-1
 c00dc40:	1885883a 	add	r2,r3,r2
 c00dc44:	10800003 	ldbu	r2,0(r2)
 c00dc48:	10803fcc 	andi	r2,r2,255
 c00dc4c:	1080201c 	xori	r2,r2,128
 c00dc50:	10bfe004 	addi	r2,r2,-128
 c00dc54:	10800bd8 	cmpnei	r2,r2,47
 c00dc58:	1000031e 	bne	r2,zero,c00dc68 <alt_find_file+0x6c>
    {
      len -= 1;
 c00dc5c:	e0bffe17 	ldw	r2,-8(fp)
 c00dc60:	10bfffc4 	addi	r2,r2,-1
 c00dc64:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c00dc68:	e0bffe17 	ldw	r2,-8(fp)
 c00dc6c:	e0ffff17 	ldw	r3,-4(fp)
 c00dc70:	1885883a 	add	r2,r3,r2
 c00dc74:	10800003 	ldbu	r2,0(r2)
 c00dc78:	10803fcc 	andi	r2,r2,255
 c00dc7c:	1080201c 	xori	r2,r2,128
 c00dc80:	10bfe004 	addi	r2,r2,-128
 c00dc84:	10800be0 	cmpeqi	r2,r2,47
 c00dc88:	1000081e 	bne	r2,zero,c00dcac <alt_find_file+0xb0>
 c00dc8c:	e0bffe17 	ldw	r2,-8(fp)
 c00dc90:	e0ffff17 	ldw	r3,-4(fp)
 c00dc94:	1885883a 	add	r2,r3,r2
 c00dc98:	10800003 	ldbu	r2,0(r2)
 c00dc9c:	10803fcc 	andi	r2,r2,255
 c00dca0:	1080201c 	xori	r2,r2,128
 c00dca4:	10bfe004 	addi	r2,r2,-128
 c00dca8:	10000a1e 	bne	r2,zero,c00dcd4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 c00dcac:	e0bffd17 	ldw	r2,-12(fp)
 c00dcb0:	10800217 	ldw	r2,8(r2)
 c00dcb4:	e0fffe17 	ldw	r3,-8(fp)
 c00dcb8:	180d883a 	mov	r6,r3
 c00dcbc:	e17fff17 	ldw	r5,-4(fp)
 c00dcc0:	1009883a 	mov	r4,r2
 c00dcc4:	c00deb00 	call	c00deb0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c00dcc8:	1000021e 	bne	r2,zero,c00dcd4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 c00dccc:	e0bffd17 	ldw	r2,-12(fp)
 c00dcd0:	00000706 	br	c00dcf0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 c00dcd4:	e0bffd17 	ldw	r2,-12(fp)
 c00dcd8:	10800017 	ldw	r2,0(r2)
 c00dcdc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c00dce0:	e0fffd17 	ldw	r3,-12(fp)
 c00dce4:	d0a00804 	addi	r2,gp,-32736
 c00dce8:	18bfcc1e 	bne	r3,r2,c00dc1c <__alt_data_end+0xfc00dc1c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 c00dcec:	0005883a 	mov	r2,zero
}
 c00dcf0:	e037883a 	mov	sp,fp
 c00dcf4:	dfc00117 	ldw	ra,4(sp)
 c00dcf8:	df000017 	ldw	fp,0(sp)
 c00dcfc:	dec00204 	addi	sp,sp,8
 c00dd00:	f800283a 	ret

0c00dd04 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 c00dd04:	defffa04 	addi	sp,sp,-24
 c00dd08:	dfc00515 	stw	ra,20(sp)
 c00dd0c:	df000415 	stw	fp,16(sp)
 c00dd10:	dc000315 	stw	r16,12(sp)
 c00dd14:	df000404 	addi	fp,sp,16
 c00dd18:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 c00dd1c:	00bffa04 	movi	r2,-24
 c00dd20:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c00dd24:	e03ffc15 	stw	zero,-16(fp)
 c00dd28:	00001d06 	br	c00dda0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 c00dd2c:	04030074 	movhi	r16,3073
 c00dd30:	84005504 	addi	r16,r16,340
 c00dd34:	e0bffc17 	ldw	r2,-16(fp)
 c00dd38:	01400304 	movi	r5,12
 c00dd3c:	1009883a 	mov	r4,r2
 c00dd40:	c000b880 	call	c000b88 <__mulsi3>
 c00dd44:	8085883a 	add	r2,r16,r2
 c00dd48:	10800017 	ldw	r2,0(r2)
 c00dd4c:	1000111e 	bne	r2,zero,c00dd94 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 c00dd50:	04030074 	movhi	r16,3073
 c00dd54:	84005504 	addi	r16,r16,340
 c00dd58:	e0bffc17 	ldw	r2,-16(fp)
 c00dd5c:	01400304 	movi	r5,12
 c00dd60:	1009883a 	mov	r4,r2
 c00dd64:	c000b880 	call	c000b88 <__mulsi3>
 c00dd68:	8085883a 	add	r2,r16,r2
 c00dd6c:	e0fffe17 	ldw	r3,-8(fp)
 c00dd70:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 c00dd74:	d0e00c17 	ldw	r3,-32720(gp)
 c00dd78:	e0bffc17 	ldw	r2,-16(fp)
 c00dd7c:	1880020e 	bge	r3,r2,c00dd88 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 c00dd80:	e0bffc17 	ldw	r2,-16(fp)
 c00dd84:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
 c00dd88:	e0bffc17 	ldw	r2,-16(fp)
 c00dd8c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 c00dd90:	00000606 	br	c00ddac <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c00dd94:	e0bffc17 	ldw	r2,-16(fp)
 c00dd98:	10800044 	addi	r2,r2,1
 c00dd9c:	e0bffc15 	stw	r2,-16(fp)
 c00dda0:	e0bffc17 	ldw	r2,-16(fp)
 c00dda4:	10800810 	cmplti	r2,r2,32
 c00dda8:	103fe01e 	bne	r2,zero,c00dd2c <__alt_data_end+0xfc00dd2c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 c00ddac:	e0bffd17 	ldw	r2,-12(fp)
}
 c00ddb0:	e6ffff04 	addi	sp,fp,-4
 c00ddb4:	dfc00217 	ldw	ra,8(sp)
 c00ddb8:	df000117 	ldw	fp,4(sp)
 c00ddbc:	dc000017 	ldw	r16,0(sp)
 c00ddc0:	dec00304 	addi	sp,sp,12
 c00ddc4:	f800283a 	ret

0c00ddc8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 c00ddc8:	defffe04 	addi	sp,sp,-8
 c00ddcc:	df000115 	stw	fp,4(sp)
 c00ddd0:	df000104 	addi	fp,sp,4
 c00ddd4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 c00ddd8:	e0bfff17 	ldw	r2,-4(fp)
 c00dddc:	10bffe84 	addi	r2,r2,-6
 c00dde0:	10c00428 	cmpgeui	r3,r2,16
 c00dde4:	18001a1e 	bne	r3,zero,c00de50 <alt_exception_cause_generated_bad_addr+0x88>
 c00dde8:	100690ba 	slli	r3,r2,2
 c00ddec:	00830074 	movhi	r2,3073
 c00ddf0:	10b78004 	addi	r2,r2,-8704
 c00ddf4:	1885883a 	add	r2,r3,r2
 c00ddf8:	10800017 	ldw	r2,0(r2)
 c00ddfc:	1000683a 	jmp	r2
 c00de00:	0c00de40 	call	c00de4 <__alt_mem_onchip_memory2_0+0xc00de4>
 c00de04:	0c00de40 	call	c00de4 <__alt_mem_onchip_memory2_0+0xc00de4>
 c00de08:	0c00de50 	cmplti	r16,at,889
 c00de0c:	0c00de50 	cmplti	r16,at,889
 c00de10:	0c00de50 	cmplti	r16,at,889
 c00de14:	0c00de40 	call	c00de4 <__alt_mem_onchip_memory2_0+0xc00de4>
 c00de18:	0c00de48 	cmpgei	r16,at,889
 c00de1c:	0c00de50 	cmplti	r16,at,889
 c00de20:	0c00de40 	call	c00de4 <__alt_mem_onchip_memory2_0+0xc00de4>
 c00de24:	0c00de40 	call	c00de4 <__alt_mem_onchip_memory2_0+0xc00de4>
 c00de28:	0c00de50 	cmplti	r16,at,889
 c00de2c:	0c00de40 	call	c00de4 <__alt_mem_onchip_memory2_0+0xc00de4>
 c00de30:	0c00de48 	cmpgei	r16,at,889
 c00de34:	0c00de50 	cmplti	r16,at,889
 c00de38:	0c00de50 	cmplti	r16,at,889
 c00de3c:	0c00de40 	call	c00de4 <__alt_mem_onchip_memory2_0+0xc00de4>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 c00de40:	00800044 	movi	r2,1
 c00de44:	00000306 	br	c00de54 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 c00de48:	0005883a 	mov	r2,zero
 c00de4c:	00000106 	br	c00de54 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 c00de50:	0005883a 	mov	r2,zero
  }
}
 c00de54:	e037883a 	mov	sp,fp
 c00de58:	df000017 	ldw	fp,0(sp)
 c00de5c:	dec00104 	addi	sp,sp,4
 c00de60:	f800283a 	ret

0c00de64 <atexit>:
 c00de64:	200b883a 	mov	r5,r4
 c00de68:	000f883a 	mov	r7,zero
 c00de6c:	000d883a 	mov	r6,zero
 c00de70:	0009883a 	mov	r4,zero
 c00de74:	c00df2c1 	jmpi	c00df2c <__register_exitproc>

0c00de78 <exit>:
 c00de78:	defffe04 	addi	sp,sp,-8
 c00de7c:	000b883a 	mov	r5,zero
 c00de80:	dc000015 	stw	r16,0(sp)
 c00de84:	dfc00115 	stw	ra,4(sp)
 c00de88:	2021883a 	mov	r16,r4
 c00de8c:	c00e0440 	call	c00e044 <__call_exitprocs>
 c00de90:	00830074 	movhi	r2,3073
 c00de94:	1080b704 	addi	r2,r2,732
 c00de98:	11000017 	ldw	r4,0(r2)
 c00de9c:	20800f17 	ldw	r2,60(r4)
 c00dea0:	10000126 	beq	r2,zero,c00dea8 <exit+0x30>
 c00dea4:	103ee83a 	callr	r2
 c00dea8:	8009883a 	mov	r4,r16
 c00deac:	c00e1c40 	call	c00e1c4 <_exit>

0c00deb0 <memcmp>:
 c00deb0:	01c000c4 	movi	r7,3
 c00deb4:	3980192e 	bgeu	r7,r6,c00df1c <memcmp+0x6c>
 c00deb8:	2144b03a 	or	r2,r4,r5
 c00debc:	11c4703a 	and	r2,r2,r7
 c00dec0:	10000f26 	beq	r2,zero,c00df00 <memcmp+0x50>
 c00dec4:	20800003 	ldbu	r2,0(r4)
 c00dec8:	28c00003 	ldbu	r3,0(r5)
 c00decc:	10c0151e 	bne	r2,r3,c00df24 <memcmp+0x74>
 c00ded0:	31bfff84 	addi	r6,r6,-2
 c00ded4:	01ffffc4 	movi	r7,-1
 c00ded8:	00000406 	br	c00deec <memcmp+0x3c>
 c00dedc:	20800003 	ldbu	r2,0(r4)
 c00dee0:	28c00003 	ldbu	r3,0(r5)
 c00dee4:	31bfffc4 	addi	r6,r6,-1
 c00dee8:	10c00e1e 	bne	r2,r3,c00df24 <memcmp+0x74>
 c00deec:	21000044 	addi	r4,r4,1
 c00def0:	29400044 	addi	r5,r5,1
 c00def4:	31fff91e 	bne	r6,r7,c00dedc <__alt_data_end+0xfc00dedc>
 c00def8:	0005883a 	mov	r2,zero
 c00defc:	f800283a 	ret
 c00df00:	20c00017 	ldw	r3,0(r4)
 c00df04:	28800017 	ldw	r2,0(r5)
 c00df08:	18bfee1e 	bne	r3,r2,c00dec4 <__alt_data_end+0xfc00dec4>
 c00df0c:	31bfff04 	addi	r6,r6,-4
 c00df10:	21000104 	addi	r4,r4,4
 c00df14:	29400104 	addi	r5,r5,4
 c00df18:	39bff936 	bltu	r7,r6,c00df00 <__alt_data_end+0xfc00df00>
 c00df1c:	303fe91e 	bne	r6,zero,c00dec4 <__alt_data_end+0xfc00dec4>
 c00df20:	003ff506 	br	c00def8 <__alt_data_end+0xfc00def8>
 c00df24:	10c5c83a 	sub	r2,r2,r3
 c00df28:	f800283a 	ret

0c00df2c <__register_exitproc>:
 c00df2c:	defffa04 	addi	sp,sp,-24
 c00df30:	dc000315 	stw	r16,12(sp)
 c00df34:	04030074 	movhi	r16,3073
 c00df38:	8400b704 	addi	r16,r16,732
 c00df3c:	80c00017 	ldw	r3,0(r16)
 c00df40:	dc400415 	stw	r17,16(sp)
 c00df44:	dfc00515 	stw	ra,20(sp)
 c00df48:	18805217 	ldw	r2,328(r3)
 c00df4c:	2023883a 	mov	r17,r4
 c00df50:	10003726 	beq	r2,zero,c00e030 <__register_exitproc+0x104>
 c00df54:	10c00117 	ldw	r3,4(r2)
 c00df58:	010007c4 	movi	r4,31
 c00df5c:	20c00e16 	blt	r4,r3,c00df98 <__register_exitproc+0x6c>
 c00df60:	1a000044 	addi	r8,r3,1
 c00df64:	8800221e 	bne	r17,zero,c00dff0 <__register_exitproc+0xc4>
 c00df68:	18c00084 	addi	r3,r3,2
 c00df6c:	18c7883a 	add	r3,r3,r3
 c00df70:	18c7883a 	add	r3,r3,r3
 c00df74:	12000115 	stw	r8,4(r2)
 c00df78:	10c7883a 	add	r3,r2,r3
 c00df7c:	19400015 	stw	r5,0(r3)
 c00df80:	0005883a 	mov	r2,zero
 c00df84:	dfc00517 	ldw	ra,20(sp)
 c00df88:	dc400417 	ldw	r17,16(sp)
 c00df8c:	dc000317 	ldw	r16,12(sp)
 c00df90:	dec00604 	addi	sp,sp,24
 c00df94:	f800283a 	ret
 c00df98:	00800034 	movhi	r2,0
 c00df9c:	10800004 	addi	r2,r2,0
 c00dfa0:	10002626 	beq	r2,zero,c00e03c <__register_exitproc+0x110>
 c00dfa4:	01006404 	movi	r4,400
 c00dfa8:	d9400015 	stw	r5,0(sp)
 c00dfac:	d9800115 	stw	r6,4(sp)
 c00dfb0:	d9c00215 	stw	r7,8(sp)
 c00dfb4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 c00dfb8:	d9400017 	ldw	r5,0(sp)
 c00dfbc:	d9800117 	ldw	r6,4(sp)
 c00dfc0:	d9c00217 	ldw	r7,8(sp)
 c00dfc4:	10001d26 	beq	r2,zero,c00e03c <__register_exitproc+0x110>
 c00dfc8:	81000017 	ldw	r4,0(r16)
 c00dfcc:	10000115 	stw	zero,4(r2)
 c00dfd0:	02000044 	movi	r8,1
 c00dfd4:	22405217 	ldw	r9,328(r4)
 c00dfd8:	0007883a 	mov	r3,zero
 c00dfdc:	12400015 	stw	r9,0(r2)
 c00dfe0:	20805215 	stw	r2,328(r4)
 c00dfe4:	10006215 	stw	zero,392(r2)
 c00dfe8:	10006315 	stw	zero,396(r2)
 c00dfec:	883fde26 	beq	r17,zero,c00df68 <__alt_data_end+0xfc00df68>
 c00dff0:	18c9883a 	add	r4,r3,r3
 c00dff4:	2109883a 	add	r4,r4,r4
 c00dff8:	1109883a 	add	r4,r2,r4
 c00dffc:	21802215 	stw	r6,136(r4)
 c00e000:	01800044 	movi	r6,1
 c00e004:	12406217 	ldw	r9,392(r2)
 c00e008:	30cc983a 	sll	r6,r6,r3
 c00e00c:	4992b03a 	or	r9,r9,r6
 c00e010:	12406215 	stw	r9,392(r2)
 c00e014:	21c04215 	stw	r7,264(r4)
 c00e018:	01000084 	movi	r4,2
 c00e01c:	893fd21e 	bne	r17,r4,c00df68 <__alt_data_end+0xfc00df68>
 c00e020:	11006317 	ldw	r4,396(r2)
 c00e024:	218cb03a 	or	r6,r4,r6
 c00e028:	11806315 	stw	r6,396(r2)
 c00e02c:	003fce06 	br	c00df68 <__alt_data_end+0xfc00df68>
 c00e030:	18805304 	addi	r2,r3,332
 c00e034:	18805215 	stw	r2,328(r3)
 c00e038:	003fc606 	br	c00df54 <__alt_data_end+0xfc00df54>
 c00e03c:	00bfffc4 	movi	r2,-1
 c00e040:	003fd006 	br	c00df84 <__alt_data_end+0xfc00df84>

0c00e044 <__call_exitprocs>:
 c00e044:	defff504 	addi	sp,sp,-44
 c00e048:	df000915 	stw	fp,36(sp)
 c00e04c:	dd400615 	stw	r21,24(sp)
 c00e050:	dc800315 	stw	r18,12(sp)
 c00e054:	dfc00a15 	stw	ra,40(sp)
 c00e058:	ddc00815 	stw	r23,32(sp)
 c00e05c:	dd800715 	stw	r22,28(sp)
 c00e060:	dd000515 	stw	r20,20(sp)
 c00e064:	dcc00415 	stw	r19,16(sp)
 c00e068:	dc400215 	stw	r17,8(sp)
 c00e06c:	dc000115 	stw	r16,4(sp)
 c00e070:	d9000015 	stw	r4,0(sp)
 c00e074:	2839883a 	mov	fp,r5
 c00e078:	04800044 	movi	r18,1
 c00e07c:	057fffc4 	movi	r21,-1
 c00e080:	00830074 	movhi	r2,3073
 c00e084:	1080b704 	addi	r2,r2,732
 c00e088:	12000017 	ldw	r8,0(r2)
 c00e08c:	45005217 	ldw	r20,328(r8)
 c00e090:	44c05204 	addi	r19,r8,328
 c00e094:	a0001c26 	beq	r20,zero,c00e108 <__call_exitprocs+0xc4>
 c00e098:	a0800117 	ldw	r2,4(r20)
 c00e09c:	15ffffc4 	addi	r23,r2,-1
 c00e0a0:	b8000d16 	blt	r23,zero,c00e0d8 <__call_exitprocs+0x94>
 c00e0a4:	14000044 	addi	r16,r2,1
 c00e0a8:	8421883a 	add	r16,r16,r16
 c00e0ac:	8421883a 	add	r16,r16,r16
 c00e0b0:	84402004 	addi	r17,r16,128
 c00e0b4:	a463883a 	add	r17,r20,r17
 c00e0b8:	a421883a 	add	r16,r20,r16
 c00e0bc:	e0001e26 	beq	fp,zero,c00e138 <__call_exitprocs+0xf4>
 c00e0c0:	80804017 	ldw	r2,256(r16)
 c00e0c4:	e0801c26 	beq	fp,r2,c00e138 <__call_exitprocs+0xf4>
 c00e0c8:	bdffffc4 	addi	r23,r23,-1
 c00e0cc:	843fff04 	addi	r16,r16,-4
 c00e0d0:	8c7fff04 	addi	r17,r17,-4
 c00e0d4:	bd7ff91e 	bne	r23,r21,c00e0bc <__alt_data_end+0xfc00e0bc>
 c00e0d8:	00800034 	movhi	r2,0
 c00e0dc:	10800004 	addi	r2,r2,0
 c00e0e0:	10000926 	beq	r2,zero,c00e108 <__call_exitprocs+0xc4>
 c00e0e4:	a0800117 	ldw	r2,4(r20)
 c00e0e8:	1000301e 	bne	r2,zero,c00e1ac <__call_exitprocs+0x168>
 c00e0ec:	a0800017 	ldw	r2,0(r20)
 c00e0f0:	10003226 	beq	r2,zero,c00e1bc <__call_exitprocs+0x178>
 c00e0f4:	a009883a 	mov	r4,r20
 c00e0f8:	98800015 	stw	r2,0(r19)
 c00e0fc:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 c00e100:	9d000017 	ldw	r20,0(r19)
 c00e104:	a03fe41e 	bne	r20,zero,c00e098 <__alt_data_end+0xfc00e098>
 c00e108:	dfc00a17 	ldw	ra,40(sp)
 c00e10c:	df000917 	ldw	fp,36(sp)
 c00e110:	ddc00817 	ldw	r23,32(sp)
 c00e114:	dd800717 	ldw	r22,28(sp)
 c00e118:	dd400617 	ldw	r21,24(sp)
 c00e11c:	dd000517 	ldw	r20,20(sp)
 c00e120:	dcc00417 	ldw	r19,16(sp)
 c00e124:	dc800317 	ldw	r18,12(sp)
 c00e128:	dc400217 	ldw	r17,8(sp)
 c00e12c:	dc000117 	ldw	r16,4(sp)
 c00e130:	dec00b04 	addi	sp,sp,44
 c00e134:	f800283a 	ret
 c00e138:	a0800117 	ldw	r2,4(r20)
 c00e13c:	80c00017 	ldw	r3,0(r16)
 c00e140:	10bfffc4 	addi	r2,r2,-1
 c00e144:	15c01426 	beq	r2,r23,c00e198 <__call_exitprocs+0x154>
 c00e148:	80000015 	stw	zero,0(r16)
 c00e14c:	183fde26 	beq	r3,zero,c00e0c8 <__alt_data_end+0xfc00e0c8>
 c00e150:	95c8983a 	sll	r4,r18,r23
 c00e154:	a0806217 	ldw	r2,392(r20)
 c00e158:	a5800117 	ldw	r22,4(r20)
 c00e15c:	2084703a 	and	r2,r4,r2
 c00e160:	10000b26 	beq	r2,zero,c00e190 <__call_exitprocs+0x14c>
 c00e164:	a0806317 	ldw	r2,396(r20)
 c00e168:	2088703a 	and	r4,r4,r2
 c00e16c:	20000c1e 	bne	r4,zero,c00e1a0 <__call_exitprocs+0x15c>
 c00e170:	89400017 	ldw	r5,0(r17)
 c00e174:	d9000017 	ldw	r4,0(sp)
 c00e178:	183ee83a 	callr	r3
 c00e17c:	a0800117 	ldw	r2,4(r20)
 c00e180:	15bfbf1e 	bne	r2,r22,c00e080 <__alt_data_end+0xfc00e080>
 c00e184:	98800017 	ldw	r2,0(r19)
 c00e188:	153fcf26 	beq	r2,r20,c00e0c8 <__alt_data_end+0xfc00e0c8>
 c00e18c:	003fbc06 	br	c00e080 <__alt_data_end+0xfc00e080>
 c00e190:	183ee83a 	callr	r3
 c00e194:	003ff906 	br	c00e17c <__alt_data_end+0xfc00e17c>
 c00e198:	a5c00115 	stw	r23,4(r20)
 c00e19c:	003feb06 	br	c00e14c <__alt_data_end+0xfc00e14c>
 c00e1a0:	89000017 	ldw	r4,0(r17)
 c00e1a4:	183ee83a 	callr	r3
 c00e1a8:	003ff406 	br	c00e17c <__alt_data_end+0xfc00e17c>
 c00e1ac:	a0800017 	ldw	r2,0(r20)
 c00e1b0:	a027883a 	mov	r19,r20
 c00e1b4:	1029883a 	mov	r20,r2
 c00e1b8:	003fb606 	br	c00e094 <__alt_data_end+0xfc00e094>
 c00e1bc:	0005883a 	mov	r2,zero
 c00e1c0:	003ffb06 	br	c00e1b0 <__alt_data_end+0xfc00e1b0>

0c00e1c4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 c00e1c4:	defffd04 	addi	sp,sp,-12
 c00e1c8:	df000215 	stw	fp,8(sp)
 c00e1cc:	df000204 	addi	fp,sp,8
 c00e1d0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 c00e1d4:	0001883a 	nop
 c00e1d8:	e0bfff17 	ldw	r2,-4(fp)
 c00e1dc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 c00e1e0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 c00e1e4:	10000226 	beq	r2,zero,c00e1f0 <_exit+0x2c>
    ALT_SIM_FAIL();
 c00e1e8:	002af070 	cmpltui	zero,zero,43969
 c00e1ec:	00000106 	br	c00e1f4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 c00e1f0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 c00e1f4:	003fff06 	br	c00e1f4 <__alt_data_end+0xfc00e1f4>
